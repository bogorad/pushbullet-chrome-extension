{
  "version": 3,
  "sources": ["../src/lib/ui/dom.ts", "../src/debug-dashboard/index.ts"],
  "sourcesContent": ["/**\r\n * DOM manipulation utilities for UI pages\r\n */\r\n\r\n/**\r\n * Safely get an element by ID with type checking\r\n */\r\nexport function getElementById<T extends HTMLElement>(id: string): T {\r\n  const element = document.getElementById(id);\r\n  if (!element) {\r\n    throw new Error(`Element with id \"${id}\" not found`);\r\n  }\r\n  return element as T;\r\n}\r\n\r\n/**\r\n * Safely query selector with type checking\r\n */\r\nexport function querySelector<T extends Element>(selector: string): T {\r\n  const element = document.querySelector(selector);\r\n  if (!element) {\r\n    throw new Error(`Element with selector \"${selector}\" not found`);\r\n  }\r\n  return element as T;\r\n}\r\n\r\n/**\r\n * Show an element\r\n */\r\nexport function show(element: HTMLElement): void {\r\n  element.style.display = '';\r\n}\r\n\r\n/**\r\n * Hide an element\r\n */\r\nexport function hide(element: HTMLElement): void {\r\n  element.style.display = 'none';\r\n}\r\n\r\n/**\r\n * Toggle element visibility\r\n */\r\nexport function toggle(element: HTMLElement): void {\r\n  if (element.style.display === 'none') {\r\n    show(element);\r\n  } else {\r\n    hide(element);\r\n  }\r\n}\r\n\r\n/**\r\n * Set text content safely\r\n */\r\nexport function setText(element: HTMLElement, text: string): void {\r\n  element.textContent = text;\r\n}\r\n\r\n/**\r\n * Set HTML content safely (sanitized)\r\n */\r\nexport function setHTML(element: HTMLElement, html: string): void {\r\n  // Basic sanitization - remove script tags\r\n  const sanitized = html.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '');\r\n  element.innerHTML = sanitized;\r\n}\r\n\r\n/**\r\n * Add event listener with type safety\r\n */\r\nexport function on<K extends keyof HTMLElementEventMap>(\r\n  element: HTMLElement,\r\n  event: K,\r\n  handler: (this: HTMLElement, ev: HTMLElementEventMap[K]) => void\r\n): void {\r\n  element.addEventListener(event, handler);\r\n}\r\n\r\n/**\r\n * Format timestamp for display\r\n */\r\nexport function formatTimestamp(date: Date): string {\r\n  const now = new Date();\r\n  const diff = now.getTime() - date.getTime();\r\n  const seconds = Math.floor(diff / 1000);\r\n  const minutes = Math.floor(seconds / 60);\r\n  const hours = Math.floor(minutes / 60);\r\n  const days = Math.floor(hours / 24);\r\n\r\n  if (seconds < 60) {\r\n    return 'just now';\r\n  } else if (minutes < 60) {\r\n    return `${minutes}m ago`;\r\n  } else if (hours < 24) {\r\n    return `${hours}h ago`;\r\n  } else if (days < 7) {\r\n    return `${days}d ago`;\r\n  } else {\r\n    return date.toLocaleDateString();\r\n  }\r\n}\r\n\r\n/**\r\n * Show status message\r\n */\r\nexport function showStatus(element: HTMLElement, message: string, type: 'success' | 'error' | 'info' = 'info'): void {\r\n  element.textContent = message;\r\n  element.className = `status-message status-${type}`;\r\n  show(element);\r\n  \r\n  // Auto-hide after 3 seconds\r\n  setTimeout(() => {\r\n    hide(element);\r\n  }, 3000);\r\n}\r\n\r\n/**\r\n * Clear all children of an element\r\n */\r\nexport function clearChildren(element: HTMLElement): void {\r\n  while (element.firstChild) {\r\n    element.removeChild(element.firstChild);\r\n  }\r\n}\r\n\r\n", "/**\r\n * Debug Dashboard\r\n */\r\n\r\nimport { getElementById } from '../lib/ui/dom';\r\nimport { MessageAction } from '../types/domain';\r\n\r\n// Type definitions\r\ninterface DebugSummary {\r\n  success: boolean;\r\n  summary: {\r\n    totalLogs: number;\r\n    logs: LogEntry[];\r\n    performance: PerformanceData;\r\n    initializationStats: InitializationStats;\r\n    mv3LifecycleStats?: Mv3LifecycleStats;\r\n    errors: ErrorData;\r\n    config: DebugConfig;\r\n    websocketState: WebSocketState;\r\n  };\r\n}\r\n\r\ninterface LogEntry {\r\n  timestamp: string;\r\n  category: string;\r\n  level: 'DEBUG' | 'INFO' | 'WARN' | 'ERROR';\r\n  message: string;\r\n  data?: unknown;\r\n  error?: {\r\n    name: string;\r\n    message: string;\r\n    stack?: string;\r\n  };\r\n}\r\n\r\ninterface PerformanceData {\r\n  websocket?: {\r\n    connectionAttempts: number;\r\n    successfulConnections: number;\r\n    messagesReceived: number;\r\n    reconnectionAttempts: number;\r\n    lastConnectionTime?: number;\r\n  };\r\n  qualityMetrics?: {\r\n    averageLatency?: number;\r\n    minLatency?: number;\r\n    maxLatency?: number;\r\n    connectionUptime: number;\r\n    currentUptime: number;\r\n    disconnectionCount: number;\r\n    healthChecksPassed: number;\r\n    healthChecksFailed: number;\r\n    consecutiveFailures: number;\r\n  };\r\n  notifications?: {\r\n    pushesReceived: number;\r\n    notificationsCreated: number;\r\n    notificationsFailed: number;\r\n    averageProcessingTime?: number;\r\n  };\r\n}\r\n\r\ninterface InitializationStats {\r\n  stats: {\r\n    total: number;\r\n    onInstalled: number;\r\n    onStartup: number;\r\n    serviceWorkerWakeup: number;\r\n    unknown: number;\r\n    lastInitialization?: number;\r\n    recentInitializations?: Array<{\r\n      source: string;\r\n      timestamp: number;\r\n    }>;\r\n  };\r\n}\r\n\r\ninterface Mv3LifecycleStats {\r\n  restarts: number;\r\n  wakeUpTriggers: {\r\n    onInstalled?: number;\r\n    onStartup?: number;\r\n    onAlarm?: number;\r\n    onMessage?: number;\r\n  };\r\n  avgRecoveryTime: string;\r\n}\r\n\r\ninterface ErrorData {\r\n  total: number;\r\n  critical: number;\r\n  last24h: number;\r\n  lastHour: number;\r\n  topErrors?: Array<{\r\n    error: string;\r\n    count: number;\r\n  }>;\r\n  recentCritical?: Array<{\r\n    name: string;\r\n    message: string;\r\n    category: string;\r\n    timestamp: number;\r\n    stack?: string;\r\n  }>;\r\n}\r\n\r\ninterface DebugConfig {\r\n  enabled: boolean;\r\n  [key: string]: unknown;\r\n}\r\n\r\ninterface WebSocketState {\r\n  current: {\r\n    stateText: string;\r\n    readyState?: string;\r\n    stateMachineState?: string;\r\n    stateMachineDescription?: string;\r\n  };\r\n  lastCheck?: string;\r\n  historyLength?: number;\r\n  [key: string]: unknown;\r\n}\r\n\r\n// DOM Elements\r\nconst refreshBtn = getElementById<HTMLButtonElement>('refresh-btn');\r\nconst exportJsonBtn = getElementById<HTMLButtonElement>('export-json-btn');\r\nconst exportTextBtn = getElementById<HTMLButtonElement>('export-text-btn');\r\nconst clearLogsBtn = getElementById<HTMLButtonElement>('clear-logs-btn');\r\nconst closeBtn = getElementById<HTMLButtonElement>('close-btn');\r\nconst autoRefreshToggle = getElementById<HTMLInputElement>('auto-refresh-toggle');\r\nconst debugToggle = getElementById<HTMLInputElement>('debug-toggle');\r\nconst debugStatusText = getElementById<HTMLSpanElement>('debug-status-text');\r\nconst lastUpdatedSpan = getElementById<HTMLSpanElement>('last-updated');\r\n\r\n\r\nconst totalLogsEl = getElementById<HTMLSpanElement>('total-logs');\r\nconst errorCountEl = getElementById<HTMLSpanElement>('error-count');\r\nconst websocketStatusEl = getElementById<HTMLSpanElement>('websocket-status'); // Now displays state machine status\r\n\r\n// Tab elements\r\nconst tabBtns = document.querySelectorAll<HTMLButtonElement>('.tab-btn');\r\nconst tabPanes = document.querySelectorAll<HTMLDivElement>('.tab-pane');\r\n\r\n// Logs tab elements\r\nconst logCategoryFilter = getElementById<HTMLSelectElement>('log-category-filter');\r\nconst logLevelFilter = getElementById<HTMLSelectElement>('log-level-filter');\r\nconst logCountSelect = getElementById<HTMLSelectElement>('log-count-select');\r\nconst logsContainer = getElementById<HTMLDivElement>('logs-container');\r\n\r\n// Performance tab elements\r\nconst websocketMetricsEl = getElementById<HTMLDivElement>('websocket-metrics');\r\nconst qualityMetricsEl = getElementById<HTMLDivElement>('quality-metrics');\r\nconst notificationMetricsEl = getElementById<HTMLDivElement>('notification-metrics');\r\nconst initializationStatsEl = getElementById<HTMLDivElement>('initialization-stats');\r\nconst mv3LifecycleMetricsEl = getElementById<HTMLDivElement>('mv3-lifecycle-metrics');\r\n\r\n// Errors tab elements\r\nconst errorSummaryEl = getElementById<HTMLDivElement>('error-summary');\r\nconst criticalErrorsEl = getElementById<HTMLDivElement>('critical-errors');\r\n\r\n// Config tab elements\r\nconst debugConfigEl = getElementById<HTMLDivElement>('debug-config');\r\nconst systemInfoEl = getElementById<HTMLDivElement>('system-info');\r\n\r\n// State\r\nlet autoRefreshInterval: number | null = null;\r\nlet currentData: DebugSummary['summary'] | null = null;\r\n\r\n/**\r\n * Set up event listeners\r\n */\r\nfunction setupEventListeners(): void {\r\n  // Refresh button\r\n  refreshBtn.addEventListener('click', () => {\r\n    loadDashboardData();\r\n  });\r\n\r\n  // Export buttons\r\n  exportJsonBtn.addEventListener('click', () => {\r\n    exportData('json');\r\n  });\r\n\r\n  exportTextBtn.addEventListener('click', () => {\r\n    exportData('text');\r\n  });\r\n\r\n  // Clear logs button\r\n  clearLogsBtn.addEventListener('click', () => {\r\n    if (confirm('Are you sure you want to permanently delete all logs?')) {\r\n      chrome.runtime.sendMessage({ action: MessageAction.CLEAR_ALL_LOGS }, (response) => {\r\n        if (response && response.success) {\r\n          // Refresh the dashboard to show the empty logs\r\n          loadDashboardData();\r\n        } else {\r\n          showError('Failed to clear logs.');\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  // Debug toggle switch\r\n  debugToggle.addEventListener('change', () => {\r\n    const enabled = debugToggle.checked;\r\n    debugStatusText.textContent = enabled ? 'Enabled' : 'Disabled';\r\n\r\n    // Send message to background to update debug config\r\n    chrome.runtime.sendMessage({\r\n      action: MessageAction.UPDATE_DEBUG_CONFIG,\r\n      config: { enabled }\r\n    }, (response) => {\r\n      if (response && response.success) {\r\n        // Refresh dashboard to reflect new config\r\n        loadDashboardData();\r\n      } else {\r\n        showError('Failed to update debug config.');\r\n        // Revert toggle on failure\r\n        debugToggle.checked = !enabled;\r\n        debugStatusText.textContent = !enabled ? 'Enabled' : 'Disabled';\r\n      }\r\n    });\r\n  });\r\n\r\n  // Close button\r\n  closeBtn.addEventListener('click', () => {\r\n    window.close();\r\n  });\r\n\r\n  // Auto-refresh toggle\r\n  autoRefreshToggle.addEventListener('change', () => {\r\n    if (autoRefreshToggle.checked) {\r\n      startAutoRefresh();\r\n    } else {\r\n      stopAutoRefresh();\r\n    }\r\n  });\r\n\r\n  // Tab buttons\r\n  tabBtns.forEach(btn => {\r\n    btn.addEventListener('click', () => {\r\n      const tabName = btn.dataset.tab;\r\n      if (tabName) {\r\n        switchTab(tabName);\r\n      }\r\n    });\r\n  });\r\n\r\n  // Log filters\r\n  logCategoryFilter.addEventListener('change', () => {\r\n    renderLogs();\r\n  });\r\n\r\n  logLevelFilter.addEventListener('change', () => {\r\n    renderLogs();\r\n  });\r\n\r\n  logCountSelect.addEventListener('change', () => {\r\n    loadDashboardData();\r\n  });\r\n}\r\n\r\n/**\r\n * Switch tabs\r\n */\r\nfunction switchTab(tabName: string): void {\r\n  // Update tab buttons\r\n  tabBtns.forEach(btn => {\r\n    if (btn.dataset.tab === tabName) {\r\n      btn.classList.add('active');\r\n    } else {\r\n      btn.classList.remove('active');\r\n    }\r\n  });\r\n\r\n  // Update tab panes\r\n  tabPanes.forEach(pane => {\r\n    if (pane.id === `${tabName}-tab`) {\r\n      pane.classList.add('active');\r\n    } else {\r\n      pane.classList.remove('active');\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Load dashboard data\r\n */\r\nasync function loadDashboardData(): Promise<void> {\r\n  try {\r\n    // Get debug summary from background script\r\n    const response = await chrome.runtime.sendMessage({\r\n      action: MessageAction.GET_DEBUG_SUMMARY\r\n    }) as DebugSummary;\r\n\r\n    if (response && response.success) {\r\n      currentData = response.summary;\r\n      updateDashboard(currentData);\r\n      updateLastUpdated();\r\n    } else {\r\n      console.error('Failed to load debug data');\r\n      showError('Failed to load debug data');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error loading dashboard data:', error);\r\n    showError('Error loading dashboard data: ' + (error as Error).message);\r\n  }\r\n}\r\n\r\n/**\r\n * Update dashboard with data\r\n */\r\nfunction updateDashboard(data: DebugSummary['summary']): void {\r\n  updateSummary(data);\r\n  renderLogs();\r\n  renderPerformanceMetrics(data.performance);\r\n  renderInitializationStats(data.initializationStats);\r\n  renderMv3LifecycleMetrics(data.mv3LifecycleStats);\r\n  renderErrors(data.errors);\r\n  renderConfig(data.config, data.websocketState);\r\n}\r\n\r\n/**\r\n * Update summary cards\r\n */\r\nfunction updateSummary(data: DebugSummary['summary']): void {\r\n  // Debug status - update toggle switch and text\r\n  if (data.config && data.config.enabled) {\r\n    debugToggle.checked = true;\r\n    debugStatusText.textContent = 'Enabled';\r\n  } else {\r\n    debugToggle.checked = false;\r\n    debugStatusText.textContent = 'Disabled';\r\n  }\r\n\r\n  // Total logs\r\n  if (data.totalLogs !== undefined) {\r\n    totalLogsEl.textContent = data.totalLogs.toString();\r\n  } else if (data.logs && data.logs.length) {\r\n    totalLogsEl.textContent = data.logs.length.toString();\r\n  } else {\r\n    totalLogsEl.textContent = '0';\r\n  }\r\n\r\n  // Error count\r\n  if (data.errors && data.errors.last24h !== undefined) {\r\n    errorCountEl.textContent = data.errors.last24h.toString();\r\n  } else {\r\n    errorCountEl.textContent = '0';\r\n  }\r\n\r\n  // State Machine status (replaces generic websocket status)\r\n  if (data.websocketState && data.websocketState.current) {\r\n    const stateMachineState = data.websocketState.current.stateMachineState || 'unknown';\r\n    const stateDescription = data.websocketState.current.stateMachineDescription || data.websocketState.current.stateText || 'Unknown';\r\n    websocketStatusEl.textContent = stateDescription;\r\n    websocketStatusEl.title = `State: ${stateMachineState}`;\r\n  } else {\r\n    websocketStatusEl.textContent = 'Unknown';\r\n  }\r\n}\r\n\r\n/**\r\n * Render logs\r\n */\r\nfunction renderLogs(): void {\r\n  if (!currentData || !currentData.logs) {\r\n    logsContainer.innerHTML = '<p class=\"loading\">No logs available</p>';\r\n    return;\r\n  }\r\n\r\n  // Apply filters\r\n  const categoryFilter = logCategoryFilter.value;\r\n  const levelFilter = logLevelFilter.value;\r\n\r\n  let filteredLogs = currentData.logs;\r\n\r\n  if (categoryFilter) {\r\n    filteredLogs = filteredLogs.filter(log => log.category === categoryFilter);\r\n  }\r\n\r\n  if (levelFilter) {\r\n    filteredLogs = filteredLogs.filter(log => log.level === levelFilter);\r\n  }\r\n\r\n  // Render logs\r\n  if (filteredLogs.length === 0) {\r\n    logsContainer.innerHTML = '<p class=\"loading\">No logs match the current filters</p>';\r\n    return;\r\n  }\r\n\r\n  // By creating a copy with [...filteredLogs] and then reversing it,\r\n  // we ensure the newest logs are processed first without changing the original data.\r\n  logsContainer.innerHTML = [...filteredLogs].reverse().map(log => {\r\n    const dataStr = log.data ? JSON.stringify(log.data, null, 2) : '';\r\n    const errorStr = log.error ? `${log.error.name}: ${log.error.message}` : '';\r\n\r\n    return `\r\n      <div class=\"log-entry ${log.level}\">\r\n        <div class=\"log-header\">\r\n          <span class=\"log-category\">[${log.category}]</span>\r\n          <span class=\"log-level ${log.level}\">${log.level}</span>\r\n        </div>\r\n        <div class=\"log-timestamp\">${log.timestamp}</div>\r\n        <div class=\"log-message\">${log.message}</div>\r\n        ${dataStr ? `<div class=\"log-data\">${dataStr}</div>` : ''}\r\n        ${errorStr ? `<div class=\"log-data error\">${errorStr}</div>` : ''}\r\n      </div>\r\n    `;\r\n  }).join('');\r\n}\r\n\r\n/**\r\n * Format duration in ms to human readable\r\n */\r\nfunction formatDuration(ms: number): string {\r\n  if (!ms || ms === 0) return '0s';\r\n  const seconds = Math.floor(ms / 1000);\r\n  const minutes = Math.floor(seconds / 60);\r\n  const hours = Math.floor(minutes / 60);\r\n\r\n  if (hours > 0) {\r\n    return `${hours}h ${minutes % 60}m`;\r\n  } else if (minutes > 0) {\r\n    return `${minutes}m ${seconds % 60}s`;\r\n  } else {\r\n    return `${seconds}s`;\r\n  }\r\n}\r\n\r\n/**\r\n * Render performance metrics\r\n */\r\nfunction renderPerformanceMetrics(performance: PerformanceData | undefined): void {\r\n  if (!performance) {\r\n    websocketMetricsEl.innerHTML = '<p class=\"loading\">No data available</p>';\r\n    qualityMetricsEl.innerHTML = '<p class=\"loading\">No data available</p>';\r\n    notificationMetricsEl.innerHTML = '<p class=\"loading\">No data available</p>';\r\n    return;\r\n  }\r\n\r\n  // WebSocket metrics\r\n  if (performance.websocket) {\r\n    const ws = performance.websocket;\r\n    websocketMetricsEl.innerHTML = `\r\n      <p><strong>Connection Attempts:</strong> <span>${ws.connectionAttempts || 0}</span></p>\r\n      <p><strong>Successful Connections:</strong> <span>${ws.successfulConnections || 0}</span></p>\r\n      <p><strong>Messages Received:</strong> <span>${ws.messagesReceived || 0}</span></p>\r\n      <p><strong>Reconnection Attempts:</strong> <span>${ws.reconnectionAttempts || 0}</span></p>\r\n      <p><strong>Last Connection:</strong> <span>${ws.lastConnectionTime ? new Date(ws.lastConnectionTime).toLocaleString() : 'Never'}</span></p>\r\n    `;\r\n  } else {\r\n    websocketMetricsEl.innerHTML = '<p class=\"loading\">No websocket data available</p>';\r\n  }\r\n\r\n  // Connection quality metrics\r\n  if (performance.qualityMetrics) {\r\n    const quality = performance.qualityMetrics;\r\n    qualityMetricsEl.innerHTML = `\r\n      <p><strong>Average Latency:</strong> <span>${quality.averageLatency ? quality.averageLatency.toFixed(0) + 'ms' : 'N/A'}</span></p>\r\n      <p><strong>Min/Max Latency:</strong> <span>${quality.minLatency ? quality.minLatency.toFixed(0) : 'N/A'} / ${quality.maxLatency ? quality.maxLatency.toFixed(0) : 'N/A'} ms</span></p>\r\n      <p><strong>Total Uptime:</strong> <span>${formatDuration(quality.connectionUptime)}</span></p>\r\n      <p><strong>Current Uptime:</strong> <span>${formatDuration(quality.currentUptime)}</span></p>\r\n      <p><strong>Disconnections:</strong> <span>${quality.disconnectionCount || 0}</span></p>\r\n      <p><strong>Health Checks:</strong> <span class=\"success\">${quality.healthChecksPassed || 0} passed</span> / <span class=\"error\">${quality.healthChecksFailed || 0} failed</span></p>\r\n      <p><strong>Consecutive Failures:</strong> <span class=\"${quality.consecutiveFailures > 3 ? 'error' : ''}\">${quality.consecutiveFailures || 0}</span></p>\r\n    `;\r\n  } else {\r\n    qualityMetricsEl.innerHTML = '<p class=\"loading\">No quality metrics available</p>';\r\n  }\r\n\r\n  // Notification metrics\r\n  if (performance.notifications) {\r\n    const notif = performance.notifications;\r\n    notificationMetricsEl.innerHTML = `\r\n      <p><strong>Pushes Received:</strong> <span>${notif.pushesReceived || 0}</span></p>\r\n      <p><strong>Notifications Created:</strong> <span>${notif.notificationsCreated || 0}</span></p>\r\n      <p><strong>Notifications Failed:</strong> <span>${notif.notificationsFailed || 0}</span></p>\r\n      <p><strong>Avg Processing Time:</strong> <span>${notif.averageProcessingTime ? notif.averageProcessingTime.toFixed(2) + 'ms' : 'N/A'}</span></p>\r\n    `;\r\n  } else {\r\n    notificationMetricsEl.innerHTML = '<p class=\"loading\">No notification metrics available</p>';\r\n  }\r\n}\r\n\r\n/**\r\n * Render initialization statistics\r\n */\r\nfunction renderInitializationStats(initStats: InitializationStats | undefined): void {\r\n  if (!initStats || !initStats.stats) {\r\n    initializationStatsEl.innerHTML = '<p class=\"loading\">No data available</p>';\r\n    return;\r\n  }\r\n\r\n  const stats = initStats.stats;\r\n  initializationStatsEl.innerHTML = `\r\n    <p><strong>Total Initializations:</strong> <span>${stats.total || 0}</span></p>\r\n    <p><strong>On Install/Update:</strong> <span>${stats.onInstalled || 0}</span></p>\r\n    <p><strong>On Browser Startup:</strong> <span>${stats.onStartup || 0}</span></p>\r\n    <p><strong>Service Worker Wakeup:</strong> <span>${stats.serviceWorkerWakeup || 0}</span></p>\r\n    <p><strong>Unknown Source:</strong> <span>${stats.unknown || 0}</span></p>\r\n    <p><strong>Last Initialization:</strong> <span>${stats.lastInitialization ? new Date(stats.lastInitialization).toLocaleString() : 'Never'}</span></p>\r\n  `;\r\n\r\n  // Show recent initializations\r\n  if (stats.recentInitializations && stats.recentInitializations.length > 0) {\r\n    const recentHtml = stats.recentInitializations.map(init =>\r\n      `<p style=\"font-size: 12px; margin: 5px 0;\"><strong>${init.source}:</strong> ${new Date(init.timestamp).toLocaleTimeString()}</p>`\r\n    ).join('');\r\n    initializationStatsEl.innerHTML += '<hr style=\"margin: 10px 0; border-color: #444;\"><p style=\"font-size: 11px; color: #888; margin-bottom: 5px;\">Recent (last 10):</p>' + recentHtml;\r\n  }\r\n}\r\n\r\n/**\r\n * Render MV3 lifecycle metrics\r\n */\r\nfunction renderMv3LifecycleMetrics(stats: Mv3LifecycleStats | undefined): void {\r\n  if (!stats) {\r\n    mv3LifecycleMetricsEl.innerHTML = '<p class=\"loading\">No MV3 stats available</p>';\r\n    return;\r\n  }\r\n\r\n  mv3LifecycleMetricsEl.innerHTML = `\r\n    <p><strong>Service Worker Restarts:</strong> <span>${stats.restarts || 0}</span></p>\r\n    <p><strong>Avg. Recovery Time:</strong> <span>${stats.avgRecoveryTime || 'N/A'}</span></p>\r\n    <hr style=\"margin: 10px 0; border-color: #444;\">\r\n    <p style=\"font-size: 11px; color: #888; margin-bottom: 5px;\">Wake-up Triggers:</p>\r\n    <p><strong>On Startup/Install:</strong> <span>${(stats.wakeUpTriggers.onInstalled || 0) + (stats.wakeUpTriggers.onStartup || 0)}</span></p>\r\n    <p><strong>By Alarm:</strong> <span>${stats.wakeUpTriggers.onAlarm || 0}</span></p>\r\n    <p><strong>By User Action:</strong> <span>${stats.wakeUpTriggers.onMessage || 0}</span></p>\r\n  `;\r\n}\r\n\r\n/**\r\n * Render errors\r\n */\r\nfunction renderErrors(errors: ErrorData | undefined): void {\r\n  if (!errors) {\r\n    errorSummaryEl.innerHTML = '<p class=\"loading\">No data available</p>';\r\n    criticalErrorsEl.innerHTML = '<p class=\"loading\">No data available</p>';\r\n    return;\r\n  }\r\n\r\n  // Error summary\r\n  errorSummaryEl.innerHTML = `\r\n    <p><strong>Total Errors:</strong> <span>${errors.total || 0}</span></p>\r\n    <p><strong>Critical Errors:</strong> <span>${errors.critical || 0}</span></p>\r\n    <p><strong>Last 24 Hours:</strong> <span>${errors.last24h || 0}</span></p>\r\n    <p><strong>Last Hour:</strong> <span>${errors.lastHour || 0}</span></p>\r\n  `;\r\n\r\n  // Top errors\r\n  if (errors.topErrors && errors.topErrors.length > 0) {\r\n    const topErrorsHtml = errors.topErrors.map(err =>\r\n      `<p><strong>${err.error}:</strong> <span>${err.count} occurrences</span></p>`\r\n    ).join('');\r\n    errorSummaryEl.innerHTML += '<hr style=\"margin: 15px 0; border-color: #444;\">' + topErrorsHtml;\r\n  }\r\n\r\n  // Critical errors\r\n  if (errors.recentCritical && errors.recentCritical.length > 0) {\r\n    criticalErrorsEl.innerHTML = errors.recentCritical.map(err => `\r\n      <div class=\"error-item\">\r\n        <h5>${err.name || 'Error'}: ${err.message}</h5>\r\n        <p><strong>Category:</strong> ${err.category}</p>\r\n        <p><strong>Time:</strong> ${new Date(err.timestamp).toLocaleString()}</p>\r\n        ${err.stack ? `<pre>${err.stack}</pre>` : ''}\r\n      </div>\r\n    `).join('');\r\n  } else {\r\n    criticalErrorsEl.innerHTML = '<p class=\"loading\">No critical errors</p>';\r\n  }\r\n}\r\n\r\n/**\r\n * Render configuration\r\n */\r\nfunction renderConfig(config: DebugConfig | undefined, websocketState: WebSocketState | undefined): void {\r\n  if (!config) {\r\n    debugConfigEl.innerHTML = '<p class=\"loading\">No data available</p>';\r\n    return;\r\n  }\r\n\r\n  debugConfigEl.innerHTML = `<pre>${JSON.stringify(config, null, 2)}</pre>`;\r\n\r\n  // System info\r\n  if (websocketState) {\r\n    systemInfoEl.innerHTML = `<pre>${JSON.stringify(websocketState, null, 2)}</pre>`;\r\n  } else {\r\n    systemInfoEl.innerHTML = '<p class=\"loading\">No data available</p>';\r\n  }\r\n}\r\n\r\n/**\r\n * Export data\r\n */\r\nasync function exportData(format: 'json' | 'text'): Promise<void> {\r\n  try {\r\n    // Get full debug data from background\r\n    const response = await chrome.runtime.sendMessage({\r\n      action: MessageAction.EXPORT_DEBUG_DATA\r\n    }) as { success: boolean; data?: unknown };\r\n\r\n    if (!response || !response.success) {\r\n      showError('Failed to export debug data');\r\n      return;\r\n    }\r\n\r\n    const data = response.data;\r\n    let content: string;\r\n    let filename: string;\r\n    let mimeType: string;\r\n\r\n    if (format === 'json') {\r\n      content = JSON.stringify(data, null, 2);\r\n      filename = `pushbullet-debug-${Date.now()}.json`;\r\n      mimeType = 'application/json';\r\n    } else {\r\n      // Text format\r\n      content = formatDebugDataAsText(data as Record<string, unknown>);\r\n      filename = `pushbullet-debug-${Date.now()}.txt`;\r\n      mimeType = 'text/plain';\r\n    }\r\n\r\n    // Create download\r\n    const blob = new Blob([content], { type: mimeType });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = filename;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n\r\n    console.log('Debug data exported:', filename);\r\n  } catch (error) {\r\n    console.error('Error exporting data:', error);\r\n    showError('Error exporting data: ' + (error as Error).message);\r\n  }\r\n}\r\n\r\n/**\r\n * Format debug data as text\r\n */\r\nfunction formatDebugDataAsText(data: Record<string, unknown>): string {\r\n  let text = '='.repeat(80) + '\\n';\r\n  text += 'PUSHBULLET DEBUG REPORT\\n';\r\n  text += '='.repeat(80) + '\\n\\n';\r\n  text += `Generated: ${(data.timestamp as string) || new Date().toISOString()}\\n`;\r\n  text += `Version: ${(data.version as string) || 'Unknown'}\\n\\n`;\r\n\r\n  // Debug configuration\r\n  text += '-'.repeat(80) + '\\n';\r\n  text += 'DEBUG CONFIGURATION\\n';\r\n  text += '-'.repeat(80) + '\\n';\r\n  const debugLogs = data.debugLogs as Record<string, unknown>;\r\n  text += JSON.stringify(debugLogs?.config, null, 2) + '\\n\\n';\r\n\r\n  // System info\r\n  text += '-'.repeat(80) + '\\n';\r\n  text += 'SYSTEM INFORMATION\\n';\r\n  text += '-'.repeat(80) + '\\n';\r\n  text += JSON.stringify(data.systemInfo, null, 2) + '\\n\\n';\r\n\r\n  // Error summary\r\n  text += '-'.repeat(80) + '\\n';\r\n  text += 'ERROR SUMMARY\\n';\r\n  text += '-'.repeat(80) + '\\n';\r\n  const errorData = data.errorData as Record<string, unknown>;\r\n  text += JSON.stringify(errorData?.summary, null, 2) + '\\n\\n';\r\n\r\n  // Performance summary\r\n  text += '-'.repeat(80) + '\\n';\r\n  text += 'PERFORMANCE METRICS\\n';\r\n  text += '-'.repeat(80) + '\\n';\r\n  const performanceData = data.performanceData as Record<string, unknown>;\r\n  text += JSON.stringify(performanceData?.summary, null, 2) + '\\n\\n';\r\n\r\n  // Recent logs\r\n  text += '-'.repeat(80) + '\\n';\r\n  text += 'RECENT LOGS (Last 50)\\n';\r\n  text += '-'.repeat(80) + '\\n';\r\n  const logs = (debugLogs?.logs as LogEntry[]) || [];\r\n  const recentLogs = logs.slice(-50);\r\n  recentLogs.forEach(log => {\r\n    text += `[${log.timestamp}] [${log.category}:${log.level}] ${log.message}\\n`;\r\n    if (log.data) {\r\n      text += `  Data: ${JSON.stringify(log.data)}\\n`;\r\n    }\r\n    if (log.error) {\r\n      text += `  Error: ${log.error.message}\\n`;\r\n    }\r\n    text += '\\n';\r\n  });\r\n\r\n  return text;\r\n}\r\n\r\n/**\r\n * Auto-refresh functions\r\n */\r\nfunction startAutoRefresh(): void {\r\n  if (autoRefreshInterval) {\r\n    clearInterval(autoRefreshInterval);\r\n  }\r\n  autoRefreshInterval = window.setInterval(() => {\r\n    loadDashboardData();\r\n  }, 2000); // Refresh every 2 seconds\r\n}\r\n\r\nfunction stopAutoRefresh(): void {\r\n  if (autoRefreshInterval) {\r\n    clearInterval(autoRefreshInterval);\r\n    autoRefreshInterval = null;\r\n  }\r\n}\r\n\r\n/**\r\n * Update last updated timestamp\r\n */\r\nfunction updateLastUpdated(): void {\r\n  lastUpdatedSpan.textContent = new Date().toLocaleTimeString();\r\n}\r\n\r\n/**\r\n * Show error message\r\n */\r\nfunction showError(message: string): void {\r\n  console.error(message);\r\n  // Could add a toast notification here\r\n}\r\n\r\n/**\r\n * Initialize dashboard\r\n */\r\nfunction init(): void {\r\n  console.log('Debug Dashboard loaded');\r\n\r\n  // Set up event listeners\r\n  setupEventListeners();\r\n\r\n  // Load initial data\r\n  loadDashboardData();\r\n\r\n  // Start auto-refresh if enabled\r\n  if (autoRefreshToggle.checked) {\r\n    startAutoRefresh();\r\n  }\r\n}\r\n\r\n// Initialize on DOM load\r\nif (document.readyState === 'loading') {\r\n  document.addEventListener('DOMContentLoaded', init);\r\n} else {\r\n  init();\r\n}\r\n\r\n"],
  "mappings": "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",
  "names": ["init"]
}
