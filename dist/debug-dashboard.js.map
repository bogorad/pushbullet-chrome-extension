{
  "version": 3,
  "sources": ["../src/lib/ui/dom.ts", "../src/debug-dashboard/index.ts"],
  "sourcesContent": ["/**\n * DOM manipulation utilities for UI pages\n */\n\n/**\n * Safely get an element by ID with type checking\n */\nexport function getElementById<T extends HTMLElement>(id: string): T {\n  const element = document.getElementById(id);\n  if (!element) {\n    throw new Error(`Element with id \"${id}\" not found`);\n  }\n  return element as T;\n}\n\n/**\n * Safely query selector with type checking\n */\nexport function querySelector<T extends Element>(selector: string): T {\n  const element = document.querySelector(selector);\n  if (!element) {\n    throw new Error(`Element with selector \"${selector}\" not found`);\n  }\n  return element as T;\n}\n\n/**\n * Show an element\n */\nexport function show(element: HTMLElement): void {\n  element.style.display = '';\n}\n\n/**\n * Hide an element\n */\nexport function hide(element: HTMLElement): void {\n  element.style.display = 'none';\n}\n\n/**\n * Toggle element visibility\n */\nexport function toggle(element: HTMLElement): void {\n  if (element.style.display === 'none') {\n    show(element);\n  } else {\n    hide(element);\n  }\n}\n\n/**\n * Set text content safely\n */\nexport function setText(element: HTMLElement, text: string): void {\n  element.textContent = text;\n}\n\n/**\n * Set HTML content safely (sanitized)\n */\nexport function setHTML(element: HTMLElement, html: string): void {\n  // Basic sanitization - remove script tags\n  const sanitized = html.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '');\n  element.innerHTML = sanitized;\n}\n\n/**\n * Add event listener with type safety\n */\nexport function on<K extends keyof HTMLElementEventMap>(\n  element: HTMLElement,\n  event: K,\n  handler: (this: HTMLElement, ev: HTMLElementEventMap[K]) => void\n): void {\n  element.addEventListener(event, handler);\n}\n\n/**\n * Format timestamp for display\n */\nexport function formatTimestamp(date: Date): string {\n  const now = new Date();\n  const diff = now.getTime() - date.getTime();\n  const seconds = Math.floor(diff / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  if (seconds < 60) {\n    return 'just now';\n  } else if (minutes < 60) {\n    return `${minutes}m ago`;\n  } else if (hours < 24) {\n    return `${hours}h ago`;\n  } else if (days < 7) {\n    return `${days}d ago`;\n  } else {\n    return date.toLocaleDateString();\n  }\n}\n\n/**\n * Show status message\n */\nexport function showStatus(element: HTMLElement, message: string, type: 'success' | 'error' | 'info' = 'info'): void {\n  element.textContent = message;\n  element.className = `status-message status-${type}`;\n  show(element);\n  \n  // Auto-hide after 3 seconds\n  setTimeout(() => {\n    hide(element);\n  }, 3000);\n}\n\n/**\n * Clear all children of an element\n */\nexport function clearChildren(element: HTMLElement): void {\n  while (element.firstChild) {\n    element.removeChild(element.firstChild);\n  }\n}\n\n", "/**\n * Debug Dashboard\n */\n\nimport { getElementById, querySelector, clearChildren, setHTML } from '../lib/ui/dom';\n\n// Type definitions\ninterface DebugSummary {\n  success: boolean;\n  summary: {\n    totalLogs: number;\n    logs: LogEntry[];\n    performance: PerformanceData;\n    initializationStats: InitializationStats;\n    mv3LifecycleStats?: Mv3LifecycleStats;\n    errors: ErrorData;\n    config: DebugConfig;\n    websocketState: WebSocketState;\n  };\n}\n\ninterface LogEntry {\n  timestamp: string;\n  category: string;\n  level: 'DEBUG' | 'INFO' | 'WARN' | 'ERROR';\n  message: string;\n  data?: unknown;\n  error?: {\n    name: string;\n    message: string;\n    stack?: string;\n  };\n}\n\ninterface PerformanceData {\n  websocket?: {\n    connectionAttempts: number;\n    successfulConnections: number;\n    messagesReceived: number;\n    reconnectionAttempts: number;\n    lastConnectionTime?: number;\n  };\n  qualityMetrics?: {\n    averageLatency?: number;\n    minLatency?: number;\n    maxLatency?: number;\n    connectionUptime: number;\n    currentUptime: number;\n    disconnectionCount: number;\n    healthChecksPassed: number;\n    healthChecksFailed: number;\n    consecutiveFailures: number;\n  };\n  notifications?: {\n    pushesReceived: number;\n    notificationsCreated: number;\n    notificationsFailed: number;\n    averageProcessingTime?: number;\n  };\n}\n\ninterface InitializationStats {\n  stats: {\n    total: number;\n    onInstalled: number;\n    onStartup: number;\n    serviceWorkerWakeup: number;\n    unknown: number;\n    lastInitialization?: number;\n    recentInitializations?: Array<{\n      source: string;\n      timestamp: number;\n    }>;\n  };\n}\n\ninterface Mv3LifecycleStats {\n  restarts: number;\n  wakeUpTriggers: {\n    onInstalled?: number;\n    onStartup?: number;\n    onAlarm?: number;\n    onMessage?: number;\n  };\n  avgRecoveryTime: string;\n}\n\ninterface ErrorData {\n  total: number;\n  critical: number;\n  last24h: number;\n  lastHour: number;\n  topErrors?: Array<{\n    error: string;\n    count: number;\n  }>;\n  recentCritical?: Array<{\n    name: string;\n    message: string;\n    category: string;\n    timestamp: number;\n    stack?: string;\n  }>;\n}\n\ninterface DebugConfig {\n  enabled: boolean;\n  [key: string]: unknown;\n}\n\ninterface WebSocketState {\n  current: {\n    stateText: string;\n    readyState?: string;\n    stateMachineState?: string;\n    stateMachineDescription?: string;\n  };\n  lastCheck?: string;\n  historyLength?: number;\n  [key: string]: unknown;\n}\n\n// DOM Elements\nconst refreshBtn = getElementById<HTMLButtonElement>('refresh-btn');\nconst exportJsonBtn = getElementById<HTMLButtonElement>('export-json-btn');\nconst exportTextBtn = getElementById<HTMLButtonElement>('export-text-btn');\nconst clearLogsBtn = getElementById<HTMLButtonElement>('clear-logs-btn');\nconst closeBtn = getElementById<HTMLButtonElement>('close-btn');\nconst autoRefreshToggle = getElementById<HTMLInputElement>('auto-refresh-toggle');\nconst debugToggle = getElementById<HTMLInputElement>('debug-toggle');\nconst debugStatusText = getElementById<HTMLSpanElement>('debug-status-text');\nconst lastUpdatedSpan = getElementById<HTMLSpanElement>('last-updated');\n\n// Summary elements\nconst debugStatusEl = getElementById<HTMLDivElement>('debug-status');\nconst totalLogsEl = getElementById<HTMLSpanElement>('total-logs');\nconst errorCountEl = getElementById<HTMLSpanElement>('error-count');\nconst websocketStatusEl = getElementById<HTMLSpanElement>('websocket-status'); // Now displays state machine status\n\n// Tab elements\nconst tabBtns = document.querySelectorAll<HTMLButtonElement>('.tab-btn');\nconst tabPanes = document.querySelectorAll<HTMLDivElement>('.tab-pane');\n\n// Logs tab elements\nconst logCategoryFilter = getElementById<HTMLSelectElement>('log-category-filter');\nconst logLevelFilter = getElementById<HTMLSelectElement>('log-level-filter');\nconst logCountSelect = getElementById<HTMLSelectElement>('log-count-select');\nconst logsContainer = getElementById<HTMLDivElement>('logs-container');\n\n// Performance tab elements\nconst websocketMetricsEl = getElementById<HTMLDivElement>('websocket-metrics');\nconst qualityMetricsEl = getElementById<HTMLDivElement>('quality-metrics');\nconst notificationMetricsEl = getElementById<HTMLDivElement>('notification-metrics');\nconst initializationStatsEl = getElementById<HTMLDivElement>('initialization-stats');\nconst mv3LifecycleMetricsEl = getElementById<HTMLDivElement>('mv3-lifecycle-metrics');\n\n// Errors tab elements\nconst errorSummaryEl = getElementById<HTMLDivElement>('error-summary');\nconst criticalErrorsEl = getElementById<HTMLDivElement>('critical-errors');\n\n// Config tab elements\nconst debugConfigEl = getElementById<HTMLDivElement>('debug-config');\nconst systemInfoEl = getElementById<HTMLDivElement>('system-info');\n\n// State\nlet autoRefreshInterval: number | null = null;\nlet currentData: DebugSummary['summary'] | null = null;\n\n/**\n * Set up event listeners\n */\nfunction setupEventListeners(): void {\n  // Refresh button\n  refreshBtn.addEventListener('click', () => {\n    loadDashboardData();\n  });\n\n  // Export buttons\n  exportJsonBtn.addEventListener('click', () => {\n    exportData('json');\n  });\n\n  exportTextBtn.addEventListener('click', () => {\n    exportData('text');\n  });\n\n  // Clear logs button\n  clearLogsBtn.addEventListener('click', () => {\n    if (confirm('Are you sure you want to permanently delete all logs?')) {\n      chrome.runtime.sendMessage({ action: 'clearAllLogs' }, (response) => {\n        if (response && response.success) {\n          // Refresh the dashboard to show the empty logs\n          loadDashboardData();\n        } else {\n          showError('Failed to clear logs.');\n        }\n      });\n    }\n  });\n\n  // Debug toggle switch\n  debugToggle.addEventListener('change', () => {\n    const enabled = debugToggle.checked;\n    debugStatusText.textContent = enabled ? 'Enabled' : 'Disabled';\n\n    // Send message to background to update debug config\n    chrome.runtime.sendMessage({\n      action: 'updateDebugConfig',\n      config: { enabled }\n    }, (response) => {\n      if (response && response.success) {\n        // Refresh dashboard to reflect new config\n        loadDashboardData();\n      } else {\n        showError('Failed to update debug config.');\n        // Revert toggle on failure\n        debugToggle.checked = !enabled;\n        debugStatusText.textContent = !enabled ? 'Enabled' : 'Disabled';\n      }\n    });\n  });\n\n  // Close button\n  closeBtn.addEventListener('click', () => {\n    window.close();\n  });\n\n  // Auto-refresh toggle\n  autoRefreshToggle.addEventListener('change', () => {\n    if (autoRefreshToggle.checked) {\n      startAutoRefresh();\n    } else {\n      stopAutoRefresh();\n    }\n  });\n\n  // Tab buttons\n  tabBtns.forEach(btn => {\n    btn.addEventListener('click', () => {\n      const tabName = btn.dataset.tab;\n      if (tabName) {\n        switchTab(tabName);\n      }\n    });\n  });\n\n  // Log filters\n  logCategoryFilter.addEventListener('change', () => {\n    renderLogs();\n  });\n\n  logLevelFilter.addEventListener('change', () => {\n    renderLogs();\n  });\n\n  logCountSelect.addEventListener('change', () => {\n    loadDashboardData();\n  });\n}\n\n/**\n * Switch tabs\n */\nfunction switchTab(tabName: string): void {\n  // Update tab buttons\n  tabBtns.forEach(btn => {\n    if (btn.dataset.tab === tabName) {\n      btn.classList.add('active');\n    } else {\n      btn.classList.remove('active');\n    }\n  });\n\n  // Update tab panes\n  tabPanes.forEach(pane => {\n    if (pane.id === `${tabName}-tab`) {\n      pane.classList.add('active');\n    } else {\n      pane.classList.remove('active');\n    }\n  });\n}\n\n/**\n * Load dashboard data\n */\nasync function loadDashboardData(): Promise<void> {\n  try {\n    // Get debug summary from background script\n    const response = await chrome.runtime.sendMessage({\n      action: 'getDebugSummary'\n    }) as DebugSummary;\n\n    if (response && response.success) {\n      currentData = response.summary;\n      updateDashboard(currentData);\n      updateLastUpdated();\n    } else {\n      console.error('Failed to load debug data');\n      showError('Failed to load debug data');\n    }\n  } catch (error) {\n    console.error('Error loading dashboard data:', error);\n    showError('Error loading dashboard data: ' + (error as Error).message);\n  }\n}\n\n/**\n * Update dashboard with data\n */\nfunction updateDashboard(data: DebugSummary['summary']): void {\n  updateSummary(data);\n  renderLogs();\n  renderPerformanceMetrics(data.performance);\n  renderInitializationStats(data.initializationStats);\n  renderMv3LifecycleMetrics(data.mv3LifecycleStats);\n  renderErrors(data.errors);\n  renderConfig(data.config, data.websocketState);\n}\n\n/**\n * Update summary cards\n */\nfunction updateSummary(data: DebugSummary['summary']): void {\n  // Debug status - update toggle switch and text\n  if (data.config && data.config.enabled) {\n    debugToggle.checked = true;\n    debugStatusText.textContent = 'Enabled';\n  } else {\n    debugToggle.checked = false;\n    debugStatusText.textContent = 'Disabled';\n  }\n\n  // Total logs\n  if (data.totalLogs !== undefined) {\n    totalLogsEl.textContent = data.totalLogs.toString();\n  } else if (data.logs && data.logs.length) {\n    totalLogsEl.textContent = data.logs.length.toString();\n  } else {\n    totalLogsEl.textContent = '0';\n  }\n\n  // Error count\n  if (data.errors && data.errors.last24h !== undefined) {\n    errorCountEl.textContent = data.errors.last24h.toString();\n  } else {\n    errorCountEl.textContent = '0';\n  }\n\n  // State Machine status (replaces generic websocket status)\n  if (data.websocketState && data.websocketState.current) {\n    const stateMachineState = data.websocketState.current.stateMachineState || 'unknown';\n    const stateDescription = data.websocketState.current.stateMachineDescription || data.websocketState.current.stateText || 'Unknown';\n    websocketStatusEl.textContent = stateDescription;\n    websocketStatusEl.title = `State: ${stateMachineState}`;\n  } else {\n    websocketStatusEl.textContent = 'Unknown';\n  }\n}\n\n/**\n * Render logs\n */\nfunction renderLogs(): void {\n  if (!currentData || !currentData.logs) {\n    logsContainer.innerHTML = '<p class=\"loading\">No logs available</p>';\n    return;\n  }\n\n  // Apply filters\n  const categoryFilter = logCategoryFilter.value;\n  const levelFilter = logLevelFilter.value;\n\n  let filteredLogs = currentData.logs;\n\n  if (categoryFilter) {\n    filteredLogs = filteredLogs.filter(log => log.category === categoryFilter);\n  }\n\n  if (levelFilter) {\n    filteredLogs = filteredLogs.filter(log => log.level === levelFilter);\n  }\n\n  // Render logs\n  if (filteredLogs.length === 0) {\n    logsContainer.innerHTML = '<p class=\"loading\">No logs match the current filters</p>';\n    return;\n  }\n\n  // By creating a copy with [...filteredLogs] and then reversing it,\n  // we ensure the newest logs are processed first without changing the original data.\n  logsContainer.innerHTML = [...filteredLogs].reverse().map(log => {\n    const dataStr = log.data ? JSON.stringify(log.data, null, 2) : '';\n    const errorStr = log.error ? `${log.error.name}: ${log.error.message}` : '';\n\n    return `\n      <div class=\"log-entry ${log.level}\">\n        <div class=\"log-header\">\n          <span class=\"log-category\">[${log.category}]</span>\n          <span class=\"log-level ${log.level}\">${log.level}</span>\n        </div>\n        <div class=\"log-timestamp\">${log.timestamp}</div>\n        <div class=\"log-message\">${log.message}</div>\n        ${dataStr ? `<div class=\"log-data\">${dataStr}</div>` : ''}\n        ${errorStr ? `<div class=\"log-data error\">${errorStr}</div>` : ''}\n      </div>\n    `;\n  }).join('');\n}\n\n/**\n * Format duration in ms to human readable\n */\nfunction formatDuration(ms: number): string {\n  if (!ms || ms === 0) return '0s';\n  const seconds = Math.floor(ms / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n\n  if (hours > 0) {\n    return `${hours}h ${minutes % 60}m`;\n  } else if (minutes > 0) {\n    return `${minutes}m ${seconds % 60}s`;\n  } else {\n    return `${seconds}s`;\n  }\n}\n\n/**\n * Render performance metrics\n */\nfunction renderPerformanceMetrics(performance: PerformanceData | undefined): void {\n  if (!performance) {\n    websocketMetricsEl.innerHTML = '<p class=\"loading\">No data available</p>';\n    qualityMetricsEl.innerHTML = '<p class=\"loading\">No data available</p>';\n    notificationMetricsEl.innerHTML = '<p class=\"loading\">No data available</p>';\n    return;\n  }\n\n  // WebSocket metrics\n  if (performance.websocket) {\n    const ws = performance.websocket;\n    websocketMetricsEl.innerHTML = `\n      <p><strong>Connection Attempts:</strong> <span>${ws.connectionAttempts || 0}</span></p>\n      <p><strong>Successful Connections:</strong> <span>${ws.successfulConnections || 0}</span></p>\n      <p><strong>Messages Received:</strong> <span>${ws.messagesReceived || 0}</span></p>\n      <p><strong>Reconnection Attempts:</strong> <span>${ws.reconnectionAttempts || 0}</span></p>\n      <p><strong>Last Connection:</strong> <span>${ws.lastConnectionTime ? new Date(ws.lastConnectionTime).toLocaleString() : 'Never'}</span></p>\n    `;\n  } else {\n    websocketMetricsEl.innerHTML = '<p class=\"loading\">No websocket data available</p>';\n  }\n\n  // Connection quality metrics\n  if (performance.qualityMetrics) {\n    const quality = performance.qualityMetrics;\n    qualityMetricsEl.innerHTML = `\n      <p><strong>Average Latency:</strong> <span>${quality.averageLatency ? quality.averageLatency.toFixed(0) + 'ms' : 'N/A'}</span></p>\n      <p><strong>Min/Max Latency:</strong> <span>${quality.minLatency ? quality.minLatency.toFixed(0) : 'N/A'} / ${quality.maxLatency ? quality.maxLatency.toFixed(0) : 'N/A'} ms</span></p>\n      <p><strong>Total Uptime:</strong> <span>${formatDuration(quality.connectionUptime)}</span></p>\n      <p><strong>Current Uptime:</strong> <span>${formatDuration(quality.currentUptime)}</span></p>\n      <p><strong>Disconnections:</strong> <span>${quality.disconnectionCount || 0}</span></p>\n      <p><strong>Health Checks:</strong> <span class=\"success\">${quality.healthChecksPassed || 0} passed</span> / <span class=\"error\">${quality.healthChecksFailed || 0} failed</span></p>\n      <p><strong>Consecutive Failures:</strong> <span class=\"${quality.consecutiveFailures > 3 ? 'error' : ''}\">${quality.consecutiveFailures || 0}</span></p>\n    `;\n  } else {\n    qualityMetricsEl.innerHTML = '<p class=\"loading\">No quality metrics available</p>';\n  }\n\n  // Notification metrics\n  if (performance.notifications) {\n    const notif = performance.notifications;\n    notificationMetricsEl.innerHTML = `\n      <p><strong>Pushes Received:</strong> <span>${notif.pushesReceived || 0}</span></p>\n      <p><strong>Notifications Created:</strong> <span>${notif.notificationsCreated || 0}</span></p>\n      <p><strong>Notifications Failed:</strong> <span>${notif.notificationsFailed || 0}</span></p>\n      <p><strong>Avg Processing Time:</strong> <span>${notif.averageProcessingTime ? notif.averageProcessingTime.toFixed(2) + 'ms' : 'N/A'}</span></p>\n    `;\n  } else {\n    notificationMetricsEl.innerHTML = '<p class=\"loading\">No notification metrics available</p>';\n  }\n}\n\n/**\n * Render initialization statistics\n */\nfunction renderInitializationStats(initStats: InitializationStats | undefined): void {\n  if (!initStats || !initStats.stats) {\n    initializationStatsEl.innerHTML = '<p class=\"loading\">No data available</p>';\n    return;\n  }\n\n  const stats = initStats.stats;\n  initializationStatsEl.innerHTML = `\n    <p><strong>Total Initializations:</strong> <span>${stats.total || 0}</span></p>\n    <p><strong>On Install/Update:</strong> <span>${stats.onInstalled || 0}</span></p>\n    <p><strong>On Browser Startup:</strong> <span>${stats.onStartup || 0}</span></p>\n    <p><strong>Service Worker Wakeup:</strong> <span>${stats.serviceWorkerWakeup || 0}</span></p>\n    <p><strong>Unknown Source:</strong> <span>${stats.unknown || 0}</span></p>\n    <p><strong>Last Initialization:</strong> <span>${stats.lastInitialization ? new Date(stats.lastInitialization).toLocaleString() : 'Never'}</span></p>\n  `;\n\n  // Show recent initializations\n  if (stats.recentInitializations && stats.recentInitializations.length > 0) {\n    const recentHtml = stats.recentInitializations.map(init =>\n      `<p style=\"font-size: 12px; margin: 5px 0;\"><strong>${init.source}:</strong> ${new Date(init.timestamp).toLocaleTimeString()}</p>`\n    ).join('');\n    initializationStatsEl.innerHTML += '<hr style=\"margin: 10px 0; border-color: #444;\"><p style=\"font-size: 11px; color: #888; margin-bottom: 5px;\">Recent (last 10):</p>' + recentHtml;\n  }\n}\n\n/**\n * Render MV3 lifecycle metrics\n */\nfunction renderMv3LifecycleMetrics(stats: Mv3LifecycleStats | undefined): void {\n  if (!stats) {\n    mv3LifecycleMetricsEl.innerHTML = '<p class=\"loading\">No MV3 stats available</p>';\n    return;\n  }\n\n  mv3LifecycleMetricsEl.innerHTML = `\n    <p><strong>Service Worker Restarts:</strong> <span>${stats.restarts || 0}</span></p>\n    <p><strong>Avg. Recovery Time:</strong> <span>${stats.avgRecoveryTime || 'N/A'}</span></p>\n    <hr style=\"margin: 10px 0; border-color: #444;\">\n    <p style=\"font-size: 11px; color: #888; margin-bottom: 5px;\">Wake-up Triggers:</p>\n    <p><strong>On Startup/Install:</strong> <span>${(stats.wakeUpTriggers.onInstalled || 0) + (stats.wakeUpTriggers.onStartup || 0)}</span></p>\n    <p><strong>By Alarm:</strong> <span>${stats.wakeUpTriggers.onAlarm || 0}</span></p>\n    <p><strong>By User Action:</strong> <span>${stats.wakeUpTriggers.onMessage || 0}</span></p>\n  `;\n}\n\n/**\n * Render errors\n */\nfunction renderErrors(errors: ErrorData | undefined): void {\n  if (!errors) {\n    errorSummaryEl.innerHTML = '<p class=\"loading\">No data available</p>';\n    criticalErrorsEl.innerHTML = '<p class=\"loading\">No data available</p>';\n    return;\n  }\n\n  // Error summary\n  errorSummaryEl.innerHTML = `\n    <p><strong>Total Errors:</strong> <span>${errors.total || 0}</span></p>\n    <p><strong>Critical Errors:</strong> <span>${errors.critical || 0}</span></p>\n    <p><strong>Last 24 Hours:</strong> <span>${errors.last24h || 0}</span></p>\n    <p><strong>Last Hour:</strong> <span>${errors.lastHour || 0}</span></p>\n  `;\n\n  // Top errors\n  if (errors.topErrors && errors.topErrors.length > 0) {\n    const topErrorsHtml = errors.topErrors.map(err =>\n      `<p><strong>${err.error}:</strong> <span>${err.count} occurrences</span></p>`\n    ).join('');\n    errorSummaryEl.innerHTML += '<hr style=\"margin: 15px 0; border-color: #444;\">' + topErrorsHtml;\n  }\n\n  // Critical errors\n  if (errors.recentCritical && errors.recentCritical.length > 0) {\n    criticalErrorsEl.innerHTML = errors.recentCritical.map(err => `\n      <div class=\"error-item\">\n        <h5>${err.name || 'Error'}: ${err.message}</h5>\n        <p><strong>Category:</strong> ${err.category}</p>\n        <p><strong>Time:</strong> ${new Date(err.timestamp).toLocaleString()}</p>\n        ${err.stack ? `<pre>${err.stack}</pre>` : ''}\n      </div>\n    `).join('');\n  } else {\n    criticalErrorsEl.innerHTML = '<p class=\"loading\">No critical errors</p>';\n  }\n}\n\n/**\n * Render configuration\n */\nfunction renderConfig(config: DebugConfig | undefined, websocketState: WebSocketState | undefined): void {\n  if (!config) {\n    debugConfigEl.innerHTML = '<p class=\"loading\">No data available</p>';\n    return;\n  }\n\n  debugConfigEl.innerHTML = `<pre>${JSON.stringify(config, null, 2)}</pre>`;\n\n  // System info\n  if (websocketState) {\n    systemInfoEl.innerHTML = `<pre>${JSON.stringify(websocketState, null, 2)}</pre>`;\n  } else {\n    systemInfoEl.innerHTML = '<p class=\"loading\">No data available</p>';\n  }\n}\n\n/**\n * Export data\n */\nasync function exportData(format: 'json' | 'text'): Promise<void> {\n  try {\n    // Get full debug data from background\n    const response = await chrome.runtime.sendMessage({\n      action: 'exportDebugData'\n    }) as { success: boolean; data?: unknown };\n\n    if (!response || !response.success) {\n      showError('Failed to export debug data');\n      return;\n    }\n\n    const data = response.data;\n    let content: string;\n    let filename: string;\n    let mimeType: string;\n\n    if (format === 'json') {\n      content = JSON.stringify(data, null, 2);\n      filename = `pushbullet-debug-${Date.now()}.json`;\n      mimeType = 'application/json';\n    } else {\n      // Text format\n      content = formatDebugDataAsText(data as Record<string, unknown>);\n      filename = `pushbullet-debug-${Date.now()}.txt`;\n      mimeType = 'text/plain';\n    }\n\n    // Create download\n    const blob = new Blob([content], { type: mimeType });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n\n    console.log('Debug data exported:', filename);\n  } catch (error) {\n    console.error('Error exporting data:', error);\n    showError('Error exporting data: ' + (error as Error).message);\n  }\n}\n\n/**\n * Format debug data as text\n */\nfunction formatDebugDataAsText(data: Record<string, unknown>): string {\n  let text = '='.repeat(80) + '\\n';\n  text += 'PUSHBULLET DEBUG REPORT\\n';\n  text += '='.repeat(80) + '\\n\\n';\n  text += `Generated: ${(data.timestamp as string) || new Date().toISOString()}\\n`;\n  text += `Version: ${(data.version as string) || 'Unknown'}\\n\\n`;\n\n  // Debug configuration\n  text += '-'.repeat(80) + '\\n';\n  text += 'DEBUG CONFIGURATION\\n';\n  text += '-'.repeat(80) + '\\n';\n  const debugLogs = data.debugLogs as Record<string, unknown>;\n  text += JSON.stringify(debugLogs?.config, null, 2) + '\\n\\n';\n\n  // System info\n  text += '-'.repeat(80) + '\\n';\n  text += 'SYSTEM INFORMATION\\n';\n  text += '-'.repeat(80) + '\\n';\n  text += JSON.stringify(data.systemInfo, null, 2) + '\\n\\n';\n\n  // Error summary\n  text += '-'.repeat(80) + '\\n';\n  text += 'ERROR SUMMARY\\n';\n  text += '-'.repeat(80) + '\\n';\n  const errorData = data.errorData as Record<string, unknown>;\n  text += JSON.stringify(errorData?.summary, null, 2) + '\\n\\n';\n\n  // Performance summary\n  text += '-'.repeat(80) + '\\n';\n  text += 'PERFORMANCE METRICS\\n';\n  text += '-'.repeat(80) + '\\n';\n  const performanceData = data.performanceData as Record<string, unknown>;\n  text += JSON.stringify(performanceData?.summary, null, 2) + '\\n\\n';\n\n  // Recent logs\n  text += '-'.repeat(80) + '\\n';\n  text += 'RECENT LOGS (Last 50)\\n';\n  text += '-'.repeat(80) + '\\n';\n  const logs = (debugLogs?.logs as LogEntry[]) || [];\n  const recentLogs = logs.slice(-50);\n  recentLogs.forEach(log => {\n    text += `[${log.timestamp}] [${log.category}:${log.level}] ${log.message}\\n`;\n    if (log.data) {\n      text += `  Data: ${JSON.stringify(log.data)}\\n`;\n    }\n    if (log.error) {\n      text += `  Error: ${log.error.message}\\n`;\n    }\n    text += '\\n';\n  });\n\n  return text;\n}\n\n/**\n * Auto-refresh functions\n */\nfunction startAutoRefresh(): void {\n  if (autoRefreshInterval) {\n    clearInterval(autoRefreshInterval);\n  }\n  autoRefreshInterval = window.setInterval(() => {\n    loadDashboardData();\n  }, 2000); // Refresh every 2 seconds\n}\n\nfunction stopAutoRefresh(): void {\n  if (autoRefreshInterval) {\n    clearInterval(autoRefreshInterval);\n    autoRefreshInterval = null;\n  }\n}\n\n/**\n * Update last updated timestamp\n */\nfunction updateLastUpdated(): void {\n  lastUpdatedSpan.textContent = new Date().toLocaleTimeString();\n}\n\n/**\n * Show error message\n */\nfunction showError(message: string): void {\n  console.error(message);\n  // Could add a toast notification here\n}\n\n/**\n * Initialize dashboard\n */\nfunction init(): void {\n  console.log('Debug Dashboard loaded');\n\n  // Set up event listeners\n  setupEventListeners();\n\n  // Load initial data\n  loadDashboardData();\n\n  // Start auto-refresh if enabled\n  if (autoRefreshToggle.checked) {\n    startAutoRefresh();\n  }\n}\n\n// Initialize on DOM load\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', init);\n} else {\n  init();\n}\n\n"],
  "mappings": "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",
  "names": ["init"]
}
