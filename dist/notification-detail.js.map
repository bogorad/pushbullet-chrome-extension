{
  "version": 3,
  "sources": ["../src/lib/ui/dom.ts", "../src/notification-detail/index.ts"],
  "sourcesContent": ["/**\n * DOM manipulation utilities for UI pages\n */\n\n/**\n * Safely get an element by ID with type checking\n */\nexport function getElementById<T extends HTMLElement>(id: string): T {\n  const element = document.getElementById(id);\n  if (!element) {\n    throw new Error(`Element with id \"${id}\" not found`);\n  }\n  return element as T;\n}\n\n/**\n * Safely query selector with type checking\n */\nexport function querySelector<T extends Element>(selector: string): T {\n  const element = document.querySelector(selector);\n  if (!element) {\n    throw new Error(`Element with selector \"${selector}\" not found`);\n  }\n  return element as T;\n}\n\n/**\n * Show an element\n */\nexport function show(element: HTMLElement): void {\n  element.style.display = '';\n}\n\n/**\n * Hide an element\n */\nexport function hide(element: HTMLElement): void {\n  element.style.display = 'none';\n}\n\n/**\n * Toggle element visibility\n */\nexport function toggle(element: HTMLElement): void {\n  if (element.style.display === 'none') {\n    show(element);\n  } else {\n    hide(element);\n  }\n}\n\n/**\n * Set text content safely\n */\nexport function setText(element: HTMLElement, text: string): void {\n  element.textContent = text;\n}\n\n/**\n * Set HTML content safely (sanitized)\n */\nexport function setHTML(element: HTMLElement, html: string): void {\n  // Basic sanitization - remove script tags\n  const sanitized = html.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '');\n  element.innerHTML = sanitized;\n}\n\n/**\n * Add event listener with type safety\n */\nexport function on<K extends keyof HTMLElementEventMap>(\n  element: HTMLElement,\n  event: K,\n  handler: (this: HTMLElement, ev: HTMLElementEventMap[K]) => void\n): void {\n  element.addEventListener(event, handler);\n}\n\n/**\n * Format timestamp for display\n */\nexport function formatTimestamp(date: Date): string {\n  const now = new Date();\n  const diff = now.getTime() - date.getTime();\n  const seconds = Math.floor(diff / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  if (seconds < 60) {\n    return 'just now';\n  } else if (minutes < 60) {\n    return `${minutes}m ago`;\n  } else if (hours < 24) {\n    return `${hours}h ago`;\n  } else if (days < 7) {\n    return `${days}d ago`;\n  } else {\n    return date.toLocaleDateString();\n  }\n}\n\n/**\n * Show status message\n */\nexport function showStatus(element: HTMLElement, message: string, type: 'success' | 'error' | 'info' = 'info'): void {\n  element.textContent = message;\n  element.className = `status-message status-${type}`;\n  show(element);\n  \n  // Auto-hide after 3 seconds\n  setTimeout(() => {\n    hide(element);\n  }, 3000);\n}\n\n/**\n * Clear all children of an element\n */\nexport function clearChildren(element: HTMLElement): void {\n  while (element.firstChild) {\n    element.removeChild(element.firstChild);\n  }\n}\n\n", "/**\n * Notification detail page\n */\n\nimport type { Push } from '../types/domain';\nimport { MessageAction } from '../types/domain';\nimport { getElementById, querySelector, setText } from '../lib/ui/dom';\n\nlet pushData: Push | null = null;\n\n/**\n * Get notification ID from URL\n */\nfunction getNotificationId(): string | null {\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get('id');\n}\n\n/**\n * Load notification data from background\n */\nfunction loadNotification(): void {\n  const notificationId = getNotificationId();\n  \n  if (!notificationId) {\n    const messageEl = getElementById<HTMLDivElement>('message');\n    setText(messageEl, 'No notification ID provided');\n    return;\n  }\n\n  // Request notification data from background\n  chrome.runtime.sendMessage({\n    action: MessageAction.GET_NOTIFICATION_DATA,\n    notificationId: notificationId\n  }, (response: { success: boolean; push?: Push; error?: string }) => {\n    if (response && response.push) {\n      pushData = response.push;\n      displayNotification(pushData);\n    } else {\n      const messageEl = getElementById<HTMLDivElement>('message');\n      setText(messageEl, 'Notification not found');\n    }\n  });\n}\n\n/**\n * Check if URL is from a trusted image domain\n */\nfunction isTrustedImageUrl(urlString: string): boolean {\n  if (!urlString) return false;\n  \n  try {\n    const url = new URL(urlString);\n        return url.hostname.endsWith('.pushbullet.com') || \n               /^lh[0-9]\\.googleusercontent\\.com$/.test(url.hostname);  } catch {\n    return false;\n  }\n}\n\n/**\n * Download file from URL\n */\nfunction downloadFile(fileUrl: string, fileName?: string): void {\n  // Create a temporary anchor element to trigger download\n  const link = document.createElement('a');\n  link.href = fileUrl;\n  link.download = fileName || 'download';\n  link.target = '_blank';\n  link.rel = 'noopener noreferrer';\n  \n  // Trigger download\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  \n  // Show feedback\n  const feedback = getElementById<HTMLDivElement>('copy-feedback');\n  setText(feedback, '\u2713 Download started!');\n  feedback.classList.add('show');\n  setTimeout(() => {\n    feedback.classList.remove('show');\n  }, 2000);\n}\n\n/**\n * Display notification data\n */\nfunction displayNotification(push: Push): void {\n  const titleEl = getElementById<HTMLHeadingElement>('title');\n  const messageEl = getElementById<HTMLDivElement>('message');\n  const typeBadgeEl = getElementById<HTMLSpanElement>('type-badge');\n  const timestampEl = getElementById<HTMLSpanElement>('timestamp');\n  const sourceEl = getElementById<HTMLSpanElement>('source');\n  const fileInfoEl = getElementById<HTMLDivElement>('file-info');\n  const fileNameEl = getElementById<HTMLDivElement>('file-name');\n  const fileTypeEl = getElementById<HTMLDivElement>('file-type');\n  const imagePreviewEl = getElementById<HTMLDivElement>('image-preview');\n  const previewImageEl = getElementById<HTMLImageElement>('preview-image');\n  const downloadBtn = getElementById<HTMLButtonElement>('download-btn');\n  const copyBtn = getElementById<HTMLButtonElement>('copy-btn');\n\n  // Extract title and message based on push type\n  let title = 'Push';\n  let message = '';\n  let type = push.type ?? 'unknown';\n\n  // Hide all optional elements initially\n  fileInfoEl.style.display = 'none';\n  imagePreviewEl.style.display = 'none';\n  downloadBtn.style.display = 'none';\n\n  if (push.type === 'note') {\n    title = push.title ?? 'Note';\n    message = push.body ?? '';\n  } else if (push.type === 'link') {\n    title = push.title ?? 'Link';\n    message = push.url ?? '';\n  } else if (push.type === 'file') {\n    const filePush = push as any;\n    title = filePush.file_name || 'File';\n    message = filePush.body || filePush.file_url || '';\n    \n    // Show file info\n    if (filePush.file_name) {\n      setText(fileNameEl, filePush.file_name);\n      fileInfoEl.style.display = 'block';\n    }\n    if (filePush.file_type) {\n      setText(fileTypeEl, filePush.file_type);\n    }\n    \n    // Check for image preview\n    const imageUrl = filePush.image_url || (filePush.file_type?.startsWith('image/') ? filePush.file_url : null);\n    if (imageUrl && isTrustedImageUrl(imageUrl)) {\n      previewImageEl.src = imageUrl;\n      imagePreviewEl.style.display = 'block';\n      \n      // Hide copy button for image previews to avoid confusion\n      copyBtn.style.display = 'none';\n    }\n    \n    // Show download button if we have a file URL\n    if (filePush.file_url) {\n      downloadBtn.style.display = 'inline-block';\n      downloadBtn.onclick = () => downloadFile(filePush.file_url, filePush.file_name);\n    }\n  } else if (push.type === 'mirror') {\n    title = push.title || push.application_name || 'Notification';\n    message = push.body || '';\n  } else if ((push as any).type === 'sms_changed') {\n    const smsPush = push as any;\n    if (smsPush.notifications && smsPush.notifications.length > 0) {\n      const sms = smsPush.notifications[0];\n      title = sms.title || 'SMS';\n      message = sms.body || '';\n    } else {\n      title = 'SMS';\n      message = 'New SMS received';\n    }\n    type = 'sms' as any;\n  } else {\n    title = 'Push';\n    message = JSON.stringify(push, null, 2);\n  }\n\n  setText(titleEl, title ?? 'Push');\n  setText(messageEl, message ?? '');\n  setText(typeBadgeEl, (type ?? 'unknown').toUpperCase());\n\n  // Set timestamp\n  if (push.created) {\n    const date = new Date(push.created * 1000);\n    setText(timestampEl, date.toLocaleString());\n  }\n\n  // Set source\n  if (push.source_device_iden) {\n    setText(sourceEl, 'From device');\n  } else {\n    setText(sourceEl, 'Pushbullet');\n  }\n\n  // Check for 6-digit verification code\n  detectVerificationCode(title, message);\n}\n\n/**\n * Detect 6-digit verification code\n */\nfunction detectVerificationCode(title: string, message: string): void {\n  const fullText = (title + ' ' + message).toLowerCase();\n\n  // Check if text contains \"code\" keyword\n  if (!fullText.includes('code')) {\n    return;\n  }\n\n  // Look for 6-digit number\n  const codeMatch = (title + ' ' + message).match(/\\b(\\d{6})\\b/);\n\n  if (codeMatch && codeMatch[1]) {\n    const code = codeMatch[1];\n\n    // Create code copy button\n    const actionsDiv = querySelector<HTMLDivElement>('.actions');\n    const codeBtn = document.createElement('button');\n    codeBtn.className = 'btn-code';\n    codeBtn.innerHTML = `\uD83D\uDCCB Copy Code: <strong>${code}</strong>`;\n    codeBtn.onclick = () => copyCode(code);\n\n    // Insert as first button\n    actionsDiv.insertBefore(codeBtn, actionsDiv.firstChild);\n  }\n}\n\n/**\n * Copy verification code\n */\nfunction copyCode(code: string): void {\n  navigator.clipboard.writeText(code).then(() => {\n    // Show feedback\n    const feedback = getElementById<HTMLDivElement>('copy-feedback');\n    setText(feedback, `\u2713 Code ${code} copied!`);\n    feedback.classList.add('show');\n    setTimeout(() => {\n      feedback.classList.remove('show');\n    }, 2000);\n  }).catch((err) => {\n    console.error('Failed to copy code:', err);\n    alert('Failed to copy code to clipboard');\n  });\n}\n\n/**\n * Copy text to clipboard\n */\nfunction copyToClipboard(): void {\n  const messageEl = getElementById<HTMLDivElement>('message');\n  const text = messageEl.textContent || '';\n\n  navigator.clipboard.writeText(text).then(() => {\n    // Show feedback\n    const feedback = getElementById<HTMLDivElement>('copy-feedback');\n    feedback.classList.add('show');\n    setTimeout(() => {\n      feedback.classList.remove('show');\n    }, 2000);\n  }).catch((err) => {\n    console.error('Failed to copy:', err);\n    alert('Failed to copy to clipboard');\n  });\n}\n\n/**\n * Close window\n */\nfunction closeWindow(): void {\n  window.close();\n}\n\n/**\n * Initialize page\n */\nfunction init(): void {\n  // Event listeners\n  const copyBtn = getElementById<HTMLButtonElement>('copy-btn');\n  const closeBtn = getElementById<HTMLButtonElement>('close-btn');\n  \n  copyBtn.addEventListener('click', copyToClipboard);\n  closeBtn.addEventListener('click', closeWindow);\n\n  // Load notification\n  loadNotification();\n}\n\n// Initialize on DOM load\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', init);\n} else {\n  init();\n}\n\n"],
  "mappings": ";;;AAOO,WAAS,eAAsC,IAAe;AACnE,UAAM,UAAU,SAAS,eAAe,EAAE;AAC1C,QAAI,CAAC,SAAS;AACZ,YAAM,IAAI,MAAM,oBAAoB,EAAE,aAAa;AAAA,IACrD;AACA,WAAO;AAAA,EACT;AAKO,WAAS,cAAiC,UAAqB;AACpE,UAAM,UAAU,SAAS,cAAc,QAAQ;AAC/C,QAAI,CAAC,SAAS;AACZ,YAAM,IAAI,MAAM,0BAA0B,QAAQ,aAAa;AAAA,IACjE;AACA,WAAO;AAAA,EACT;AA8BO,WAAS,QAAQ,SAAsB,MAAoB;AAChE,YAAQ,cAAc;AAAA,EACxB;;;AChDA,MAAI,WAAwB;AAK5B,WAAS,oBAAmC;AAC1C,UAAM,YAAY,IAAI,gBAAgB,OAAO,SAAS,MAAM;AAC5D,WAAO,UAAU,IAAI,IAAI;AAAA,EAC3B;AAKA,WAAS,mBAAyB;AAChC,UAAM,iBAAiB,kBAAkB;AAEzC,QAAI,CAAC,gBAAgB;AACnB,YAAM,YAAY,eAA+B,SAAS;AAC1D,cAAQ,WAAW,6BAA6B;AAChD;AAAA,IACF;AAGA,WAAO,QAAQ,YAAY;AAAA,MACzB;AAAA,MACA;AAAA,IACF,GAAG,CAAC,aAAgE;AAClE,UAAI,YAAY,SAAS,MAAM;AAC7B,mBAAW,SAAS;AACpB,4BAAoB,QAAQ;AAAA,MAC9B,OAAO;AACL,cAAM,YAAY,eAA+B,SAAS;AAC1D,gBAAQ,WAAW,wBAAwB;AAAA,MAC7C;AAAA,IACF,CAAC;AAAA,EACH;AAKA,WAAS,kBAAkB,WAA4B;AACrD,QAAI,CAAC,UAAW,QAAO;AAEvB,QAAI;AACF,YAAM,MAAM,IAAI,IAAI,SAAS;AACzB,aAAO,IAAI,SAAS,SAAS,iBAAiB,KACvC,oCAAoC,KAAK,IAAI,QAAQ;AAAA,IAAI,QAAQ;AAC5E,aAAO;AAAA,IACT;AAAA,EACF;AAKA,WAAS,aAAa,SAAiB,UAAyB;AAE9D,UAAM,OAAO,SAAS,cAAc,GAAG;AACvC,SAAK,OAAO;AACZ,SAAK,WAAW,YAAY;AAC5B,SAAK,SAAS;AACd,SAAK,MAAM;AAGX,aAAS,KAAK,YAAY,IAAI;AAC9B,SAAK,MAAM;AACX,aAAS,KAAK,YAAY,IAAI;AAG9B,UAAM,WAAW,eAA+B,eAAe;AAC/D,YAAQ,UAAU,0BAAqB;AACvC,aAAS,UAAU,IAAI,MAAM;AAC7B,eAAW,MAAM;AACf,eAAS,UAAU,OAAO,MAAM;AAAA,IAClC,GAAG,GAAI;AAAA,EACT;AAKA,WAAS,oBAAoB,MAAkB;AAC7C,UAAM,UAAU,eAAmC,OAAO;AAC1D,UAAM,YAAY,eAA+B,SAAS;AAC1D,UAAM,cAAc,eAAgC,YAAY;AAChE,UAAM,cAAc,eAAgC,WAAW;AAC/D,UAAM,WAAW,eAAgC,QAAQ;AACzD,UAAM,aAAa,eAA+B,WAAW;AAC7D,UAAM,aAAa,eAA+B,WAAW;AAC7D,UAAM,aAAa,eAA+B,WAAW;AAC7D,UAAM,iBAAiB,eAA+B,eAAe;AACrE,UAAM,iBAAiB,eAAiC,eAAe;AACvE,UAAM,cAAc,eAAkC,cAAc;AACpE,UAAM,UAAU,eAAkC,UAAU;AAG5D,QAAI,QAAQ;AACZ,QAAI,UAAU;AACd,QAAI,OAAO,KAAK,QAAQ;AAGxB,eAAW,MAAM,UAAU;AAC3B,mBAAe,MAAM,UAAU;AAC/B,gBAAY,MAAM,UAAU;AAE5B,QAAI,KAAK,SAAS,QAAQ;AACxB,cAAQ,KAAK,SAAS;AACtB,gBAAU,KAAK,QAAQ;AAAA,IACzB,WAAW,KAAK,SAAS,QAAQ;AAC/B,cAAQ,KAAK,SAAS;AACtB,gBAAU,KAAK,OAAO;AAAA,IACxB,WAAW,KAAK,SAAS,QAAQ;AAC/B,YAAM,WAAW;AACjB,cAAQ,SAAS,aAAa;AAC9B,gBAAU,SAAS,QAAQ,SAAS,YAAY;AAGhD,UAAI,SAAS,WAAW;AACtB,gBAAQ,YAAY,SAAS,SAAS;AACtC,mBAAW,MAAM,UAAU;AAAA,MAC7B;AACA,UAAI,SAAS,WAAW;AACtB,gBAAQ,YAAY,SAAS,SAAS;AAAA,MACxC;AAGA,YAAM,WAAW,SAAS,cAAc,SAAS,WAAW,WAAW,QAAQ,IAAI,SAAS,WAAW;AACvG,UAAI,YAAY,kBAAkB,QAAQ,GAAG;AAC3C,uBAAe,MAAM;AACrB,uBAAe,MAAM,UAAU;AAG/B,gBAAQ,MAAM,UAAU;AAAA,MAC1B;AAGA,UAAI,SAAS,UAAU;AACrB,oBAAY,MAAM,UAAU;AAC5B,oBAAY,UAAU,MAAM,aAAa,SAAS,UAAU,SAAS,SAAS;AAAA,MAChF;AAAA,IACF,WAAW,KAAK,SAAS,UAAU;AACjC,cAAQ,KAAK,SAAS,KAAK,oBAAoB;AAC/C,gBAAU,KAAK,QAAQ;AAAA,IACzB,WAAY,KAAa,SAAS,eAAe;AAC/C,YAAM,UAAU;AAChB,UAAI,QAAQ,iBAAiB,QAAQ,cAAc,SAAS,GAAG;AAC7D,cAAM,MAAM,QAAQ,cAAc,CAAC;AACnC,gBAAQ,IAAI,SAAS;AACrB,kBAAU,IAAI,QAAQ;AAAA,MACxB,OAAO;AACL,gBAAQ;AACR,kBAAU;AAAA,MACZ;AACA,aAAO;AAAA,IACT,OAAO;AACL,cAAQ;AACR,gBAAU,KAAK,UAAU,MAAM,MAAM,CAAC;AAAA,IACxC;AAEA,YAAQ,SAAS,SAAS,MAAM;AAChC,YAAQ,WAAW,WAAW,EAAE;AAChC,YAAQ,cAAc,QAAQ,WAAW,YAAY,CAAC;AAGtD,QAAI,KAAK,SAAS;AAChB,YAAM,OAAO,IAAI,KAAK,KAAK,UAAU,GAAI;AACzC,cAAQ,aAAa,KAAK,eAAe,CAAC;AAAA,IAC5C;AAGA,QAAI,KAAK,oBAAoB;AAC3B,cAAQ,UAAU,aAAa;AAAA,IACjC,OAAO;AACL,cAAQ,UAAU,YAAY;AAAA,IAChC;AAGA,2BAAuB,OAAO,OAAO;AAAA,EACvC;AAKA,WAAS,uBAAuB,OAAe,SAAuB;AACpE,UAAM,YAAY,QAAQ,MAAM,SAAS,YAAY;AAGrD,QAAI,CAAC,SAAS,SAAS,MAAM,GAAG;AAC9B;AAAA,IACF;AAGA,UAAM,aAAa,QAAQ,MAAM,SAAS,MAAM,aAAa;AAE7D,QAAI,aAAa,UAAU,CAAC,GAAG;AAC7B,YAAM,OAAO,UAAU,CAAC;AAGxB,YAAM,aAAa,cAA8B,UAAU;AAC3D,YAAM,UAAU,SAAS,cAAc,QAAQ;AAC/C,cAAQ,YAAY;AACpB,cAAQ,YAAY,gCAAyB,IAAI;AACjD,cAAQ,UAAU,MAAM,SAAS,IAAI;AAGrC,iBAAW,aAAa,SAAS,WAAW,UAAU;AAAA,IACxD;AAAA,EACF;AAKA,WAAS,SAAS,MAAoB;AACpC,cAAU,UAAU,UAAU,IAAI,EAAE,KAAK,MAAM;AAE7C,YAAM,WAAW,eAA+B,eAAe;AAC/D,cAAQ,UAAU,eAAU,IAAI,UAAU;AAC1C,eAAS,UAAU,IAAI,MAAM;AAC7B,iBAAW,MAAM;AACf,iBAAS,UAAU,OAAO,MAAM;AAAA,MAClC,GAAG,GAAI;AAAA,IACT,CAAC,EAAE,MAAM,CAAC,QAAQ;AAChB,cAAQ,MAAM,wBAAwB,GAAG;AACzC,YAAM,kCAAkC;AAAA,IAC1C,CAAC;AAAA,EACH;AAKA,WAAS,kBAAwB;AAC/B,UAAM,YAAY,eAA+B,SAAS;AAC1D,UAAM,OAAO,UAAU,eAAe;AAEtC,cAAU,UAAU,UAAU,IAAI,EAAE,KAAK,MAAM;AAE7C,YAAM,WAAW,eAA+B,eAAe;AAC/D,eAAS,UAAU,IAAI,MAAM;AAC7B,iBAAW,MAAM;AACf,iBAAS,UAAU,OAAO,MAAM;AAAA,MAClC,GAAG,GAAI;AAAA,IACT,CAAC,EAAE,MAAM,CAAC,QAAQ;AAChB,cAAQ,MAAM,mBAAmB,GAAG;AACpC,YAAM,6BAA6B;AAAA,IACrC,CAAC;AAAA,EACH;AAKA,WAAS,cAAoB;AAC3B,WAAO,MAAM;AAAA,EACf;AAKA,WAAS,OAAa;AAEpB,UAAM,UAAU,eAAkC,UAAU;AAC5D,UAAM,WAAW,eAAkC,WAAW;AAE9D,YAAQ,iBAAiB,SAAS,eAAe;AACjD,aAAS,iBAAiB,SAAS,WAAW;AAG9C,qBAAiB;AAAA,EACnB;AAGA,MAAI,SAAS,eAAe,WAAW;AACrC,aAAS,iBAAiB,oBAAoB,IAAI;AAAA,EACpD,OAAO;AACL,SAAK;AAAA,EACP;",
  "names": []
}
