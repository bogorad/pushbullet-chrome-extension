{
  "version": 3,
  "sources": ["../src/lib/ui/dom.ts", "../src/infrastructure/storage/storage.repository.ts", "../src/options/index.ts"],
  "sourcesContent": ["/**\r\n * DOM manipulation utilities for UI pages\r\n */\r\n\r\n/**\r\n * Safely get an element by ID with type checking\r\n */\r\nexport function getElementById<T extends HTMLElement>(id: string): T {\r\n  const element = document.getElementById(id);\r\n  if (!element) {\r\n    throw new Error(`Element with id \"${id}\" not found`);\r\n  }\r\n  return element as T;\r\n}\r\n\r\n/**\r\n * Safely query selector with type checking\r\n */\r\nexport function querySelector<T extends Element>(selector: string): T {\r\n  const element = document.querySelector(selector);\r\n  if (!element) {\r\n    throw new Error(`Element with selector \"${selector}\" not found`);\r\n  }\r\n  return element as T;\r\n}\r\n\r\n/**\r\n * Show an element\r\n */\r\nexport function show(element: HTMLElement): void {\r\n  element.style.display = '';\r\n}\r\n\r\n/**\r\n * Hide an element\r\n */\r\nexport function hide(element: HTMLElement): void {\r\n  element.style.display = 'none';\r\n}\r\n\r\n/**\r\n * Toggle element visibility\r\n */\r\nexport function toggle(element: HTMLElement): void {\r\n  if (element.style.display === 'none') {\r\n    show(element);\r\n  } else {\r\n    hide(element);\r\n  }\r\n}\r\n\r\n/**\r\n * Set text content safely\r\n */\r\nexport function setText(element: HTMLElement, text: string): void {\r\n  element.textContent = text;\r\n}\r\n\r\n/**\r\n * Set HTML content safely (sanitized)\r\n */\r\nexport function setHTML(element: HTMLElement, html: string): void {\r\n  // Basic sanitization - remove script tags\r\n  const sanitized = html.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '');\r\n  element.innerHTML = sanitized;\r\n}\r\n\r\n/**\r\n * Add event listener with type safety\r\n */\r\nexport function on<K extends keyof HTMLElementEventMap>(\r\n  element: HTMLElement,\r\n  event: K,\r\n  handler: (this: HTMLElement, ev: HTMLElementEventMap[K]) => void\r\n): void {\r\n  element.addEventListener(event, handler);\r\n}\r\n\r\n/**\r\n * Format timestamp for display\r\n */\r\nexport function formatTimestamp(date: Date): string {\r\n  const now = new Date();\r\n  const diff = now.getTime() - date.getTime();\r\n  const seconds = Math.floor(diff / 1000);\r\n  const minutes = Math.floor(seconds / 60);\r\n  const hours = Math.floor(minutes / 60);\r\n  const days = Math.floor(hours / 24);\r\n\r\n  if (seconds < 60) {\r\n    return 'just now';\r\n  } else if (minutes < 60) {\r\n    return `${minutes}m ago`;\r\n  } else if (hours < 24) {\r\n    return `${hours}h ago`;\r\n  } else if (days < 7) {\r\n    return `${days}d ago`;\r\n  } else {\r\n    return date.toLocaleDateString();\r\n  }\r\n}\r\n\r\n/**\r\n * Show status message\r\n */\r\nexport function showStatus(element: HTMLElement, message: string, type: 'success' | 'error' | 'info' = 'info'): void {\r\n  element.textContent = message;\r\n  element.className = `status-message status-${type}`;\r\n  show(element);\r\n  \r\n  // Auto-hide after 3 seconds\r\n  setTimeout(() => {\r\n    hide(element);\r\n  }, 3000);\r\n}\r\n\r\n/**\r\n * Clear all children of an element\r\n */\r\nexport function clearChildren(element: HTMLElement): void {\r\n  while (element.firstChild) {\r\n    element.removeChild(element.firstChild);\r\n  }\r\n}\r\n\r\n", "/**\r\n * Storage Repository Pattern\r\n * \r\n * This module implements the Repository Pattern for storage operations.\r\n * It abstracts away the chrome.storage API, making the code more testable\r\n * and maintainable.\r\n * \r\n * Benefits:\r\n * - Testability: Easy to mock storage in tests\r\n * - Maintainability: Storage logic centralized in one place\r\n * - Clarity: Simple, clear API for storage operations\r\n */\r\n\r\n/**\r\n * Storage Repository Interface\r\n * \r\n * This interface defines the contract for storage operations.\r\n * Any implementation must provide these methods.\r\n */\r\nexport interface StorageRepository {\r\n  // API Key\r\n  getApiKey(): Promise<string | null>;\r\n  setApiKey(key: string | null): Promise<void>;\r\n\r\n  // Device Information\r\n  getDeviceIden(): Promise<string | null>;\r\n  setDeviceIden(iden: string | null): Promise<void>;\r\n\r\n  getDeviceNickname(): Promise<string | null>;\r\n  setDeviceNickname(nickname: string): Promise<void>;\r\n\r\n  // Settings\r\n  getAutoOpenLinks(): Promise<boolean>;\r\n  setAutoOpenLinks(enabled: boolean): Promise<void>;\r\n\r\n  getNotificationTimeout(): Promise<number>;\r\n  setNotificationTimeout(timeout: number): Promise<void>;\r\n\r\n  // Encryption\r\n  getEncryptionPassword(): Promise<string | null>;\r\n  setEncryptionPassword(password: string | null): Promise<void>;\r\n\r\n  // UI State\r\n  getScrollToRecentPushes(): Promise<boolean>;\r\n  setScrollToRecentPushes(scroll: boolean): Promise<void>;\r\n  removeScrollToRecentPushes(): Promise<void>;\r\n\r\n  // Device Registration\r\n  getDeviceRegistrationInProgress(): Promise<boolean>;\r\n  setDeviceRegistrationInProgress(inProgress: boolean): Promise<void>;\r\n\r\n  // Bulk Operations\r\n  clear(): Promise<void>;\r\n  remove(keys: string[]): Promise<void>;\r\n}\r\n\r\n/**\r\n * Chrome Storage Repository Implementation\r\n * \r\n * This class implements the StorageRepository interface using the\r\n * chrome.storage API. It handles the promisification of the callback-based\r\n * chrome.storage API.\r\n */\r\nexport class ChromeStorageRepository implements StorageRepository {\r\n  /**\r\n   * Get API Key from local storage\r\n   * Security: API keys are stored in local storage (not synced) to prevent\r\n   * exposure through Chrome's sync infrastructure\r\n   */\r\n  async getApiKey(): Promise<string | null> {\r\n    const result = await chrome.storage.local.get(['apiKey']);\r\n    return result.apiKey || null;\r\n  }\r\n\r\n  /**\r\n   * Set API Key in local storage\r\n   * Security: API keys are stored in local storage (not synced) to prevent\r\n   * exposure through Chrome's sync infrastructure\r\n   */\r\n  async setApiKey(key: string | null): Promise<void> {\r\n    if (key === null) {\r\n      await chrome.storage.local.remove(['apiKey']);\r\n    } else {\r\n      await chrome.storage.local.set({ apiKey: key });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get Device Identifier from local storage\r\n   */\r\n  async getDeviceIden(): Promise<string | null> {\r\n    const result = await chrome.storage.local.get(['deviceIden']);\r\n    return result.deviceIden || null;\r\n  }\r\n\r\n  /**\r\n   * Set Device Identifier in local storage\r\n   */\r\n  async setDeviceIden(iden: string | null): Promise<void> {\r\n    if (iden === null) {\r\n      await chrome.storage.local.remove(['deviceIden']);\r\n    } else {\r\n      await chrome.storage.local.set({ deviceIden: iden });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get Device Nickname from sync storage\r\n   */\r\n  async getDeviceNickname(): Promise<string | null> {\r\n    const result = await chrome.storage.sync.get(['deviceNickname']);\r\n    return result.deviceNickname || null;\r\n  }\r\n\r\n  /**\r\n   * Set Device Nickname in sync storage\r\n   */\r\n  async setDeviceNickname(nickname: string): Promise<void> {\r\n    await chrome.storage.sync.set({ deviceNickname: nickname });\r\n  }\r\n\r\n  /**\r\n   * Get Auto Open Links setting from sync storage\r\n   */\r\n  async getAutoOpenLinks(): Promise<boolean> {\r\n    const result = await chrome.storage.sync.get(['autoOpenLinks']);\r\n    return result.autoOpenLinks !== undefined ? result.autoOpenLinks : false;\r\n  }\r\n\r\n  /**\r\n   * Set Auto Open Links setting in sync storage\r\n   */\r\n  async setAutoOpenLinks(enabled: boolean): Promise<void> {\r\n    await chrome.storage.sync.set({ autoOpenLinks: enabled });\r\n  }\r\n\r\n  /**\r\n   * Get Notification Timeout from sync storage\r\n   */\r\n  async getNotificationTimeout(): Promise<number> {\r\n    const result = await chrome.storage.sync.get(['notificationTimeout']);\r\n    return result.notificationTimeout !== undefined ? result.notificationTimeout : 5000;\r\n  }\r\n\r\n  /**\r\n   * Set Notification Timeout in sync storage\r\n   */\r\n  async setNotificationTimeout(timeout: number): Promise<void> {\r\n    await chrome.storage.sync.set({ notificationTimeout: timeout });\r\n  }\r\n\r\n  /**\r\n   * Get Encryption Password from local storage\r\n   */\r\n  async getEncryptionPassword(): Promise<string | null> {\r\n    const result = await chrome.storage.local.get(['encryptionPassword']);\r\n    return result.encryptionPassword || null;\r\n  }\r\n\r\n  /**\r\n   * Set Encryption Password in local storage\r\n   */\r\n  async setEncryptionPassword(password: string | null): Promise<void> {\r\n    if (password === null) {\r\n      await chrome.storage.local.remove(['encryptionPassword']);\r\n    } else {\r\n      await chrome.storage.local.set({ encryptionPassword: password });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get Scroll to Recent Pushes flag from local storage\r\n   */\r\n  async getScrollToRecentPushes(): Promise<boolean> {\r\n    const result = await chrome.storage.local.get(['scrollToRecentPushes']);\r\n    return result.scrollToRecentPushes || false;\r\n  }\r\n\r\n  /**\r\n   * Set Scroll to Recent Pushes flag in local storage\r\n   */\r\n  async setScrollToRecentPushes(scroll: boolean): Promise<void> {\r\n    await chrome.storage.local.set({ scrollToRecentPushes: scroll });\r\n  }\r\n\r\n  /**\r\n   * Remove Scroll to Recent Pushes flag from local storage\r\n   */\r\n  async removeScrollToRecentPushes(): Promise<void> {\r\n    await chrome.storage.local.remove(['scrollToRecentPushes']);\r\n  }\r\n\r\n  /**\r\n   * Get Device Registration In Progress flag from local storage\r\n   */\r\n  async getDeviceRegistrationInProgress(): Promise<boolean> {\r\n    const result = await chrome.storage.local.get(['deviceRegistrationInProgress']);\r\n    return result.deviceRegistrationInProgress || false;\r\n  }\r\n\r\n  /**\r\n   * Set Device Registration In Progress flag in local storage\r\n   */\r\n  async setDeviceRegistrationInProgress(inProgress: boolean): Promise<void> {\r\n    await chrome.storage.local.set({ deviceRegistrationInProgress: inProgress });\r\n  }\r\n\r\n  /**\r\n   * Clear all storage (both sync and local)\r\n   */\r\n  async clear(): Promise<void> {\r\n    await Promise.all([\r\n      chrome.storage.sync.clear(),\r\n      chrome.storage.local.clear()\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Remove specific keys from storage\r\n   * Removes from both sync and local storage\r\n   */\r\n  async remove(keys: string[]): Promise<void> {\r\n    await Promise.all([\r\n      chrome.storage.sync.remove(keys),\r\n      chrome.storage.local.remove(keys)\r\n    ]);\r\n  }\r\n}\r\n\r\n/**\r\n * Create a singleton instance of the storage repository\r\n * This ensures we have a single point of access throughout the application\r\n */\r\nexport const storageRepository = new ChromeStorageRepository();\r\n\r\n", "/**\r\n * Options page\r\n */\r\n\r\nimport { getElementById, showStatus as showStatusUI } from '../lib/ui/dom';\r\nimport { storageRepository } from '../infrastructure/storage/storage.repository';\r\nimport { MessageAction } from '../types/domain';\r\n\r\n// DOM elements\r\nconst deviceNicknameInput = getElementById<HTMLInputElement>('device-nickname');\r\nconst updateNicknameButton = getElementById<HTMLButtonElement>('update-nickname');\r\nconst notificationTimeoutInput = getElementById<HTMLInputElement>('notification-timeout');\r\nconst autoOpenLinksCheckbox = getElementById<HTMLInputElement>('auto-open-links');\r\nconst encryptionPasswordInput = getElementById<HTMLInputElement>('encryption-password');\r\nconst debugModeCheckbox = getElementById<HTMLInputElement>('debug-mode');\r\nconst saveSettingsButton = getElementById<HTMLButtonElement>('save-settings');\r\nconst resetSettingsButton = getElementById<HTMLButtonElement>('reset-settings');\r\nconst statusMessage = getElementById<HTMLDivElement>('status-message');\r\nconst versionSpan = getElementById<HTMLSpanElement>('version');\r\n\r\n// Default settings\r\nconst DEFAULT_SETTINGS = {\r\n  deviceNickname: 'Chrome',\r\n  notificationTimeout: 10000, // 10 seconds in milliseconds\r\n  autoOpenLinks: true,\r\n  encryptionPassword: '', // E2EE password (stored in local storage only)\r\n  debugMode: true\r\n};\r\n\r\n/**\r\n * Show status message\r\n */\r\nfunction showStatus(message: string, type: 'success' | 'error' | 'info'): void {\r\n  showStatusUI(statusMessage, message, type);\r\n}\r\n\r\n/**\r\n * Load settings from storage\r\n */\r\nasync function loadSettings(): Promise<void> {\r\n  try {\r\n    // Load from storage repository\r\n    const deviceNickname = await storageRepository.getDeviceNickname();\r\n    const notificationTimeout = await storageRepository.getNotificationTimeout();\r\n    const autoOpenLinks = await storageRepository.getAutoOpenLinks();\r\n    const encryptionPassword = await storageRepository.getEncryptionPassword();\r\n\r\n    // Set device nickname\r\n    deviceNicknameInput.value = deviceNickname || DEFAULT_SETTINGS.deviceNickname;\r\n\r\n    // Set notification timeout (convert from ms to seconds)\r\n    notificationTimeoutInput.value = Math.round(notificationTimeout / 1000).toString();\r\n\r\n    // Set auto-open links\r\n    autoOpenLinksCheckbox.checked = autoOpenLinks;\r\n\r\n    // Set encryption password\r\n    encryptionPasswordInput.value = encryptionPassword || DEFAULT_SETTINGS.encryptionPassword;\r\n\r\n    // Set debug mode (note: debug config is complex, keeping simple for now)\r\n    debugModeCheckbox.checked = DEFAULT_SETTINGS.debugMode;\r\n\r\n    // Set version\r\n    const manifest = chrome.runtime.getManifest();\r\n    versionSpan.textContent = manifest.version;\r\n\r\n    console.log('Settings loaded successfully');\r\n  } catch (error) {\r\n    console.error('Error loading settings:', error);\r\n    showStatus('Error loading settings', 'error');\r\n  }\r\n}\r\n\r\n/**\r\n * Update device nickname\r\n */\r\nasync function updateNickname(): Promise<void> {\r\n  const nickname = deviceNicknameInput.value.trim();\r\n\r\n  if (!nickname) {\r\n    showStatus('Please enter a device nickname', 'error');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    await storageRepository.setDeviceNickname(nickname);\r\n\r\n    // Notify background script\r\n    // FIX: Changed action name to match what background script expects\r\n    chrome.runtime.sendMessage({\r\n      action: MessageAction.UPDATE_DEVICE_NICKNAME,\r\n      nickname: nickname\r\n    });\r\n\r\n    showStatus('Device nickname updated successfully', 'success');\r\n  } catch (error) {\r\n    console.error('Error updating nickname:', error);\r\n    showStatus('Error updating device nickname', 'error');\r\n  }\r\n}\r\n\r\n/**\r\n * Save notification timeout\r\n */\r\nasync function saveNotificationTimeout(): Promise<void> {\r\n  const seconds = parseInt(notificationTimeoutInput.value, 10);\r\n  \r\n  if (isNaN(seconds) || seconds < 0 || seconds > 60) {\r\n    showStatus('Timeout must be between 0 and 60 seconds', 'error');\r\n    return;\r\n  }\r\n\r\n  const milliseconds = seconds * 1000;\r\n\r\n  try {\r\n    await storageRepository.setNotificationTimeout(milliseconds);\r\n    showStatus('Notification timeout updated', 'success');\r\n  } catch (error) {\r\n    console.error('Error saving notification timeout:', error);\r\n    showStatus('Error saving notification timeout', 'error');\r\n  }\r\n}\r\n\r\n/**\r\n * Save auto-open links setting\r\n */\r\nasync function saveAutoOpenLinks(): Promise<void> {\r\n  const enabled = autoOpenLinksCheckbox.checked;\r\n\r\n  try {\r\n    await storageRepository.setAutoOpenLinks(enabled);\r\n\r\n    // Notify background script\r\n    chrome.runtime.sendMessage({\r\n      action: MessageAction.AUTO_OPEN_LINKS_CHANGED,\r\n      autoOpenLinks: enabled\r\n    });\r\n\r\n    showStatus('Auto-open links setting updated', 'success');\r\n  } catch (error) {\r\n    console.error('Error saving auto-open links:', error);\r\n    showStatus('Error saving auto-open links setting', 'error');\r\n  }\r\n}\r\n\r\n/**\r\n * Save encryption password (to LOCAL storage only, not synced!)\r\n */\r\nasync function saveEncryptionPassword(): Promise<void> {\r\n  const password = encryptionPasswordInput.value.trim();\r\n\r\n  try {\r\n    await storageRepository.setEncryptionPassword(password);\r\n\r\n    // Notify background script that encryption password changed\r\n    chrome.runtime.sendMessage({\r\n      action: MessageAction.ENCRYPTION_PASSWORD_CHANGED,\r\n      hasPassword: password.length > 0\r\n    });\r\n\r\n    if (password.length > 0) {\r\n      showStatus('Encryption password saved (stored locally only)', 'success');\r\n    } else {\r\n      showStatus('Encryption password cleared', 'success');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error saving encryption password:', error);\r\n    showStatus('Error saving encryption password', 'error');\r\n  }\r\n}\r\n\r\n/**\r\n * Save debug mode setting\r\n */\r\nasync function saveDebugMode(): Promise<void> {\r\n  const enabled = debugModeCheckbox.checked;\r\n\r\n  try {\r\n    // Get current debug config\r\n    const result = await chrome.storage.local.get(['debugConfig']);\r\n\r\n    const debugConfig = (result.debugConfig as Record<string, unknown>) || {};\r\n    debugConfig.enabled = enabled;\r\n\r\n    await chrome.storage.local.set({ debugConfig });\r\n\r\n    // Notify background script\r\n    chrome.runtime.sendMessage({\r\n      action: MessageAction.DEBUG_MODE_CHANGED,\r\n      enabled: enabled\r\n    });\r\n\r\n    showStatus('Debug mode updated', 'success');\r\n  } catch (error) {\r\n    console.error('Error saving debug mode:', error);\r\n    showStatus('Error saving debug mode', 'error');\r\n  }\r\n}\r\n\r\n/**\r\n * Save all settings\r\n */\r\nasync function saveAllSettings(): Promise<void> {\r\n  try {\r\n    const nickname = deviceNicknameInput.value.trim();\r\n    const seconds = parseInt(notificationTimeoutInput.value, 10);\r\n    const autoOpen = autoOpenLinksCheckbox.checked;\r\n    const debug = debugModeCheckbox.checked;\r\n\r\n    // Validate\r\n    if (!nickname) {\r\n      showStatus('Please enter a device nickname', 'error');\r\n      return;\r\n    }\r\n\r\n    if (isNaN(seconds) || seconds < 0 || seconds > 60) {\r\n      showStatus('Timeout must be between 0 and 60 seconds', 'error');\r\n      return;\r\n    }\r\n\r\n    // Save to storage repository\r\n    await storageRepository.setDeviceNickname(nickname);\r\n    await storageRepository.setNotificationTimeout(seconds * 1000);\r\n    await storageRepository.setAutoOpenLinks(autoOpen);\r\n\r\n    // Note: Debug config handling skipped for now (complex local storage structure)\r\n\r\n    // Notify background script\r\n    chrome.runtime.sendMessage({\r\n      action: MessageAction.SETTINGS_CHANGED,\r\n      settings: {\r\n        deviceNickname: nickname,\r\n        notificationTimeout: seconds * 1000,\r\n        autoOpenLinks: autoOpen,\r\n        debugMode: debug\r\n      }\r\n    });\r\n\r\n    showStatus('All settings saved successfully!', 'success');\r\n  } catch (error) {\r\n    console.error('Error saving settings:', error);\r\n    showStatus('Error saving settings', 'error');\r\n  }\r\n}\r\n\r\n/**\r\n * Reset to default settings\r\n */\r\nasync function resetToDefaults(): Promise<void> {\r\n  if (!confirm('Are you sure you want to reset all settings to defaults?')) {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    // Reset settings via storage repository\r\n    await storageRepository.setDeviceNickname(DEFAULT_SETTINGS.deviceNickname);\r\n    await storageRepository.setNotificationTimeout(DEFAULT_SETTINGS.notificationTimeout);\r\n    await storageRepository.setAutoOpenLinks(DEFAULT_SETTINGS.autoOpenLinks);\r\n\r\n    // Note: Debug config reset skipped for now (complex local storage structure)\r\n\r\n    // Reload settings\r\n    await loadSettings();\r\n\r\n    showStatus('Settings reset to defaults', 'success');\r\n  } catch (error) {\r\n    console.error('Error resetting settings:', error);\r\n    showStatus('Error resetting settings', 'error');\r\n  }\r\n}\r\n\r\n/**\r\n * Initialize page\r\n */\r\nfunction init(): void {\r\n  // Event listeners\r\n  updateNicknameButton.addEventListener('click', updateNickname);\r\n  saveSettingsButton.addEventListener('click', saveAllSettings);\r\n  resetSettingsButton.addEventListener('click', resetToDefaults);\r\n\r\n  // Auto-save on change\r\n  notificationTimeoutInput.addEventListener('change', () => {\r\n    const seconds = parseInt(notificationTimeoutInput.value, 10);\r\n    if (!isNaN(seconds) && seconds >= 0 && seconds <= 60) {\r\n      saveNotificationTimeout();\r\n    }\r\n  });\r\n\r\n  autoOpenLinksCheckbox.addEventListener('change', saveAutoOpenLinks);\r\n  encryptionPasswordInput.addEventListener('change', saveEncryptionPassword);\r\n  debugModeCheckbox.addEventListener('change', saveDebugMode);\r\n\r\n  // Load settings\r\n  loadSettings();\r\n}\r\n\r\n// Initialize on DOM load\r\nif (document.readyState === 'loading') {\r\n  document.addEventListener('DOMContentLoaded', init);\r\n} else {\r\n  init();\r\n}\r\n\r\n"],
  "mappings": "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",
  "names": ["showStatus"]
}
