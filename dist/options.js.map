{
  "version": 3,
  "sources": ["../src/lib/ui/dom.ts", "../src/infrastructure/storage/storage.repository.ts", "../src/options/index.ts"],
  "sourcesContent": ["/**\n * DOM manipulation utilities for UI pages\n */\n\n/**\n * Safely get an element by ID with type checking\n */\nexport function getElementById<T extends HTMLElement>(id: string): T {\n  const element = document.getElementById(id);\n  if (!element) {\n    throw new Error(`Element with id \"${id}\" not found`);\n  }\n  return element as T;\n}\n\n/**\n * Safely query selector with type checking\n */\nexport function querySelector<T extends Element>(selector: string): T {\n  const element = document.querySelector(selector);\n  if (!element) {\n    throw new Error(`Element with selector \"${selector}\" not found`);\n  }\n  return element as T;\n}\n\n/**\n * Show an element\n */\nexport function show(element: HTMLElement): void {\n  element.style.display = '';\n}\n\n/**\n * Hide an element\n */\nexport function hide(element: HTMLElement): void {\n  element.style.display = 'none';\n}\n\n/**\n * Toggle element visibility\n */\nexport function toggle(element: HTMLElement): void {\n  if (element.style.display === 'none') {\n    show(element);\n  } else {\n    hide(element);\n  }\n}\n\n/**\n * Set text content safely\n */\nexport function setText(element: HTMLElement, text: string): void {\n  element.textContent = text;\n}\n\n/**\n * Set HTML content safely (sanitized)\n */\nexport function setHTML(element: HTMLElement, html: string): void {\n  // Basic sanitization - remove script tags\n  const sanitized = html.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '');\n  element.innerHTML = sanitized;\n}\n\n/**\n * Add event listener with type safety\n */\nexport function on<K extends keyof HTMLElementEventMap>(\n  element: HTMLElement,\n  event: K,\n  handler: (this: HTMLElement, ev: HTMLElementEventMap[K]) => void\n): void {\n  element.addEventListener(event, handler);\n}\n\n/**\n * Format timestamp for display\n */\nexport function formatTimestamp(date: Date): string {\n  const now = new Date();\n  const diff = now.getTime() - date.getTime();\n  const seconds = Math.floor(diff / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  if (seconds < 60) {\n    return 'just now';\n  } else if (minutes < 60) {\n    return `${minutes}m ago`;\n  } else if (hours < 24) {\n    return `${hours}h ago`;\n  } else if (days < 7) {\n    return `${days}d ago`;\n  } else {\n    return date.toLocaleDateString();\n  }\n}\n\n/**\n * Show status message\n */\nexport function showStatus(element: HTMLElement, message: string, type: 'success' | 'error' | 'info' = 'info'): void {\n  element.textContent = message;\n  element.className = `status-message status-${type}`;\n  show(element);\n  \n  // Auto-hide after 3 seconds\n  setTimeout(() => {\n    hide(element);\n  }, 3000);\n}\n\n/**\n * Clear all children of an element\n */\nexport function clearChildren(element: HTMLElement): void {\n  while (element.firstChild) {\n    element.removeChild(element.firstChild);\n  }\n}\n\n", "/**\n * Storage Repository Pattern\n * \n * This module implements the Repository Pattern for storage operations.\n * It abstracts away the chrome.storage API, making the code more testable\n * and maintainable.\n * \n * Benefits:\n * - Testability: Easy to mock storage in tests\n * - Maintainability: Storage logic centralized in one place\n * - Clarity: Simple, clear API for storage operations\n */\n\n/**\n * Storage Repository Interface\n * \n * This interface defines the contract for storage operations.\n * Any implementation must provide these methods.\n */\nexport interface StorageRepository {\n  // API Key\n  getApiKey(): Promise<string | null>;\n  setApiKey(key: string | null): Promise<void>;\n\n  // Device Information\n  getDeviceIden(): Promise<string | null>;\n  setDeviceIden(iden: string | null): Promise<void>;\n\n  getDeviceNickname(): Promise<string | null>;\n  setDeviceNickname(nickname: string): Promise<void>;\n\n  // Settings\n  getAutoOpenLinks(): Promise<boolean>;\n  setAutoOpenLinks(enabled: boolean): Promise<void>;\n\n  getNotificationTimeout(): Promise<number>;\n  setNotificationTimeout(timeout: number): Promise<void>;\n\n  // Encryption\n  getEncryptionPassword(): Promise<string | null>;\n  setEncryptionPassword(password: string | null): Promise<void>;\n\n  // UI State\n  getScrollToRecentPushes(): Promise<boolean>;\n  setScrollToRecentPushes(scroll: boolean): Promise<void>;\n  removeScrollToRecentPushes(): Promise<void>;\n\n  // Device Registration\n  getDeviceRegistrationInProgress(): Promise<boolean>;\n  setDeviceRegistrationInProgress(inProgress: boolean): Promise<void>;\n\n  // Last Modified Cutoff\n  getLastModifiedCutoff(): Promise<number | null>;\n  setLastModifiedCutoff(value: number): Promise<void>;\n\n  // Auto Open Links on Reconnect\n  getLastAutoOpenCutoff(): Promise<number | null>;\n  setLastAutoOpenCutoff(value: number): Promise<void>;\n  getAutoOpenLinksOnReconnect(): Promise<boolean>;\n  setAutoOpenLinksOnReconnect(value: boolean): Promise<void>;\n  getMaxAutoOpenPerReconnect(): Promise<number>;\n  setMaxAutoOpenPerReconnect(value: number): Promise<void>;\n\n  // User Info Cache\n  getUserInfoCache(): Promise<any | null>;\n  setUserInfoCache(value: any): Promise<void>;\n\n  // Bulk Operations\n  clear(): Promise<void>;\n  remove(keys: string[]): Promise<void>;\n}\n\n/**\n * Chrome Storage Repository Implementation\n * \n * This class implements the StorageRepository interface using the\n * chrome.storage API. It handles the promisification of the callback-based\n * chrome.storage API.\n */\nexport class ChromeStorageRepository implements StorageRepository {\n  /**\n   * Get API Key from local storage\n   * Security: API keys are stored in local storage (not synced) to prevent\n   * exposure through Chrome's sync infrastructure\n   */\n  async getApiKey(): Promise<string | null> {\n    const result = await chrome.storage.local.get(['apiKey']);\n    return result.apiKey || null;\n  }\n\n  /**\n   * Set API Key in local storage\n   * Security: API keys are stored in local storage (not synced) to prevent\n   * exposure through Chrome's sync infrastructure\n   */\n  async setApiKey(key: string | null): Promise<void> {\n    if (key === null) {\n      await chrome.storage.local.remove(['apiKey']);\n    } else {\n      await chrome.storage.local.set({ apiKey: key });\n    }\n  }\n\n  /**\n   * Get Device Identifier from local storage\n   */\n  async getDeviceIden(): Promise<string | null> {\n    const result = await chrome.storage.local.get(['deviceIden']);\n    return result.deviceIden || null;\n  }\n\n  /**\n   * Set Device Identifier in local storage\n   */\n  async setDeviceIden(iden: string | null): Promise<void> {\n    if (iden === null) {\n      await chrome.storage.local.remove(['deviceIden']);\n    } else {\n      await chrome.storage.local.set({ deviceIden: iden });\n    }\n  }\n\n  /**\n    * Get Device Nickname from local storage\n    */\n  async getDeviceNickname(): Promise<string | null> {\n    const result = await chrome.storage.local.get(['deviceNickname']);\n    return result.deviceNickname || null;\n  }\n\n  /**\n    * Set Device Nickname in local storage\n    */\n  async setDeviceNickname(nickname: string): Promise<void> {\n    await chrome.storage.local.set({ deviceNickname: nickname });\n  }\n\n  /**\n   * Get Auto Open Links setting from sync storage\n   */\n  async getAutoOpenLinks(): Promise<boolean> {\n    const result = await chrome.storage.sync.get(['autoOpenLinks']);\n    return result.autoOpenLinks !== undefined ? result.autoOpenLinks : false;\n  }\n\n  /**\n   * Set Auto Open Links setting in sync storage\n   */\n  async setAutoOpenLinks(enabled: boolean): Promise<void> {\n    await chrome.storage.sync.set({ autoOpenLinks: enabled });\n  }\n\n  /**\n   * Get Notification Timeout from sync storage\n   */\n  async getNotificationTimeout(): Promise<number> {\n    const result = await chrome.storage.sync.get(['notificationTimeout']);\n    return result.notificationTimeout !== undefined ? result.notificationTimeout : 5000;\n  }\n\n  /**\n   * Set Notification Timeout in sync storage\n   */\n  async setNotificationTimeout(timeout: number): Promise<void> {\n    await chrome.storage.sync.set({ notificationTimeout: timeout });\n  }\n\n  /**\n   * Get Encryption Password from local storage\n   */\n  async getEncryptionPassword(): Promise<string | null> {\n    const result = await chrome.storage.local.get(['encryptionPassword']);\n    return result.encryptionPassword || null;\n  }\n\n  /**\n   * Set Encryption Password in local storage\n   */\n  async setEncryptionPassword(password: string | null): Promise<void> {\n    if (password === null) {\n      await chrome.storage.local.remove(['encryptionPassword']);\n    } else {\n      await chrome.storage.local.set({ encryptionPassword: password });\n    }\n  }\n\n  /**\n   * Get Scroll to Recent Pushes flag from local storage\n   */\n  async getScrollToRecentPushes(): Promise<boolean> {\n    const result = await chrome.storage.local.get(['scrollToRecentPushes']);\n    return result.scrollToRecentPushes || false;\n  }\n\n  /**\n   * Set Scroll to Recent Pushes flag in local storage\n   */\n  async setScrollToRecentPushes(scroll: boolean): Promise<void> {\n    await chrome.storage.local.set({ scrollToRecentPushes: scroll });\n  }\n\n  /**\n   * Remove Scroll to Recent Pushes flag from local storage\n   */\n  async removeScrollToRecentPushes(): Promise<void> {\n    await chrome.storage.local.remove(['scrollToRecentPushes']);\n  }\n\n  /**\n   * Get Device Registration In Progress flag from local storage\n   */\n  async getDeviceRegistrationInProgress(): Promise<boolean> {\n    const result = await chrome.storage.local.get(['deviceRegistrationInProgress']);\n    return result.deviceRegistrationInProgress || false;\n  }\n\n  /**\n   * Set Device Registration In Progress flag in local storage\n   */\n  async setDeviceRegistrationInProgress(inProgress: boolean): Promise<void> {\n    await chrome.storage.local.set({ deviceRegistrationInProgress: inProgress });\n  }\n\n  /**\n   * Get Last Modified Cutoff from local storage\n   */\n  async getLastModifiedCutoff(): Promise<number | null> {\n    const result = await chrome.storage.local.get(['lastModifiedCutoff']);\n    const cutoff = result.lastModifiedCutoff;\n    return typeof cutoff === 'number' ? cutoff : null;\n  }\n\n  /**\n   * Set Last Modified Cutoff in local storage\n   */\n  async setLastModifiedCutoff(value: number): Promise<void> {\n    await chrome.storage.local.set({ lastModifiedCutoff: value });\n  }\n\n  /**\n   * Get Last Auto Open Cutoff from local storage\n   */\n  async getLastAutoOpenCutoff(): Promise<number | null> {\n    const result = await chrome.storage.local.get(['lastAutoOpenCutoff']);\n    const v = result.lastAutoOpenCutoff;\n    return typeof v === 'number' ? v : null;\n  }\n\n  /**\n   * Set Last Auto Open Cutoff in local storage\n   */\n  async setLastAutoOpenCutoff(value: number): Promise<void> {\n    await chrome.storage.local.set({ lastAutoOpenCutoff: value });\n  }\n\n  /**\n   * Get Auto Open Links on Reconnect setting from local storage\n   */\n  async getAutoOpenLinksOnReconnect(): Promise<boolean> {\n    const result = await chrome.storage.local.get(['autoOpenLinksOnReconnect']);\n    const v = result.autoOpenLinksOnReconnect;\n    return typeof v === 'boolean' ? v : false;\n  }\n\n  /**\n   * Set Auto Open Links on Reconnect setting in local storage\n   */\n  async setAutoOpenLinksOnReconnect(value: boolean): Promise<void> {\n    await chrome.storage.local.set({ autoOpenLinksOnReconnect: value });\n  }\n\n  /**\n   * Get Max Auto Open Per Reconnect from local storage\n   */\n  async getMaxAutoOpenPerReconnect(): Promise<number> {\n    const result = await chrome.storage.local.get(['maxAutoOpenPerReconnect']);\n    const v = result.maxAutoOpenPerReconnect;\n    return typeof v === 'number' && v > 0 ? v : 5;\n  }\n\n  /**\n   * Set Max Auto Open Per Reconnect in local storage\n   */\n  async setMaxAutoOpenPerReconnect(value: number): Promise<void> {\n    await chrome.storage.local.set({ maxAutoOpenPerReconnect: value });\n  }\n\n  /**\n   * Get User Info Cache from local storage\n   */\n  async getUserInfoCache(): Promise<any | null> {\n    const result = await chrome.storage.local.get(['userInfoCache']);\n    return result.userInfoCache || null;\n  }\n\n  /**\n   * Set User Info Cache in local storage\n   */\n  async setUserInfoCache(value: any): Promise<void> {\n    await chrome.storage.local.set({ userInfoCache: value });\n  }\n\n  /**\n   * Clear all storage (both sync and local)\n   */\n  async clear(): Promise<void> {\n    await Promise.all([\n      chrome.storage.sync.clear(),\n      chrome.storage.local.clear()\n    ]);\n  }\n\n  /**\n   * Remove specific keys from storage\n   * Removes from both sync and local storage\n   */\n  async remove(keys: string[]): Promise<void> {\n    await Promise.all([\n      chrome.storage.sync.remove(keys),\n      chrome.storage.local.remove(keys)\n    ]);\n  }\n}\n\n/**\n * Create a singleton instance of the storage repository\n * This ensures we have a single point of access throughout the application\n */\nexport const storageRepository = new ChromeStorageRepository();\n\n", "/**\n * Options page\n */\n\nimport { getElementById, showStatus as showStatusUI } from '../lib/ui/dom';\nimport { storageRepository } from '../infrastructure/storage/storage.repository';\nimport { MessageAction } from '../types/domain';\n\n// DOM elements\nconst deviceNicknameInput = getElementById<HTMLInputElement>('device-nickname');\nconst updateNicknameButton = getElementById<HTMLButtonElement>('update-nickname');\nconst notificationTimeoutInput = getElementById<HTMLInputElement>('notification-timeout');\nconst autoOpenLinksCheckbox = getElementById<HTMLInputElement>('auto-open-links');\nconst autoOpenLinksOnReconnectCheckbox = getElementById<HTMLInputElement>('auto-open-links-on-reconnect');\nconst encryptionPasswordInput = getElementById<HTMLInputElement>('encryption-password');\nconst debugModeCheckbox = getElementById<HTMLInputElement>('debug-mode');\nconst saveSettingsButton = getElementById<HTMLButtonElement>('save-settings');\nconst resetSettingsButton = getElementById<HTMLButtonElement>('reset-settings');\nconst statusMessage = getElementById<HTMLDivElement>('status-message');\nconst versionSpan = getElementById<HTMLSpanElement>('version');\n\n// Default settings\nconst DEFAULT_SETTINGS = {\n  deviceNickname: 'Chrome',\n  notificationTimeout: 10000, // 10 seconds in milliseconds\n  autoOpenLinks: true,\n  autoOpenLinksOnReconnect: false, // Off by default for safety\n  encryptionPassword: '', // E2EE password (stored in local storage only)\n  debugMode: true\n};\n\n/**\n * Show status message\n */\nfunction showStatus(message: string, type: 'success' | 'error' | 'info'): void {\n  showStatusUI(statusMessage, message, type);\n}\n\n/**\n * Load settings from storage\n */\nasync function loadSettings(): Promise<void> {\n  try {\n    // Load from storage repository\n    const deviceNickname = await storageRepository.getDeviceNickname();\n    const notificationTimeout = await storageRepository.getNotificationTimeout();\n    const autoOpenLinks = await storageRepository.getAutoOpenLinks();\n    const autoOpenLinksOnReconnect = await storageRepository.getAutoOpenLinksOnReconnect();\n    const encryptionPassword = await storageRepository.getEncryptionPassword();\n\n    // Set device nickname\n    deviceNicknameInput.value = deviceNickname || DEFAULT_SETTINGS.deviceNickname;\n\n    // Set notification timeout (convert from ms to seconds)\n    notificationTimeoutInput.value = Math.round(notificationTimeout / 1000).toString();\n\n    // Set auto-open links\n    autoOpenLinksCheckbox.checked = autoOpenLinks;\n    autoOpenLinksOnReconnectCheckbox.checked = autoOpenLinksOnReconnect;\n\n    // Set encryption password\n    encryptionPasswordInput.value = encryptionPassword || DEFAULT_SETTINGS.encryptionPassword;\n\n    // Set debug mode (note: debug config is complex, keeping simple for now)\n    debugModeCheckbox.checked = DEFAULT_SETTINGS.debugMode;\n\n    // Set version\n    const manifest = chrome.runtime.getManifest();\n    versionSpan.textContent = manifest.version;\n\n    console.log('Settings loaded successfully');\n  } catch (error) {\n    console.error('Error loading settings:', error);\n    showStatus('Error loading settings', 'error');\n  }\n}\n\n/**\n * Update device nickname\n */\nasync function updateNickname(): Promise<void> {\n  const nickname = deviceNicknameInput.value.trim();\n\n  if (!nickname) {\n    showStatus('Please enter a device nickname', 'error');\n    return;\n  }\n\n  try {\n    await storageRepository.setDeviceNickname(nickname);\n\n    // Notify background script\n    // FIX: Changed action name to match what background script expects\n    chrome.runtime.sendMessage({\n      action: MessageAction.UPDATE_DEVICE_NICKNAME,\n      nickname: nickname\n    });\n\n    showStatus('Device nickname updated successfully', 'success');\n  } catch (error) {\n    console.error('Error updating nickname:', error);\n    showStatus('Error updating device nickname', 'error');\n  }\n}\n\n/**\n * Save notification timeout\n */\nasync function saveNotificationTimeout(): Promise<void> {\n  const seconds = parseInt(notificationTimeoutInput.value, 10);\n  \n  if (isNaN(seconds) || seconds < 0 || seconds > 60) {\n    showStatus('Timeout must be between 0 and 60 seconds', 'error');\n    return;\n  }\n\n  const milliseconds = seconds * 1000;\n\n  try {\n    await storageRepository.setNotificationTimeout(milliseconds);\n    showStatus('Notification timeout updated', 'success');\n  } catch (error) {\n    console.error('Error saving notification timeout:', error);\n    showStatus('Error saving notification timeout', 'error');\n  }\n}\n\n/**\n * Save auto-open links setting\n */\nasync function saveAutoOpenLinks(): Promise<void> {\n  const enabled = autoOpenLinksCheckbox.checked;\n\n  try {\n    await storageRepository.setAutoOpenLinks(enabled);\n\n    // Notify background script\n    chrome.runtime.sendMessage({\n      action: MessageAction.AUTO_OPEN_LINKS_CHANGED,\n      autoOpenLinks: enabled\n    });\n\n    showStatus('Auto-open links setting updated', 'success');\n  } catch (error) {\n    console.error('Error saving auto-open links:', error);\n    showStatus('Error saving auto-open links setting', 'error');\n  }\n}\n\n/**\n * Save auto-open links on reconnect setting\n */\nasync function saveAutoOpenLinksOnReconnect(): Promise<void> {\n  const enabled = autoOpenLinksOnReconnectCheckbox.checked;\n\n  try {\n    await storageRepository.setAutoOpenLinksOnReconnect(enabled);\n    showStatus('Auto-open links on reconnect setting updated', 'success');\n  } catch (error) {\n    console.error('Error saving auto-open links on reconnect:', error);\n    showStatus('Error saving auto-open links on reconnect setting', 'error');\n  }\n}\n\n/**\n * Save encryption password (to LOCAL storage only, not synced!)\n */\nasync function saveEncryptionPassword(): Promise<void> {\n  const password = encryptionPasswordInput.value.trim();\n\n  try {\n    await storageRepository.setEncryptionPassword(password);\n\n    // Notify background script that encryption password changed\n    chrome.runtime.sendMessage({\n      action: MessageAction.ENCRYPTION_PASSWORD_CHANGED,\n      hasPassword: password.length > 0\n    });\n\n    if (password.length > 0) {\n      showStatus('Encryption password saved (stored locally only)', 'success');\n    } else {\n      showStatus('Encryption password cleared', 'success');\n    }\n  } catch (error) {\n    console.error('Error saving encryption password:', error);\n    showStatus('Error saving encryption password', 'error');\n  }\n}\n\n/**\n * Save debug mode setting\n */\nasync function saveDebugMode(): Promise<void> {\n  const enabled = debugModeCheckbox.checked;\n\n  try {\n    // Get current debug config\n    const result = await chrome.storage.local.get(['debugConfig']);\n\n    const debugConfig = (result.debugConfig as Record<string, unknown>) || {};\n    debugConfig.enabled = enabled;\n\n    await chrome.storage.local.set({ debugConfig });\n\n    // Notify background script\n    chrome.runtime.sendMessage({\n      action: MessageAction.DEBUG_MODE_CHANGED,\n      enabled: enabled\n    });\n\n    showStatus('Debug mode updated', 'success');\n  } catch (error) {\n    console.error('Error saving debug mode:', error);\n    showStatus('Error saving debug mode', 'error');\n  }\n}\n\n/**\n * Save all settings\n */\nasync function saveAllSettings(): Promise<void> {\n  try {\n    const nickname = deviceNicknameInput.value.trim();\n    const seconds = parseInt(notificationTimeoutInput.value, 10);\n    const autoOpen = autoOpenLinksCheckbox.checked;\n    const autoOpenOnReconnect = autoOpenLinksOnReconnectCheckbox.checked;\n    const debug = debugModeCheckbox.checked;\n\n    // Validate\n    if (!nickname) {\n      showStatus('Please enter a device nickname', 'error');\n      return;\n    }\n\n    if (isNaN(seconds) || seconds < 0 || seconds > 60) {\n      showStatus('Timeout must be between 0 and 60 seconds', 'error');\n      return;\n    }\n\n    // Save to storage repository\n    await storageRepository.setDeviceNickname(nickname);\n    await storageRepository.setNotificationTimeout(seconds * 1000);\n    await storageRepository.setAutoOpenLinks(autoOpen);\n    await storageRepository.setAutoOpenLinksOnReconnect(autoOpenOnReconnect);\n\n    // Note: Debug config handling skipped for now (complex local storage structure)\n\n    // Notify background script\n    chrome.runtime.sendMessage({\n      action: MessageAction.SETTINGS_CHANGED,\n      settings: {\n        deviceNickname: nickname,\n        notificationTimeout: seconds * 1000,\n        autoOpenLinks: autoOpen,\n        autoOpenLinksOnReconnect: autoOpenOnReconnect,\n        debugMode: debug\n      }\n    });\n\n    showStatus('All settings saved successfully!', 'success');\n  } catch (error) {\n    console.error('Error saving settings:', error);\n    showStatus('Error saving settings', 'error');\n  }\n}\n\n/**\n * Reset to default settings\n */\nasync function resetToDefaults(): Promise<void> {\n  if (!confirm('Are you sure you want to reset all settings to defaults?')) {\n    return;\n  }\n\n  try {\n    // Reset settings via storage repository\n    await storageRepository.setDeviceNickname(DEFAULT_SETTINGS.deviceNickname);\n    await storageRepository.setNotificationTimeout(DEFAULT_SETTINGS.notificationTimeout);\n    await storageRepository.setAutoOpenLinks(DEFAULT_SETTINGS.autoOpenLinks);\n    await storageRepository.setAutoOpenLinksOnReconnect(DEFAULT_SETTINGS.autoOpenLinksOnReconnect);\n\n    // Note: Debug config reset skipped for now (complex local storage structure)\n\n    // Reload settings\n    await loadSettings();\n\n    showStatus('Settings reset to defaults', 'success');\n  } catch (error) {\n    console.error('Error resetting settings:', error);\n    showStatus('Error resetting settings', 'error');\n  }\n}\n\n/**\n * Initialize page\n */\nfunction init(): void {\n  // Event listeners\n  updateNicknameButton.addEventListener('click', updateNickname);\n  saveSettingsButton.addEventListener('click', saveAllSettings);\n  resetSettingsButton.addEventListener('click', resetToDefaults);\n\n  // Auto-save on change\n  notificationTimeoutInput.addEventListener('change', () => {\n    const seconds = parseInt(notificationTimeoutInput.value, 10);\n    if (!isNaN(seconds) && seconds >= 0 && seconds <= 60) {\n      saveNotificationTimeout();\n    }\n  });\n\n  autoOpenLinksCheckbox.addEventListener('change', saveAutoOpenLinks);\n  autoOpenLinksOnReconnectCheckbox.addEventListener('change', saveAutoOpenLinksOnReconnect);\n  encryptionPasswordInput.addEventListener('change', saveEncryptionPassword);\n  debugModeCheckbox.addEventListener('change', saveDebugMode);\n\n  // Load settings\n  loadSettings();\n}\n\n// Initialize on DOM load\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', init);\n} else {\n  init();\n}\n\n"],
  "mappings": "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",
  "names": ["showStatus"]
}
