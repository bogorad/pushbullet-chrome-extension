{
  "version": 3,
  "sources": ["../src/lib/ui/dom.ts", "../src/options/index.ts"],
  "sourcesContent": ["/**\n * DOM manipulation utilities for UI pages\n */\n\n/**\n * Safely get an element by ID with type checking\n */\nexport function getElementById<T extends HTMLElement>(id: string): T {\n  const element = document.getElementById(id);\n  if (!element) {\n    throw new Error(`Element with id \"${id}\" not found`);\n  }\n  return element as T;\n}\n\n/**\n * Safely query selector with type checking\n */\nexport function querySelector<T extends Element>(selector: string): T {\n  const element = document.querySelector(selector);\n  if (!element) {\n    throw new Error(`Element with selector \"${selector}\" not found`);\n  }\n  return element as T;\n}\n\n/**\n * Show an element\n */\nexport function show(element: HTMLElement): void {\n  element.style.display = '';\n}\n\n/**\n * Hide an element\n */\nexport function hide(element: HTMLElement): void {\n  element.style.display = 'none';\n}\n\n/**\n * Toggle element visibility\n */\nexport function toggle(element: HTMLElement): void {\n  if (element.style.display === 'none') {\n    show(element);\n  } else {\n    hide(element);\n  }\n}\n\n/**\n * Set text content safely\n */\nexport function setText(element: HTMLElement, text: string): void {\n  element.textContent = text;\n}\n\n/**\n * Set HTML content safely (sanitized)\n */\nexport function setHTML(element: HTMLElement, html: string): void {\n  // Basic sanitization - remove script tags\n  const sanitized = html.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '');\n  element.innerHTML = sanitized;\n}\n\n/**\n * Add event listener with type safety\n */\nexport function on<K extends keyof HTMLElementEventMap>(\n  element: HTMLElement,\n  event: K,\n  handler: (this: HTMLElement, ev: HTMLElementEventMap[K]) => void\n): void {\n  element.addEventListener(event, handler);\n}\n\n/**\n * Format timestamp for display\n */\nexport function formatTimestamp(date: Date): string {\n  const now = new Date();\n  const diff = now.getTime() - date.getTime();\n  const seconds = Math.floor(diff / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  if (seconds < 60) {\n    return 'just now';\n  } else if (minutes < 60) {\n    return `${minutes}m ago`;\n  } else if (hours < 24) {\n    return `${hours}h ago`;\n  } else if (days < 7) {\n    return `${days}d ago`;\n  } else {\n    return date.toLocaleDateString();\n  }\n}\n\n/**\n * Show status message\n */\nexport function showStatus(element: HTMLElement, message: string, type: 'success' | 'error' | 'info' = 'info'): void {\n  element.textContent = message;\n  element.className = `status-message status-${type}`;\n  show(element);\n  \n  // Auto-hide after 3 seconds\n  setTimeout(() => {\n    hide(element);\n  }, 3000);\n}\n\n/**\n * Clear all children of an element\n */\nexport function clearChildren(element: HTMLElement): void {\n  while (element.firstChild) {\n    element.removeChild(element.firstChild);\n  }\n}\n\n", "/**\n * Options page\n */\n\nimport { getElementById, showStatus as showStatusUI } from '../lib/ui/dom';\n\n// DOM elements\nconst deviceNicknameInput = getElementById<HTMLInputElement>('device-nickname');\nconst updateNicknameButton = getElementById<HTMLButtonElement>('update-nickname');\nconst notificationTimeoutInput = getElementById<HTMLInputElement>('notification-timeout');\nconst autoOpenLinksCheckbox = getElementById<HTMLInputElement>('auto-open-links');\nconst encryptionPasswordInput = getElementById<HTMLInputElement>('encryption-password');\nconst debugModeCheckbox = getElementById<HTMLInputElement>('debug-mode');\nconst saveSettingsButton = getElementById<HTMLButtonElement>('save-settings');\nconst resetSettingsButton = getElementById<HTMLButtonElement>('reset-settings');\nconst statusMessage = getElementById<HTMLDivElement>('status-message');\nconst versionSpan = getElementById<HTMLSpanElement>('version');\n\n// Default settings\nconst DEFAULT_SETTINGS = {\n  deviceNickname: 'Chrome',\n  notificationTimeout: 10000, // 10 seconds in milliseconds\n  autoOpenLinks: true,\n  encryptionPassword: '', // E2EE password (stored in local storage only)\n  debugMode: true\n};\n\n/**\n * Show status message\n */\nfunction showStatus(message: string, type: 'success' | 'error' | 'info'): void {\n  showStatusUI(statusMessage, message, type);\n}\n\n/**\n * Load settings from storage\n */\nasync function loadSettings(): Promise<void> {\n  try {\n    // Load from sync storage\n    const syncResult = await chrome.storage.sync.get(['deviceNickname', 'notificationTimeout', 'autoOpenLinks']);\n\n    // Load encryption password and debug config from LOCAL storage (not synced!)\n    const localResult = await chrome.storage.local.get(['encryptionPassword', 'debugConfig']);\n\n    // Set device nickname\n    deviceNicknameInput.value = syncResult.deviceNickname || DEFAULT_SETTINGS.deviceNickname;\n\n    // Set notification timeout (convert from ms to seconds)\n    const timeoutMs = syncResult.notificationTimeout !== undefined ? syncResult.notificationTimeout : DEFAULT_SETTINGS.notificationTimeout;\n    notificationTimeoutInput.value = Math.round(timeoutMs / 1000).toString();\n\n    // Set auto-open links\n    autoOpenLinksCheckbox.checked = syncResult.autoOpenLinks !== undefined ? syncResult.autoOpenLinks : DEFAULT_SETTINGS.autoOpenLinks;\n\n    // Set encryption password (from local storage)\n    encryptionPasswordInput.value = localResult.encryptionPassword || DEFAULT_SETTINGS.encryptionPassword;\n\n    // Set debug mode\n    const debugConfig = localResult.debugConfig as { enabled?: boolean } | undefined;\n    debugModeCheckbox.checked = debugConfig?.enabled !== undefined ? debugConfig.enabled : DEFAULT_SETTINGS.debugMode;\n\n    // Set version\n    const manifest = chrome.runtime.getManifest();\n    versionSpan.textContent = manifest.version;\n\n    console.log('Settings loaded successfully');\n  } catch (error) {\n    console.error('Error loading settings:', error);\n    showStatus('Error loading settings', 'error');\n  }\n}\n\n/**\n * Update device nickname\n */\nasync function updateNickname(): Promise<void> {\n  const nickname = deviceNicknameInput.value.trim();\n  \n  if (!nickname) {\n    showStatus('Please enter a device nickname', 'error');\n    return;\n  }\n\n  try {\n    await chrome.storage.sync.set({ deviceNickname: nickname });\n    \n    // Notify background script\n    chrome.runtime.sendMessage({\n      action: 'deviceNicknameChanged',\n      deviceNickname: nickname\n    });\n\n    showStatus('Device nickname updated successfully', 'success');\n  } catch (error) {\n    console.error('Error updating nickname:', error);\n    showStatus('Error updating device nickname', 'error');\n  }\n}\n\n/**\n * Save notification timeout\n */\nasync function saveNotificationTimeout(): Promise<void> {\n  const seconds = parseInt(notificationTimeoutInput.value, 10);\n  \n  if (isNaN(seconds) || seconds < 0 || seconds > 60) {\n    showStatus('Timeout must be between 0 and 60 seconds', 'error');\n    return;\n  }\n\n  const milliseconds = seconds * 1000;\n\n  try {\n    await chrome.storage.sync.set({ notificationTimeout: milliseconds });\n    showStatus('Notification timeout updated', 'success');\n  } catch (error) {\n    console.error('Error saving notification timeout:', error);\n    showStatus('Error saving notification timeout', 'error');\n  }\n}\n\n/**\n * Save auto-open links setting\n */\nasync function saveAutoOpenLinks(): Promise<void> {\n  const enabled = autoOpenLinksCheckbox.checked;\n\n  try {\n    await chrome.storage.sync.set({ autoOpenLinks: enabled });\n    \n    // Notify background script\n    chrome.runtime.sendMessage({\n      action: 'autoOpenLinksChanged',\n      autoOpenLinks: enabled\n    });\n\n    showStatus('Auto-open links setting updated', 'success');\n  } catch (error) {\n    console.error('Error saving auto-open links:', error);\n    showStatus('Error saving auto-open links setting', 'error');\n  }\n}\n\n/**\n * Save encryption password (to LOCAL storage only, not synced!)\n */\nasync function saveEncryptionPassword(): Promise<void> {\n  const password = encryptionPasswordInput.value.trim();\n\n  try {\n    await chrome.storage.local.set({\n      encryptionPassword: password\n    });\n\n    // Notify background script that encryption password changed\n    chrome.runtime.sendMessage({\n      action: 'encryptionPasswordChanged',\n      hasPassword: password.length > 0\n    });\n\n    if (password.length > 0) {\n      showStatus('Encryption password saved (stored locally only)', 'success');\n    } else {\n      showStatus('Encryption password cleared', 'success');\n    }\n  } catch (error) {\n    console.error('Error saving encryption password:', error);\n    showStatus('Error saving encryption password', 'error');\n  }\n}\n\n/**\n * Save debug mode setting\n */\nasync function saveDebugMode(): Promise<void> {\n  const enabled = debugModeCheckbox.checked;\n\n  try {\n    // Get current debug config\n    const result = await chrome.storage.local.get(['debugConfig']);\n\n    const debugConfig = (result.debugConfig as Record<string, unknown>) || {};\n    debugConfig.enabled = enabled;\n\n    await chrome.storage.local.set({ debugConfig });\n\n    // Notify background script\n    chrome.runtime.sendMessage({\n      action: 'debugModeChanged',\n      enabled: enabled\n    });\n\n    showStatus('Debug mode updated', 'success');\n  } catch (error) {\n    console.error('Error saving debug mode:', error);\n    showStatus('Error saving debug mode', 'error');\n  }\n}\n\n/**\n * Save all settings\n */\nasync function saveAllSettings(): Promise<void> {\n  try {\n    const nickname = deviceNicknameInput.value.trim();\n    const seconds = parseInt(notificationTimeoutInput.value, 10);\n    const autoOpen = autoOpenLinksCheckbox.checked;\n    const debug = debugModeCheckbox.checked;\n\n    // Validate\n    if (!nickname) {\n      showStatus('Please enter a device nickname', 'error');\n      return;\n    }\n\n    if (isNaN(seconds) || seconds < 0 || seconds > 60) {\n      showStatus('Timeout must be between 0 and 60 seconds', 'error');\n      return;\n    }\n\n    // Save to sync storage\n    await chrome.storage.sync.set({\n      deviceNickname: nickname,\n      notificationTimeout: seconds * 1000,\n      autoOpenLinks: autoOpen\n    });\n\n    // Save debug config to local storage\n    const result = await chrome.storage.local.get(['debugConfig']);\n\n    const debugConfig = (result.debugConfig as Record<string, unknown>) || {};\n    debugConfig.enabled = debug;\n    await chrome.storage.local.set({ debugConfig });\n\n    // Notify background script\n    chrome.runtime.sendMessage({\n      action: 'settingsChanged',\n      settings: {\n        deviceNickname: nickname,\n        notificationTimeout: seconds * 1000,\n        autoOpenLinks: autoOpen,\n        debugMode: debug\n      }\n    });\n\n    showStatus('All settings saved successfully!', 'success');\n  } catch (error) {\n    console.error('Error saving settings:', error);\n    showStatus('Error saving settings', 'error');\n  }\n}\n\n/**\n * Reset to default settings\n */\nasync function resetToDefaults(): Promise<void> {\n  if (!confirm('Are you sure you want to reset all settings to defaults?')) {\n    return;\n  }\n\n  try {\n    // Reset sync storage\n    await chrome.storage.sync.set({\n      deviceNickname: DEFAULT_SETTINGS.deviceNickname,\n      notificationTimeout: DEFAULT_SETTINGS.notificationTimeout,\n      autoOpenLinks: DEFAULT_SETTINGS.autoOpenLinks\n    });\n\n    // Reset debug config\n    const debugConfig = {\n      enabled: DEFAULT_SETTINGS.debugMode\n    };\n    await chrome.storage.local.set({ debugConfig });\n\n    // Reload settings\n    await loadSettings();\n\n    showStatus('Settings reset to defaults', 'success');\n  } catch (error) {\n    console.error('Error resetting settings:', error);\n    showStatus('Error resetting settings', 'error');\n  }\n}\n\n/**\n * Initialize page\n */\nfunction init(): void {\n  // Event listeners\n  updateNicknameButton.addEventListener('click', updateNickname);\n  saveSettingsButton.addEventListener('click', saveAllSettings);\n  resetSettingsButton.addEventListener('click', resetToDefaults);\n\n  // Auto-save on change\n  notificationTimeoutInput.addEventListener('change', () => {\n    const seconds = parseInt(notificationTimeoutInput.value, 10);\n    if (!isNaN(seconds) && seconds >= 0 && seconds <= 60) {\n      saveNotificationTimeout();\n    }\n  });\n\n  autoOpenLinksCheckbox.addEventListener('change', saveAutoOpenLinks);\n  encryptionPasswordInput.addEventListener('change', saveEncryptionPassword);\n  debugModeCheckbox.addEventListener('change', saveDebugMode);\n\n  // Load settings\n  loadSettings();\n}\n\n// Initialize on DOM load\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', init);\n} else {\n  init();\n}\n\n"],
  "mappings": "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",
  "names": ["showStatus"]
}
