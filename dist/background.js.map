{
  "version": 3,
  "sources": ["../src/lib/logging/index.ts", "../src/lib/perf/index.ts", "../src/lib/monitoring/index.ts", "../src/types/domain.ts", "../src/app/notifications/index.ts", "../src/lib/events/event-bus.ts", "../src/app/ws/client.ts", "../src/infrastructure/storage/storage.repository.ts", "../src/app/api/client.ts", "../src/infrastructure/storage/indexed-db.ts", "../src/app/session/index.ts", "../src/app/reconnect/index.ts", "../src/lib/crypto/index.ts", "../src/background/state.ts", "../src/background/utils.ts", "../src/background/state-machine.ts", "../src/lib/security/message-validation.ts", "../src/background/index.ts"],
  "sourcesContent": ["/* Logging and debug configuration (TypeScript)\r\n   Mirrors js/logging.js without changing behavior. */\r\n\r\nexport type LogLevel = \"DEBUG\" | \"INFO\" | \"WARN\" | \"ERROR\";\r\nexport type LogCategory =\r\n  | \"WEBSOCKET\"\r\n  | \"NOTIFICATIONS\"\r\n  | \"API\"\r\n  | \"STORAGE\"\r\n  | \"GENERAL\"\r\n  | \"PERFORMANCE\"\r\n  | \"ERROR\";\r\n\r\n// Persistent logging constants\r\nconst STORAGE_KEY = \"persistentDebugLogs\";\r\nconst MAX_PERSISTENT_LOGS = 5000; // Store the last 5000 log entries\r\n\r\nexport interface DebugConfig {\r\n  enabled: boolean;\r\n  categories: Record<LogCategory, boolean>;\r\n  logLevel: LogLevel;\r\n  maxLogEntries: number;\r\n  sanitizeData: boolean;\r\n}\r\n\r\n// DEBUG TOGGLE: Default to disabled to prevent unnecessary log accumulation\r\nexport const DEBUG_CONFIG: DebugConfig = {\r\n  enabled: false,\r\n  categories: {\r\n    WEBSOCKET: true,\r\n    NOTIFICATIONS: true,\r\n    API: true,\r\n    STORAGE: true,\r\n    GENERAL: true,\r\n    PERFORMANCE: true,\r\n    ERROR: true,\r\n  },\r\n  logLevel: \"DEBUG\",\r\n  maxLogEntries: 1000,\r\n  sanitizeData: true,\r\n};\r\n\r\nexport interface LogEntry {\r\n  timestamp: string;\r\n  category: LogCategory;\r\n  level: LogLevel;\r\n  message: string;\r\n  data: unknown | null;\r\n  error: { name: string; message: string; stack?: string } | null;\r\n}\r\n\r\nexport class DebugLogger {\r\n  private logs: LogEntry[] = [];\r\n  private startTime = Date.now();\r\n  private performanceMarkers = new Map<string, number>();\r\n\r\n  /**\r\n   * Rehydrate logs from persistent storage on startup\r\n   * This method loads logs from the previous session\r\n   */\r\n  async rehydrate(): Promise<void> {\r\n    try {\r\n      const result = await chrome.storage.local.get(STORAGE_KEY);\r\n      if (result[STORAGE_KEY] && Array.isArray(result[STORAGE_KEY])) {\r\n        this.logs = result[STORAGE_KEY];\r\n        console.log(\r\n          `[Logger] Rehydrated ${this.logs.length} logs from persistent storage.`,\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Logger] Failed to rehydrate logs:\", error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Flush logs to persistent storage\r\n   * This method saves the current in-memory logs with circular buffer logic\r\n   */\r\n  async flush(): Promise<void> {\r\n    try {\r\n      // Circular buffer: trim to MAX_PERSISTENT_LOGS before saving\r\n      if (this.logs.length > MAX_PERSISTENT_LOGS) {\r\n        this.logs = this.logs.slice(this.logs.length - MAX_PERSISTENT_LOGS);\r\n      }\r\n      await chrome.storage.local.set({ [STORAGE_KEY]: this.logs });\r\n    } catch (error) {\r\n      // Don't use debugLogger here to avoid potential infinite loop\r\n      console.error(\"[Logger] Failed to flush logs to storage:\", error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all logs from memory and persistent storage\r\n   * This method is called when the user clicks \"Clear All Logs\" in the debug dashboard\r\n   */\r\n  async clearLogs(): Promise<void> {\r\n    this.logs = [];\r\n    await this.flush();\r\n    this.log('GENERAL', 'INFO', 'Log buffer has been cleared by the user.');\r\n  }\r\n\r\n  private sanitize(data: unknown): unknown {\r\n    if (!DEBUG_CONFIG.sanitizeData) return data;\r\n    if (typeof data === \"string\") {\r\n      if (data.length > 20 && /^[a-zA-Z0-9_-]+$/.test(data)) {\r\n        return data.substring(0, 4) + \"***\" + data.substring(data.length - 4);\r\n      }\r\n      return data;\r\n    }\r\n    if (data && typeof data === \"object\") {\r\n      const sanitized: Record<string, unknown> | unknown[] = Array.isArray(data)\r\n        ? []\r\n        : {};\r\n      for (const key in data as Record<string, unknown>) {\r\n        if (\r\n          key.toLowerCase().includes(\"token\") ||\r\n          key.toLowerCase().includes(\"key\") ||\r\n          key.toLowerCase().includes(\"password\")\r\n        ) {\r\n          (sanitized as any)[key] = this.sanitize((data as any)[key]);\r\n        } else {\r\n          (sanitized as any)[key] = (data as any)[key];\r\n        }\r\n      }\r\n      return sanitized;\r\n    }\r\n    return data;\r\n  }\r\n\r\n  private getTimestamp(): string {\r\n    const now = new Date();\r\n    const elapsed = Date.now() - this.startTime;\r\n    return `${now.toISOString()} (+${elapsed}ms)`;\r\n  }\r\n\r\n  /**\r\n   * Format data for console output to avoid [object Object]\r\n   */\r\n  private formatDataForConsole(data: unknown): string {\r\n    if (typeof data === 'object' && data !== null) {\r\n      try {\r\n        return JSON.stringify(data, null, 2);\r\n      } catch {\r\n        return String(data);\r\n      }\r\n    }\r\n    return String(data ?? 'null');\r\n  }\r\n\r\n  /**\r\n   * Format error for console output\r\n   */\r\n  private formatErrorForConsole(error: Error | null): string {\r\n    if (!error) return 'null';\r\n    \r\n    if (error instanceof Error) {\r\n      return `${error.name}: ${error.message}`;\r\n    }\r\n    \r\n    // Handle non-Error objects (like WebSocket Event objects)\r\n    try {\r\n      return JSON.stringify(error, null, 2);\r\n    } catch {\r\n      return String(error);\r\n    }\r\n  }\r\n\r\n  log(\r\n    category: LogCategory,\r\n    level: LogLevel,\r\n    message: string,\r\n    data: unknown = null,\r\n    error: Error | null = null,\r\n  ) {\r\n    if (!DEBUG_CONFIG.enabled || !DEBUG_CONFIG.categories[category]) return;\r\n    const timestamp = this.getTimestamp();\r\n    const entry: LogEntry = {\r\n      timestamp,\r\n      category,\r\n      level,\r\n      message,\r\n      data: data ? this.sanitize(data) : null,\r\n      error: error\r\n        ? {\r\n          name: error.name,\r\n          message: error.message,\r\n          stack: (error as any).stack,\r\n        }\r\n        : null,\r\n    };\r\n    if (error && level === \"ERROR\") {\r\n      globalErrorTracker.trackError(\r\n        error,\r\n        { category, message, data: data ? this.sanitize(data) : null },\r\n        category,\r\n      );\r\n    }\r\n    this.logs.push(entry);\r\n    // Trimming is now handled by the periodic flush() method to avoid performance overhead\r\n\r\n    const prefix = `[${category}:${level}] ${timestamp}`;\r\n    const full = `${prefix} ${message}`;\r\n    const sanitized = data ? this.sanitize(data) : null;\r\n    switch (level) {\r\n    case \"ERROR\":\r\n      if (sanitized && error) {\r\n        console.error(full);\r\n        console.error(\"  Data:\", this.formatDataForConsole(sanitized));\r\n        console.error(\"  Error:\", this.formatErrorForConsole(error));\r\n      } else if (sanitized) {\r\n        console.error(full);\r\n        console.error(\"  Data:\", this.formatDataForConsole(sanitized));\r\n      } else if (error) {\r\n        console.error(full);\r\n        console.error(\"  Error:\", this.formatErrorForConsole(error));\r\n      } else {\r\n        console.error(full);\r\n      }\r\n      break;\r\n    case \"WARN\":\r\n      if (sanitized) {\r\n        console.warn(full);\r\n        console.warn(\"  Data:\", this.formatDataForConsole(sanitized));\r\n      } else {\r\n        console.warn(full);\r\n      }\r\n      break;\r\n    case \"INFO\":\r\n      if (sanitized) {\r\n        console.info(full);\r\n        console.info(\"  Data:\", this.formatDataForConsole(sanitized));\r\n      } else {\r\n        console.info(full);\r\n      }\r\n      break;\r\n    default:\r\n      if (sanitized) {\r\n        console.log(full);\r\n        console.log(\"  Data:\", sanitized);\r\n      } else {\r\n        console.log(full);\r\n      }\r\n    }\r\n  }\r\n\r\n  websocket(level: LogLevel, message: string, data?: unknown, error?: Error) {\r\n    this.log(\"WEBSOCKET\", level, message, data, error || null);\r\n  }\r\n  notifications(\r\n    level: LogLevel,\r\n    message: string,\r\n    data?: unknown,\r\n    error?: Error,\r\n  ) {\r\n    this.log(\"NOTIFICATIONS\", level, message, data, error || null);\r\n  }\r\n  api(level: LogLevel, message: string, data?: unknown, error?: Error) {\r\n    this.log(\"API\", level, message, data, error || null);\r\n  }\r\n  storage(level: LogLevel, message: string, data?: unknown, error?: Error) {\r\n    this.log(\"STORAGE\", level, message, data, error || null);\r\n  }\r\n  general(level: LogLevel, message: string, data?: unknown, error?: Error) {\r\n    this.log(\"GENERAL\", level, message, data, error || null);\r\n  }\r\n  performance(level: LogLevel, message: string, data?: unknown, error?: Error) {\r\n    this.log(\"PERFORMANCE\", level, message, data, error || null);\r\n  }\r\n  error(message: string, data?: unknown, error?: Error) {\r\n    this.log(\"ERROR\", \"ERROR\", message, data, error || null);\r\n  }\r\n\r\n  startTimer(name: string) {\r\n    this.performanceMarkers.set(name, Date.now());\r\n    this.performance(\"DEBUG\", `Timer started: ${name}`);\r\n  }\r\n  endTimer(name: string): number | null {\r\n    const start = this.performanceMarkers.get(name);\r\n    if (start) {\r\n      const duration = Date.now() - start;\r\n      this.performanceMarkers.delete(name);\r\n      this.performance(\"INFO\", `Timer ended: ${name}`, {\r\n        duration: `${duration}ms`,\r\n      });\r\n      return duration;\r\n    }\r\n    this.performance(\"WARN\", `Timer not found: ${name}`);\r\n    return null;\r\n  }\r\n  getRecentLogs(count = 50, category: LogCategory | null = null) {\r\n    let logs = this.logs;\r\n    if (category) logs = logs.filter((l) => l.category === category);\r\n    return logs.slice(-count);\r\n  }\r\n  exportLogs() {\r\n    return {\r\n      config: DEBUG_CONFIG,\r\n      logs: this.logs,\r\n      summary: {\r\n        totalLogs: this.logs.length,\r\n        categories: (\r\n          Object.keys(DEBUG_CONFIG.categories) as LogCategory[]\r\n        ).reduce((acc: Record<string, number>, cat) => {\r\n          acc[cat] = this.logs.filter((l) => l.category === cat).length;\r\n          return acc;\r\n        }, {}),\r\n        errors: this.logs.filter((l) => l.level === \"ERROR\").length,\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport const debugLogger = new DebugLogger();\r\n\r\n// Rehydrate logs from persistent storage on startup\r\n// We don't await this because we can't have a top-level await in a module\r\ndebugLogger.rehydrate();\r\n\r\nexport class DebugConfigManager {\r\n  async loadConfig() {\r\n    try {\r\n      debugLogger.storage(\"DEBUG\", \"Loading debug configuration from storage\");\r\n      const result = await chrome.storage.local.get([\"debugConfig\"]);\r\n      if (result.debugConfig) {\r\n        Object.assign(DEBUG_CONFIG, result.debugConfig as Partial<DebugConfig>);\r\n        debugLogger.storage(\r\n          \"INFO\",\r\n          \"Debug configuration loaded from storage\",\r\n          DEBUG_CONFIG,\r\n        );\r\n      } else {\r\n        debugLogger.storage(\r\n          \"INFO\",\r\n          \"No stored debug configuration found - using defaults\",\r\n          DEBUG_CONFIG,\r\n        );\r\n      }\r\n    } catch (error: any) {\r\n      debugLogger.storage(\r\n        \"ERROR\",\r\n        \"Failed to load debug configuration\",\r\n        null,\r\n        error,\r\n      );\r\n    }\r\n  }\r\n  async saveConfig() {\r\n    try {\r\n      debugLogger.storage(\"DEBUG\", \"Saving debug configuration to storage\");\r\n      await chrome.storage.local.set({ debugConfig: DEBUG_CONFIG });\r\n      debugLogger.storage(\"INFO\", \"Debug configuration saved to storage\");\r\n    } catch (error: any) {\r\n      debugLogger.storage(\r\n        \"ERROR\",\r\n        \"Failed to save debug configuration\",\r\n        null,\r\n        error,\r\n      );\r\n    }\r\n  }\r\n  async updateConfig(updates: Partial<DebugConfig>) {\r\n    Object.assign(DEBUG_CONFIG, updates);\r\n    await this.saveConfig();\r\n    debugLogger.general(\"INFO\", \"Debug configuration updated\", updates);\r\n  }\r\n  toggleCategory(category: LogCategory) {\r\n    if (\r\n      Object.prototype.hasOwnProperty.call(DEBUG_CONFIG.categories, category)\r\n    ) {\r\n      DEBUG_CONFIG.categories[category] = !DEBUG_CONFIG.categories[category];\r\n      void this.saveConfig();\r\n      debugLogger.general(\"INFO\", `Debug category ${category} toggled`, {\r\n        category,\r\n        enabled: DEBUG_CONFIG.categories[category],\r\n      });\r\n    }\r\n  }\r\n  setLogLevel(level: LogLevel) {\r\n    const valid: LogLevel[] = [\"DEBUG\", \"INFO\", \"WARN\", \"ERROR\"];\r\n    if (valid.includes(level)) {\r\n      DEBUG_CONFIG.logLevel = level;\r\n      void this.saveConfig();\r\n      debugLogger.general(\"INFO\", `Debug log level set to ${level}`);\r\n    }\r\n  }\r\n  getConfig(): DebugConfig {\r\n    return { ...DEBUG_CONFIG };\r\n  }\r\n  resetConfig() {\r\n    const def: DebugConfig = {\r\n      enabled: true,\r\n      categories: {\r\n        WEBSOCKET: true,\r\n        NOTIFICATIONS: true,\r\n        API: true,\r\n        STORAGE: true,\r\n        GENERAL: true,\r\n        PERFORMANCE: true,\r\n        ERROR: true,\r\n      },\r\n      logLevel: \"DEBUG\",\r\n      maxLogEntries: 1000,\r\n      sanitizeData: true,\r\n    };\r\n    Object.assign(DEBUG_CONFIG, def);\r\n    void this.saveConfig();\r\n    debugLogger.general(\"INFO\", \"Debug configuration reset to defaults\");\r\n  }\r\n}\r\n\r\nexport const debugConfigManager = new DebugConfigManager();\r\nvoid debugConfigManager.loadConfig();\r\n\r\nexport class GlobalErrorTracker {\r\n  private errors: Array<{\r\n    timestamp: string;\r\n    category: string;\r\n    message: string;\r\n    name: string;\r\n    stack?: string;\r\n    context: any;\r\n  }> = [];\r\n  private errorCounts = new Map<string, number>();\r\n  private criticalErrors: any[] = [];\r\n\r\n  trackError(error: Error, context: any = {}, category = \"GENERAL\") {\r\n    const entry = {\r\n      timestamp: new Date().toISOString(),\r\n      category,\r\n      message: error.message,\r\n      name: error.name,\r\n      stack: (error as any).stack,\r\n      context,\r\n    };\r\n    this.errors.push(entry);\r\n    const count = (this.errorCounts.get(category) || 0) + 1;\r\n    this.errorCounts.set(category, count);\r\n    if (count >= 5) this.criticalErrors.push(entry);\r\n  }\r\n  getErrorSummary() {\r\n    const byCat: Record<string, number> = {};\r\n    this.errorCounts.forEach((v, k) => (byCat[k] = v));\r\n    return {\r\n      total: this.errors.length,\r\n      byCategory: byCat,\r\n      critical: this.criticalErrors.length,\r\n    };\r\n  }\r\n  exportErrorData() {\r\n    return { errors: this.errors.slice(-200), summary: this.getErrorSummary() };\r\n  }\r\n}\r\n\r\nexport const globalErrorTracker = new GlobalErrorTracker();\r\n\r\n// Attach listeners in SW environment; swallow if not available\r\ntry {\r\n  self.addEventListener(\"error\", (event: ErrorEvent) => {\r\n    globalErrorTracker.trackError(\r\n      (event as any).error || new Error(event.message),\r\n      {\r\n        filename: event.filename,\r\n        lineno: event.lineno,\r\n        colno: event.colno,\r\n        type: \"unhandled\",\r\n      },\r\n      \"GLOBAL\",\r\n    );\r\n  });\r\n} catch (error) {\r\n  // Log global unhandled rejection handler setup failure - non-critical for main functionality\r\n  console.warn('Failed to set up global unhandled rejection handler:', error);\r\n}\r\ntry {\r\n  self.addEventListener(\r\n    \"unhandledrejection\",\r\n    (event: PromiseRejectionEvent) => {\r\n      globalErrorTracker.trackError(\r\n        (event as any).reason || new Error(\"Unhandled promise rejection\"),\r\n        { type: \"unhandled_promise\" },\r\n        \"GLOBAL\",\r\n      );\r\n    },\r\n  );\r\n} catch {\r\n  /* noop */\r\n}\r\n", "/* Performance monitoring (TypeScript)\r\n   Mirrors js/performance.js */\r\n\r\nexport class PerformanceMonitor {\r\n  private metrics = new Map<string, number>();\r\n  private notificationTimeline: Array<{ ts: number; event: string }>= [];\r\n  private websocketMetrics = { connectionAttempts: 0, successfulConnections: 0, messagesReceived: 0, messagesProcessed: 0, reconnectionAttempts: 0, lastConnectionTime: null as number | null, totalDowntime: 0 };\r\n  private notificationMetrics = { pushesReceived: 0, notificationsCreated: 0, notificationsFailed: 0, unknownTypes: 0 };\r\n  private healthChecks = { success: 0, failure: 0, lastCheck: null as number | null };\r\n  private quality = { disconnections: 0, permanentErrors: 0, consecutiveFailures: 0 };\r\n  private timers: Record<string, number> = {};\r\n\r\n  record(metric: string, value = 1) { const cur = this.metrics.get(metric) || 0; this.metrics.set(metric, cur + value); }\r\n  start(name: string) { this.timers[name] = Date.now(); }\r\n  end(name: string) { if (this.timers[name]) { const d = Date.now() - this.timers[name]; delete this.timers[name]; this.record(`timer:${name}`, d); return d; } return null; }\r\n  recordWebSocketConnection(success: boolean) { this.websocketMetrics.connectionAttempts++; if (success) { this.websocketMetrics.successfulConnections++; this.websocketMetrics.lastConnectionTime = Date.now(); this.quality.consecutiveFailures = 0; } }\r\n  recordWebSocketMessage(received = true, processed = false) { if (received) this.websocketMetrics.messagesReceived++; if (processed) this.websocketMetrics.messagesProcessed++; }\r\n  recordWebSocketReconnection() { this.websocketMetrics.reconnectionAttempts++; this.quality.consecutiveFailures++; }\r\n  recordHealthCheckSuccess() { this.healthChecks.success++; this.healthChecks.lastCheck = Date.now(); this.quality.consecutiveFailures = 0; }\r\n  recordHealthCheckFailure() { this.healthChecks.failure++; this.healthChecks.lastCheck = Date.now(); this.quality.consecutiveFailures++; }\r\n  recordDisconnection() { this.quality.disconnections++; }\r\n  recordPermanentError() { this.quality.permanentErrors++; }\r\n  recordNotification(event: string) { this.notificationTimeline.push({ ts: Date.now(), event }); if (this.notificationTimeline.length > 200) this.notificationTimeline.shift(); }\r\n  recordPushReceived() { this.notificationMetrics.pushesReceived++; }\r\n  recordNotificationCreated() { this.notificationMetrics.notificationsCreated++; }\r\n  recordNotificationFailed() { this.notificationMetrics.notificationsFailed++; }\r\n  recordUnknownPushType() { this.notificationMetrics.unknownTypes++; }\r\n  getPerformanceSummary() { return { websocket: this.websocketMetrics, health: this.healthChecks, quality: this.quality, notifications: this.notificationMetrics, metrics: Object.fromEntries(this.metrics) as Record<string, number> }; }\r\n  getQualityMetrics() { return this.quality; }\r\n  exportPerformanceData() { return { summary: this.getPerformanceSummary(), timeline: this.notificationTimeline.slice(-200) }; }\r\n}\r\n\r\nexport const performanceMonitor = new PerformanceMonitor();\r\n\r\n", "/* Monitoring (TypeScript)\r\n   Mirrors js/monitoring.js */\r\n\r\nimport { debugLogger } from '../logging';\r\n\r\nexport class InitializationTracker {\r\n  private initializations: Array<{ source: string; timestamp: string }> = [];\r\n  private stats: Record<string, number> = { onInstalled: 0, onStartup: 0, onAlarm: 0, onMessage: 0, manual: 0 };\r\n\r\n  recordInitialization(source: string) {\r\n    this.initializations.push({ source, timestamp: new Date().toISOString() });\r\n    if (this.stats[source] !== undefined) this.stats[source]++;\r\n  }\r\n  exportData() { return { initializations: this.initializations.slice(-100), stats: { ...this.stats } }; }\r\n}\r\n\r\nexport const initTracker = new InitializationTracker();\r\n\r\nexport class WebSocketStateMonitor {\r\n  private stateHistory: Array<{ timestamp: number; state: string | null; duration: number }>= [];\r\n  private lastStateCheck = Date.now();\r\n  private monitoringInterval: ReturnType<typeof setInterval> | null = null;\r\n  private alertThresholds = { slowReceive: 15000 };\r\n\r\n  recordStateChange(newState: string) {\r\n    const now = Date.now();\r\n    const prev = this.stateHistory[this.stateHistory.length - 1];\r\n    const duration = prev ? now - prev.timestamp : 0;\r\n    this.stateHistory.push({ timestamp: now, state: newState, duration });\r\n    if (this.stateHistory.length > 200) this.stateHistory.shift();\r\n  }\r\n  getStateReport() {\r\n    const currentState = (globalThis as any).websocket && typeof (globalThis as any).websocket.readyState === 'number'\r\n      ? ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'][(globalThis as any).websocket.readyState] : 'NULL';\r\n    return { currentState, lastCheck: new Date(this.lastStateCheck).toISOString(), historyLength: this.stateHistory.length };\r\n  }\r\n  startMonitoring() {\r\n    if (this.monitoringInterval) return;\r\n    this.monitoringInterval = setInterval(() => {\r\n      this.lastStateCheck = Date.now();\r\n      const state = (globalThis as any).websocket ? (globalThis as any).websocket.readyState : null;\r\n      try { (globalThis as any).debugLogger?.websocket('DEBUG', 'WebSocket state check', { state }); } catch (error) {\r\n        // Log the error with context - this is a monitoring operation that shouldn't fail the main flow\r\n        debugLogger.general('WARN', 'Failed to log WebSocket state check', null, error as Error);\r\n      }\r\n    }, 30000);\r\n  }\r\n  stopMonitoring() { if (this.monitoringInterval) { clearInterval(this.monitoringInterval); this.monitoringInterval = null; } }\r\n}\r\n\r\nexport const wsStateMonitor = new WebSocketStateMonitor();\r\n\r\n", "/************************************\r\n * Domain types for TypeScript plan *\r\n ************************************/\r\n\r\nexport type ISO8601 = string;\r\n\r\n// ============================================================================\r\n// User and Device Types\r\n// ============================================================================\r\n\r\nexport interface User {\r\n  iden: string;\r\n  email?: string;\r\n  name?: string;\r\n  image_url?: string;\r\n  max_upload_size?: number;\r\n}\r\n\r\nexport interface Device {\r\n  iden: string;\r\n  nickname?: string;\r\n  manufacturer?: string;\r\n  model?: string;\r\n  active?: boolean;\r\n  created?: number;\r\n  modified?: number;\r\n  push_token?: string;\r\n  app_version?: number;\r\n  type?: string;\r\n  kind?: string;\r\n  icon?: string;\r\n  has_sms?: boolean;\r\n}\r\n\r\n// ============================================================================\r\n// Push Types\r\n// ============================================================================\r\n\r\nexport interface PushBase {\r\n  iden?: string;\r\n  active?: boolean;\r\n  created?: number;\r\n  modified?: number;\r\n  dismissed?: boolean;\r\n  direction?: 'self' | 'incoming' | 'outgoing';\r\n  sender_iden?: string;\r\n  sender_email?: string;\r\n  sender_name?: string;\r\n  receiver_iden?: string;\r\n  receiver_email?: string;\r\n  target_device_iden?: string;\r\n  source_device_iden?: string;\r\n  encrypted?: boolean;\r\n  ciphertext?: string;\r\n}\r\n\r\nexport interface LinkPush extends PushBase {\r\n  type: 'link';\r\n  title?: string;\r\n  body?: string;\r\n  url: string;\r\n}\r\n\r\nexport interface NotePush extends PushBase {\r\n  type: 'note';\r\n  title?: string;\r\n  body?: string;\r\n}\r\n\r\nexport interface FilePush extends PushBase {\r\n  type: 'file';\r\n  file_name?: string;\r\n  file_type?: string;\r\n  file_url?: string;\r\n  body?: string;\r\n  image_url?: string;\r\n  image_width?: number;\r\n  image_height?: number;\r\n}\r\n\r\nexport interface MirrorPush extends PushBase {\r\n  type: 'mirror';\r\n  title?: string;\r\n  body?: string;\r\n  icon?: string;\r\n  application_name?: string;\r\n  package_name?: string;\r\n  notification_id?: string;\r\n  notification_tag?: string;\r\n  source_user_iden?: string;\r\n}\r\n\r\nexport interface DismissalPush extends PushBase {\r\n  type: 'dismissal';\r\n  package_name?: string;\r\n  notification_id?: string;\r\n  notification_tag?: string;\r\n  source_user_iden?: string;\r\n}\r\n\r\nexport interface SmsChangedPush extends PushBase {\r\n  type: 'sms_changed';\r\n  notifications?: Array<{\r\n    title?: string;\r\n    body?: string;\r\n    timestamp?: number;\r\n    image_url?: string;\r\n  }>;\r\n}\r\n\r\nexport type Push = LinkPush | NotePush | FilePush | MirrorPush | DismissalPush | SmsChangedPush;\n\n// ============================================================================\n// Chat Types\n// ============================================================================\n\n/**\n * Represents a chat/conversation with a contact\n * From /v2/chats API endpoint\n */\nexport interface Chat {\n  iden: string;\n  active: boolean;\n  created: number;\n  modified: number;\n  muted?: boolean;\n  with: {\n    email: string;\n    email_normalized: string;\n    iden?: string;\n    image_url?: string;\n    name?: string;\n    type: \"user\" | \"email\";\n  };\n}\n\n// ============================================================================\n// Session and State Types\n// ============================================================================\n\nexport interface SessionCache {\n  userInfo: User | null;\n  devices: Device[];\n  recentPushes: Push[];\n  chats: Chat[]; // \u2190 ADD THIS LINE\n  isAuthenticated: boolean;\n  lastUpdated: number;\n  autoOpenLinks: boolean;\n  deviceNickname: string;\n}\n\r\nexport interface InitializationState {\r\n  inProgress: boolean;\r\n  completed: boolean;\r\n  error: Error | null;\r\n  timestamp: number | null;\r\n}\r\n\r\n// ============================================================================\r\n// WebSocket Types\r\n// ============================================================================\r\n\r\nexport enum WS_READY_STATE {\r\n  CONNECTING = 0,\r\n  OPEN = 1,\r\n  CLOSING = 2,\r\n  CLOSED = 3\r\n}\r\n\r\nexport interface WebSocketTickleMessage {\r\n  type: 'tickle';\r\n  subtype: 'push' | 'device';\r\n}\r\n\r\nexport interface WebSocketPushMessage {\r\n  type: 'push';\r\n  push: Push;\r\n}\r\n\r\nexport interface WebSocketNopMessage {\r\n  type: 'nop';\r\n}\r\n\r\nexport type WebSocketMessage = WebSocketTickleMessage | WebSocketPushMessage | WebSocketNopMessage;\r\n\r\n// ============================================================================\r\n// API Response Types\r\n// ============================================================================\r\n\r\nexport interface APIResponse<T> {\r\n  data?: T;\r\n  error?: {\r\n    type: string;\r\n    message: string;\r\n    cat?: string;\r\n  };\r\n}\r\n\r\nexport interface DevicesResponse {\r\n  devices: Device[];\r\n}\r\n\r\nexport interface PushesResponse {\r\n  pushes: Push[];\r\n}\r\n\r\nexport type UserResponse = User;\r\n\r\n// ============================================================================\r\n// Configuration Types\r\n// ============================================================================\r\n\r\nexport interface DebugConfig {\r\n  enabled: boolean;\r\n  categories: Record<string, boolean>;\r\n  logLevel: 'DEBUG' | 'INFO' | 'WARN' | 'ERROR';\r\n  maxLogEntries: number;\r\n  sanitizeData: boolean;\r\n}\r\n\r\nexport interface StorageConfig {\r\n  apiKey?: string;\r\n  deviceIden?: string;\r\n  deviceNickname?: string;\r\n  autoOpenLinks?: boolean;\r\n  notificationTimeout?: number;\r\n  debugConfig?: DebugConfig;\r\n}\r\n\r\n// ============================================================================\r\n// Chrome Message Types\r\n// ============================================================================\r\n\r\nexport enum MessageAction {\r\n  GET_SESSION_DATA = 'getSessionData',\r\n  API_KEY_CHANGED = 'apiKeyChanged',\r\n  SESSION_DATA_UPDATED = 'sessionDataUpdated',\r\n  PUSHES_UPDATED = 'pushesUpdated',\r\n  SETTINGS_CHANGED = 'settingsChanged',\r\n  LOGOUT = 'logout',\r\n  REFRESH_SESSION = 'refreshSession',\r\n  UPDATE_DEVICE_NICKNAME = 'updateDeviceNickname',\r\n  LOG = 'log',\r\n  SEND_PUSH = 'sendPush',\r\n  GET_NOTIFICATION_DATA = 'getNotificationData',\r\n  CLEAR_ALL_LOGS = 'clearAllLogs',\r\n  UPDATE_DEBUG_CONFIG = 'updateDebugConfig',\r\n  EXPORT_DEBUG_DATA = 'exportDebugData',\r\n  GET_DEBUG_SUMMARY = 'getDebugSummary',\r\n  CONNECTION_STATE_CHANGED = 'connectionStateChanged',\r\n  AUTO_OPEN_LINKS_CHANGED = 'autoOpenLinksChanged',\r\n  ENCRYPTION_PASSWORD_CHANGED = 'encryptionPasswordChanged',\r\n  DEBUG_MODE_CHANGED = 'debugModeChanged',\r\n}\r\n\r\nexport interface GetSessionDataMessage {\r\n  action: MessageAction.GET_SESSION_DATA;\r\n}\r\n\r\nexport interface SessionDataResponse {\n  isAuthenticated: boolean;\n  userInfo: User | null;\n  devices: Device[];\n  recentPushes: Push[];\n  chats: Chat[]; // \u2190 ADD THIS\n  autoOpenLinks: boolean;\n  deviceNickname: string;\n  websocketConnected?: boolean;\n}\n\r\nexport interface ApiKeyChangedMessage {\r\n  action: MessageAction.API_KEY_CHANGED;\r\n  apiKey: string;\r\n  deviceNickname?: string;\r\n}\r\n\r\nexport interface SessionDataUpdatedMessage {\r\n  action: MessageAction.SESSION_DATA_UPDATED;\r\n  isAuthenticated: boolean;\r\n  userInfo?: User | null;\r\n  devices?: Device[];\r\n  recentPushes?: Push[];\r\n  autoOpenLinks?: boolean;\r\n  deviceNickname?: string;\r\n}\r\n\r\nexport interface PushesUpdatedMessage {\r\n  action: MessageAction.PUSHES_UPDATED;\r\n  pushes: Push[];\r\n}\r\n\r\nexport interface SettingsChangedMessage {\r\n  action: MessageAction.SETTINGS_CHANGED;\r\n  autoOpenLinks?: boolean;\r\n  notificationTimeout?: number;\r\n}\r\n\r\nexport interface LogoutMessage {\r\n  action: MessageAction.LOGOUT;\r\n}\r\n\r\nexport interface RefreshSessionMessage {\r\n  action: MessageAction.REFRESH_SESSION;\r\n}\r\n\r\nexport interface UpdateDeviceNicknameMessage {\r\n  action: MessageAction.UPDATE_DEVICE_NICKNAME;\r\n  nickname: string;\r\n}\r\n\r\nexport type ChromeMessage =\r\n  | GetSessionDataMessage\r\n  | ApiKeyChangedMessage\r\n  | SessionDataUpdatedMessage\r\n  | PushesUpdatedMessage\r\n  | SettingsChangedMessage\r\n  | LogoutMessage\r\n  | RefreshSessionMessage\r\n  | UpdateDeviceNicknameMessage;\r\n\r\n// ============================================================================\r\n// Type Guards\r\n// ============================================================================\r\n\r\nexport function isLinkPush(push: Push): push is LinkPush {\r\n  return push.type === 'link';\r\n}\r\n\r\nexport function isNotePush(push: Push): push is NotePush {\r\n  return push.type === 'note';\r\n}\r\n\r\nexport function isFilePush(push: Push): push is FilePush {\r\n  return push.type === 'file';\r\n}\r\n\r\nexport function isMirrorPush(push: Push): push is MirrorPush {\r\n  return push.type === 'mirror';\r\n}\r\n\r\nexport function isDismissalPush(push: Push): push is DismissalPush {\r\n  return push.type === 'dismissal';\r\n}\r\n\r\nexport function isTickleMessage(msg: WebSocketMessage): msg is WebSocketTickleMessage {\r\n  return msg.type === 'tickle';\r\n}\r\n\r\nexport function isPushMessage(msg: WebSocketMessage): msg is WebSocketPushMessage {\r\n  return msg.type === 'push';\r\n}\r\n\r\nexport function isNopMessage(msg: WebSocketMessage): msg is WebSocketNopMessage {\r\n  return msg.type === 'nop';\r\n}\r\n\r\n// ============================================================================\r\n// Validation Helpers\r\n// ============================================================================\r\n\r\nexport function isValidPush(push: unknown): push is Push {\r\n  if (!push || typeof push !== 'object') return false;\r\n  const p = push as Partial<Push>;\r\n  return typeof p.type === 'string' && ['link', 'note', 'file', 'mirror', 'dismissal'].includes(p.type);\r\n}\r\n\r\nexport function isValidDevice(device: unknown): device is Device {\r\n  if (!device || typeof device !== 'object') return false;\r\n  const d = device as Partial<Device>;\r\n  return typeof d.iden === 'string' && d.iden.length > 0;\r\n}\r\n\r\nexport function isValidUser(user: unknown): user is User {\r\n  if (!user || typeof user !== 'object') return false;\r\n  const u = user as Partial<User>;\r\n  return typeof u.iden === 'string' && u.iden.length > 0;\r\n}\r\n\r\n", "import { debugLogger } from \"../../lib/logging\";\r\nimport { performanceMonitor } from \"../../lib/perf\";\r\n\r\n// Track last disconnection notification to avoid spam\r\nlet lastDisconnectionNotification = 0;\r\nconst DISCONNECTION_NOTIFICATION_COOLDOWN = 300000; // 5 minutes\r\n\r\n/**\r\n * Helper function to create notification with auto-dismiss\r\n */\r\nexport function createNotificationWithTimeout(\r\n  notificationId: string,\r\n  options: chrome.notifications.NotificationCreateOptions,\r\n  callback?: (id?: string) => void,\r\n  timeoutMs?: number,\r\n): void {\r\n  // Get ABSOLUTE URL for the icon - service workers need absolute paths!\r\n  const iconUrl = chrome.runtime.getURL(\"icons/icon128.png\");\r\n\r\n  // Create CLEAN options with ONLY the properties we want\r\n  const safeOptions: chrome.notifications.NotificationCreateOptions = {\r\n    type: \"basic\",\r\n    iconUrl: iconUrl, // Use absolute URL\r\n    title: options.title || \"Pushbullet\",\r\n    message: options.message || \"\",\r\n    priority: options.priority || 1,\r\n  };\r\n\r\n  // Log what we're creating\r\n  debugLogger.notifications(\r\n    \"DEBUG\",\r\n    \"Creating notification with safe options\",\r\n    {\r\n      notificationId,\r\n      iconUrl,\r\n      title: safeOptions.title,\r\n      messageLength: safeOptions.message?.length || 0,\r\n    },\r\n  );\r\n\r\n  chrome.notifications.create(notificationId, safeOptions, (createdId) => {\r\n    // Check for errors\r\n    if (chrome.runtime.lastError) {\r\n      debugLogger.notifications(\"ERROR\", \"Notification creation error\", {\r\n        error: chrome.runtime.lastError.message,\r\n        notificationId,\r\n      });\r\n    }\r\n\r\n    if (callback) callback(createdId);\r\n\r\n    // Auto-dismiss logic\r\n    try {\r\n      const timeout = timeoutMs !== undefined ? timeoutMs : 10000; // Default 10 seconds\r\n      if (typeof timeout === \"number\" && timeout > 0) {\r\n        setTimeout(() => {\r\n          chrome.notifications.clear(createdId || notificationId, () => {});\r\n        }, timeout);\r\n      }\r\n    } catch (error) {\r\n      debugLogger.notifications(\r\n        \"ERROR\",\r\n        \"Failed to set notification timeout\",\r\n        {\r\n          error: (error as Error).message,\r\n        },\r\n        error as Error,\r\n      );\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Check if we should show a disconnection notification\r\n */\r\nexport function checkDisconnectionNotification(): void {\r\n  const now = Date.now();\r\n  const timeSinceLastNotification = now - lastDisconnectionNotification;\r\n\r\n  // Only notify if cooldown period has passed\r\n  if (timeSinceLastNotification < DISCONNECTION_NOTIFICATION_COOLDOWN) {\r\n    debugLogger.general(\r\n      \"DEBUG\",\r\n      \"Disconnection notification suppressed - cooldown active\",\r\n      {\r\n        timeSinceLastNotification: `${Math.round(timeSinceLastNotification / 1000)}s`,\r\n        cooldownPeriod: `${DISCONNECTION_NOTIFICATION_COOLDOWN / 1000}s`,\r\n      },\r\n    );\r\n    return;\r\n  }\r\n\r\n  // Check if we've been disconnected for threshold period\r\n  const qualityMetrics = performanceMonitor.getQualityMetrics();\r\n  if (qualityMetrics.consecutiveFailures >= 3) {\r\n    showDisconnectionNotification();\r\n    lastDisconnectionNotification = now;\r\n  }\r\n}\r\n\r\n/**\r\n * Show disconnection notification\r\n */\r\nexport function showDisconnectionNotification(): void {\r\n  createNotificationWithTimeout(\r\n    \"pushbullet-disconnected\",\r\n    {\r\n      type: \"basic\",\r\n      iconUrl: \"icons/icon128.png\",\r\n      title: \"Pushbullet Connection Issue\",\r\n      message: \"Real-time push notifications may be delayed. Reconnecting...\",\r\n      priority: 1,\r\n    },\r\n    (notificationId) => {\r\n      debugLogger.general(\"INFO\", \"Disconnection notification shown\", {\r\n        notificationId,\r\n      });\r\n    },\r\n  );\r\n}\r\n\r\n/**\r\n * Show permanent WebSocket error notification\r\n */\r\nexport function showPermanentWebSocketError(closeInfo: {\r\n  code: number;\r\n  reason?: string;\r\n  wasClean?: boolean;\r\n}): void {\r\n  const title = \"Pushbullet requires attention\";\r\n  const message =\r\n    `Real-time connection stopped (code ${closeInfo.code}). ${closeInfo.reason || \"\"}`.trim();\r\n\r\n  createNotificationWithTimeout(\r\n    \"pushbullet-permanent-error\",\r\n    {\r\n      type: \"basic\",\r\n      iconUrl: \"icons/icon128.png\",\r\n      title,\r\n      message,\r\n      priority: 2,\r\n    },\r\n    () => {},\r\n  );\r\n\r\n  try {\r\n    chrome.action.setBadgeBackgroundColor({ color: \"#d93025\" });\r\n    chrome.action.setBadgeText({ text: \"ERR\" });\r\n  } catch (error) {\r\n    // Log badge setting errors - these are non-critical UI updates\r\n    debugLogger.general(\r\n      \"WARN\",\r\n      \"Failed to set error badge\",\r\n      null,\r\n      error as Error,\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Clear error badge\r\n */\r\nexport function clearErrorBadge(): void {\r\n  try {\r\n    chrome.action.setBadgeText({ text: \" \" });\r\n  } catch (error) {\r\n    // Log badge clearing errors - these are non-critical UI updates\r\n    debugLogger.general(\r\n      \"WARN\",\r\n      \"Failed to clear error badge\",\r\n      null,\r\n      error as Error,\r\n    );\r\n  }\r\n}\r\n", "/**\n * Event Bus Pattern\n * \n * This module implements a simple event bus for decoupling components.\n * Components can emit events without knowing who (if anyone) is listening.\n * \n * Benefits:\n * - Decoupling: Components don't need to know about each other\n * - Flexibility: Easy to add/remove listeners\n * - Testability: Easy to test components in isolation\n * \n * Example:\n * ```typescript\n * // Component A emits an event\n * globalEventBus.emit('user:login', { userId: 123 });\n * \n * // Component B listens for the event\n * globalEventBus.on('user:login', (data) => {\n *   console.log('User logged in:', data.userId);\n * });\n * ```\n */\n\n/**\n * Listener function type\n * Can receive optional data of any type\n */\ntype Listener = (data?: any) => void;\n\n/**\n * Event Bus Class\n * \n * Manages event listeners and event emission.\n * Uses a Map to store listeners for each event type.\n */\nclass EventBus {\n  /**\n   * Map of event names to sets of listener functions\n   * Using Set ensures each listener is only registered once\n   */\n  private listeners = new Map<string, Set<Listener>>();\n\n  /**\n   * Register a listener for an event\n   * \n   * @param event - Event name (e.g., 'websocket:connected')\n   * @param listener - Function to call when event is emitted\n   * \n   * @example\n   * ```typescript\n   * globalEventBus.on('websocket:connected', () => {\n   *   console.log('WebSocket connected!');\n   * });\n   * ```\n   */\n  on(event: string, listener: Listener): void {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, new Set());\n    }\n    this.listeners.get(event)!.add(listener);\n  }\n\n  /**\n   * Remove a listener for an event\n   * \n   * @param event - Event name\n   * @param listener - Listener function to remove\n   * \n   * @example\n   * ```typescript\n   * const handler = () => console.log('Connected');\n   * globalEventBus.on('websocket:connected', handler);\n   * globalEventBus.off('websocket:connected', handler);\n   * ```\n   */\n  off(event: string, listener: Listener): void {\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      eventListeners.delete(listener);\n      // Clean up empty sets\n      if (eventListeners.size === 0) {\n        this.listeners.delete(event);\n      }\n    }\n  }\n\n  /**\n   * Emit an event to all registered listeners\n   * \n   * @param event - Event name\n   * @param data - Optional data to pass to listeners\n   * \n   * @example\n   * ```typescript\n   * globalEventBus.emit('websocket:message', { \n   *   type: 'push', \n   *   data: { title: 'Hello' } \n   * });\n   * ```\n   */\n  emit(event: string, data?: any): void {\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      // Call each listener with the data\n      eventListeners.forEach(listener => {\n        try {\n          listener(data);\n        } catch (error) {\n          // Log errors but don't stop other listeners\n          console.error(`Error in event listener for '${event}':`, error);\n        }\n      });\n    }\n  }\n\n  /**\n   * Register a one-time listener for an event\n   * The listener will be automatically removed after being called once\n   * \n   * @param event - Event name\n   * @param listener - Function to call when event is emitted\n   * \n   * @example\n   * ```typescript\n   * globalEventBus.once('websocket:connected', () => {\n   *   console.log('Connected for the first time!');\n   * });\n   * ```\n   */\n  once(event: string, listener: Listener): void {\n    const onceWrapper = (data?: any) => {\n      listener(data);\n      this.off(event, onceWrapper);\n    };\n    this.on(event, onceWrapper);\n  }\n\n  /**\n   * Remove all listeners for an event\n   * If no event is specified, removes all listeners for all events\n   * \n   * @param event - Optional event name. If not provided, clears all listeners\n   * \n   * @example\n   * ```typescript\n   * // Remove all listeners for a specific event\n   * globalEventBus.removeAllListeners('websocket:connected');\n   * \n   * // Remove all listeners for all events\n   * globalEventBus.removeAllListeners();\n   * ```\n   */\n  removeAllListeners(event?: string): void {\n    if (event) {\n      this.listeners.delete(event);\n    } else {\n      this.listeners.clear();\n    }\n  }\n\n  /**\n   * Get the number of listeners for an event\n   * \n   * @param event - Event name\n   * @returns Number of listeners registered for the event\n   * \n   * @example\n   * ```typescript\n   * const count = globalEventBus.listenerCount('websocket:connected');\n   * console.log(`${count} listeners registered`);\n   * ```\n   */\n  listenerCount(event: string): number {\n    const eventListeners = this.listeners.get(event);\n    return eventListeners ? eventListeners.size : 0;\n  }\n\n  /**\n   * Get all event names that have listeners\n   * \n   * @returns Array of event names\n   * \n   * @example\n   * ```typescript\n   * const events = globalEventBus.eventNames();\n   * console.log('Events with listeners:', events);\n   * ```\n   */\n  eventNames(): string[] {\n    return Array.from(this.listeners.keys());\n  }\n}\n\n/**\n * Global Event Bus Instance\n * \n * This is a singleton instance that the whole extension can use.\n * Import this in any module that needs to emit or listen for events.\n * \n * @example\n * ```typescript\n * import { globalEventBus } from './lib/events/event-bus';\n * \n * // Emit an event\n * globalEventBus.emit('user:action', { action: 'click' });\n * \n * // Listen for an event\n * globalEventBus.on('user:action', (data) => {\n *   console.log('User action:', data.action);\n * });\n * ```\n */\nexport const globalEventBus = new EventBus();\n\n/**\n * Event Bus Class Export\n * \n * Export the class for testing purposes or if you need to create\n * multiple event bus instances (though the global singleton is recommended)\n */\nexport { EventBus };\n\n", "import { performanceMonitor } from \"../../lib/perf\";\r\nimport { debugLogger, globalErrorTracker } from \"../../lib/logging\";\r\nimport { wsStateMonitor } from \"../../lib/monitoring\";\r\nimport type { WebSocketMessage } from \"../../types/domain\";\r\nimport { WS_READY_STATE } from \"../../types/domain\";\r\nimport { clearErrorBadge, showPermanentWebSocketError } from \"../notifications\";\r\nimport { globalEventBus } from \"../../lib/events/event-bus\";\r\n\r\nexport interface CloseInfo {\r\n  code: number;\r\n  reason?: string;\r\n  wasClean?: boolean;\r\n}\r\n\r\n/**\r\n * WebSocket client for Pushbullet streaming API\r\n *\r\n * ARCHITECTURAL CHANGE: Event-Driven Architecture\r\n * This class now uses the global event bus to emit events instead of\r\n * calling handler functions directly. This decouples the WebSocketClient\r\n * from the background script and makes it more flexible and testable.\r\n *\r\n * Events emitted:\r\n * - websocket:connected - When WebSocket connection is established\r\n * - websocket:disconnected - When WebSocket connection is closed\r\n * - websocket:message - When a message is received\r\n * - websocket:tickle:push - When a push tickle is received\r\n * - websocket:tickle:device - When a device tickle is received\r\n * - websocket:push - When a push is received\r\n * - websocket:polling:check - When polling mode should be checked\r\n * - websocket:polling:stop - When polling mode should be stopped\r\n * - websocket:state - When connection state changes (for popup)\r\n */\r\nexport class WebSocketClient {\r\n  private static readonly NOP_TIMEOUT = 60000; // 60 seconds\r\n\r\n  private socket: WebSocket | null = null;\r\n  private reconnectAttempts = 0;\r\n  private reconnectTimeout: ReturnType<typeof setTimeout> | null = null;\r\n  private lastNopReceived: number = 0;\r\n\r\n  constructor(\r\n    private websocketUrl: string,\r\n    private getApiKey: () => string | null,\r\n  ) {}\r\n\r\n  /**\r\n   * Get current WebSocket instance\r\n   */\r\n  getSocket(): WebSocket | null {\r\n    return this.socket;\r\n  }\r\n\r\n  /**\r\n   * Get current ready state\r\n   */\r\n  getReadyState(): number | null {\r\n    return this.socket ? this.socket.readyState : null;\r\n  }\r\n\r\n  /**\r\n   * Check if WebSocket is connected\r\n   */\r\n  isConnected(): boolean {\r\n    return (\r\n      this.socket !== null && this.socket.readyState === WS_READY_STATE.OPEN\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Connect to WebSocket\r\n   */\r\n  connect(): void {\r\n    try {\r\n      const apiKey = this.getApiKey();\r\n      if (!apiKey) {\r\n        debugLogger.websocket(\"WARN\", \"connectWebSocket called without apiKey\");\r\n        return;\r\n      }\r\n\r\n      // If already open, do nothing\r\n      if (this.socket && this.socket.readyState === WS_READY_STATE.OPEN) {\r\n        debugLogger.websocket(\"DEBUG\", \"WebSocket already open\");\r\n        return;\r\n      }\r\n\r\n      // Fix WebSocket URL construction - Pushbullet uses simple concatenation\r\n      const url = this.websocketUrl + apiKey;\r\n\r\n      // CRITICAL: Log the exact URL being constructed (without exposing full API key)\r\n      debugLogger.websocket(\"INFO\", \"WebSocket URL construction debug\", {\r\n        baseUrl: this.websocketUrl,\r\n        apiKeyLength: apiKey.length,\r\n        apiKeyPrefix: apiKey.substring(0, 8) + \"...\",\r\n        finalUrlLength: url.length,\r\n        urlPattern: this.websocketUrl + \"***\",\r\n      });\r\n      debugLogger.websocket(\"INFO\", \"Connecting to WebSocket\", {\r\n        url: this.websocketUrl + \"***\",\r\n        reconnectAttempts: this.reconnectAttempts,\r\n        currentSocketState: this.socket\r\n          ? this.socket.readyState\r\n          : \"no_existing_socket\",\r\n        apiKeyPresent: !!apiKey,\r\n      });\r\n      this.reconnectAttempts = 0;\r\n\r\n      // Log pre-creation state\r\n      debugLogger.websocket(\"DEBUG\", \"About to create WebSocket object\", {\r\n        url: this.websocketUrl + \"***\",\r\n        currentSocketExists: !!this.socket,\r\n        currentSocketState: this.socket ? this.socket.readyState : \"null\",\r\n      });\r\n\r\n      try {\r\n        this.socket = new WebSocket(url);\r\n        debugLogger.websocket(\r\n          \"DEBUG\",\r\n          \"WebSocket object created successfully\",\r\n          {\r\n            url: this.websocketUrl + \"***\",\r\n            readyState: this.socket.readyState,\r\n            urlLength: url.length,\r\n          },\r\n        );\r\n      } catch (createError) {\r\n        debugLogger.websocket(\"ERROR\", \"Failed to create WebSocket object\", {\r\n          url: this.websocketUrl + \"***\",\r\n          error:\r\n            createError instanceof Error\r\n              ? createError.message\r\n              : String(createError),\r\n          errorType: createError?.constructor?.name,\r\n          timestamp: new Date().toISOString(),\r\n        });\r\n        // Reset socket to null on creation failure\r\n        this.socket = null;\r\n        throw createError;\r\n      }\r\n\r\n      debugLogger.websocket(\"DEBUG\", \"Setting up WebSocket event handlers\", {\r\n        url: this.websocketUrl + \"***\",\r\n        readyState: this.socket.readyState,\r\n        socketExists: !!this.socket,\r\n      });\r\n\r\n      this.socket.onopen = () => {\r\n        debugLogger.websocket(\"INFO\", \"WebSocket connection established\", {\r\n          timestamp: new Date().toISOString(),\r\n        });\r\n        this.lastNopReceived = Date.now();\r\n        performanceMonitor.recordWebSocketConnection(true);\r\n        wsStateMonitor.startMonitoring();\r\n\r\n        // Emit event to stop polling mode\r\n        globalEventBus.emit(\"websocket:polling:stop\");\r\n\r\n        try {\r\n          clearErrorBadge();\r\n        } catch {\r\n          // noop\r\n        }\r\n\r\n        if (this.reconnectTimeout) {\r\n          clearTimeout(this.reconnectTimeout);\r\n          this.reconnectTimeout = null;\r\n        }\r\n\r\n        // Emit connected event\r\n        globalEventBus.emit(\"websocket:connected\");\r\n\r\n        // Emit state change for popup\r\n        globalEventBus.emit(\"websocket:state\", \"connected\");\r\n      };\r\n\r\n      this.socket.onmessage = async (event) => {\r\n        try {\r\n          const data: WebSocketMessage = JSON.parse(event.data);\r\n          debugLogger.websocket(\"DEBUG\", \"WebSocket message received\", {\r\n            type: data.type,\r\n            subtype: \"subtype\" in data ? data.subtype : undefined,\r\n            hasPush: \"push\" in data ? !!data.push : false,\r\n          });\r\n\r\n          switch (data.type) {\r\n          case \"tickle\":\r\n            if (data.subtype === \"push\") {\r\n              // Emit tickle:push event\r\n              globalEventBus.emit(\"websocket:tickle:push\");\r\n            } else if (data.subtype === \"device\") {\r\n              // Emit tickle:device event\r\n              globalEventBus.emit(\"websocket:tickle:device\");\r\n            }\r\n            break;\r\n\r\n          case \"push\":\r\n            if (\"push\" in data && data.push) {\r\n              // Emit push event with push data\r\n              globalEventBus.emit(\"websocket:push\", data.push);\r\n            } else {\r\n              debugLogger.websocket(\r\n                \"WARN\",\r\n                \"Push message received without push payload\",\r\n              );\r\n            }\r\n            break;\r\n\r\n          case \"nop\":\r\n            this.lastNopReceived = Date.now();\r\n            debugLogger.websocket(\"DEBUG\", \"Server nop received\", {\r\n              timestamp: new Date().toISOString(),\r\n            });\r\n            break;\r\n\r\n            // Note: 'ping' and 'pong' are WebSocket frame types, not message types\r\n            // They should not appear in the message data, but we handle them defensively\r\n\r\n          default:\r\n            debugLogger.websocket(\r\n              \"WARN\",\r\n              \"Unknown WebSocket message type received\",\r\n              {\r\n                type: (data as any).type,\r\n              },\r\n            );\r\n            break;\r\n          }\r\n        } catch (error) {\r\n          debugLogger.websocket(\r\n            \"ERROR\",\r\n            \"Failed to process WebSocket message\",\r\n            null,\r\n            error as Error,\r\n          );\r\n        }\r\n      };\r\n\r\n      this.socket.onerror = (error) => {\r\n        // WebSocket error events are generic Event objects, not Error instances\r\n        // This can occur during connection attempt, socket creation, or network issues\r\n        // CRITICAL: This error handler might be called when this.socket is null or undefined\r\n\r\n        const currentSocket = this.socket; // Local reference to avoid race conditions\r\n        const socketExists = !!currentSocket;\r\n        const socketState = socketExists\r\n          ? currentSocket.readyState\r\n          : \"no_socket\";\r\n        const isConnecting = socketExists\r\n          ? currentSocket.readyState === WS_READY_STATE.CONNECTING\r\n          : false;\r\n        const isConnected = socketExists\r\n          ? currentSocket.readyState === WS_READY_STATE.OPEN\r\n          : false;\r\n\r\n        const errorInfo = {\r\n          type: (error as any).type || \"unknown\",\r\n          target: (error as any).target ? \"WebSocket\" : \"unknown\",\r\n          readyState: socketState,\r\n          socketExists: socketExists,\r\n          url: this.websocketUrl,\r\n          timestamp: new Date().toISOString(),\r\n          reconnectAttempts: this.reconnectAttempts,\r\n          // Additional debugging info\r\n          isConnecting: isConnecting,\r\n          isConnected: isConnected,\r\n          errorEventDetails: {\r\n            timeStamp: (error as any).timeStamp,\r\n            bubbles: (error as any).bubbles,\r\n            cancelable: (error as any).cancelable,\r\n            currentTarget: (error as any).currentTarget\r\n              ? \"WebSocket\"\r\n              : \"unknown\",\r\n          },\r\n        };\r\n\r\n        debugLogger.websocket(\"ERROR\", \"WebSocket error occurred\", errorInfo);\r\n\r\n        // Create a proper Error object for tracking\r\n        const websocketError = new Error(\r\n          `WebSocket connection error: ${errorInfo.type} (socket: ${socketExists ? \"exists\" : \"null\"}, state: ${socketState})`,\r\n        );\r\n        websocketError.name = \"WebSocketError\";\r\n        globalErrorTracker.trackError(\r\n          websocketError,\r\n          {\r\n            category: \"WEBSOCKET\",\r\n            message: \"WebSocket error occurred\",\r\n            data: errorInfo,\r\n          },\r\n          \"WEBSOCKET\",\r\n        );\r\n      };\r\n\r\n      this.socket.onclose = (event) => {\r\n        const closeInfo: CloseInfo = {\r\n          code: event.code,\r\n          reason: event.reason || \"No reason provided\",\r\n          wasClean: event.wasClean,\r\n        };\r\n\r\n        debugLogger.websocket(\"WARN\", \"WebSocket connection closed\", {\r\n          ...closeInfo,\r\n          timestamp: new Date().toISOString(),\r\n          reconnectAttempts: this.reconnectAttempts,\r\n        });\r\n\r\n        // Emit disconnected event\r\n        globalEventBus.emit(\"websocket:disconnected\", {\r\n          code: event.code,\r\n          reason: event.reason,\r\n          wasClean: event.wasClean,\r\n        });\r\n\r\n        // Emit state change for popup\r\n        globalEventBus.emit(\"websocket:state\", \"disconnected\");\r\n\r\n        // Permanent error: stop and notify\r\n        if (\r\n          event.code === 1008 ||\r\n          event.code === 4001 ||\r\n          (event.code >= 4000 && event.code < 5000)\r\n        ) {\r\n          debugLogger.websocket(\r\n            \"ERROR\",\r\n            \"Permanent WebSocket error - stopping reconnection attempts\",\r\n            closeInfo,\r\n          );\r\n          try {\r\n            showPermanentWebSocketError(closeInfo);\r\n          } catch {\r\n            // noop\r\n          }\r\n          return;\r\n        }\r\n      };\r\n    } catch (error) {\r\n      debugLogger.websocket(\r\n        \"ERROR\",\r\n        \"Failed to create WebSocket connection\",\r\n        {\r\n          url: this.websocketUrl + \"***\",\r\n          hasApiKey: !!this.getApiKey(),\r\n        },\r\n        error as Error,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disconnect WebSocket\r\n   */\r\n  disconnect(): void {\r\n    if (this.socket) {\r\n      try {\r\n        debugLogger.websocket(\"INFO\", \"Disconnecting WebSocket\", {\r\n          readyState: this.socket.readyState,\r\n        });\r\n\r\n        this.socket.close();\r\n        this.socket = null;\r\n\r\n        wsStateMonitor.stopMonitoring();\r\n      } catch (error) {\r\n        debugLogger.websocket(\r\n          \"ERROR\",\r\n          \"Error disconnecting WebSocket\",\r\n          null,\r\n          error as Error,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get reconnect attempts count\r\n   */\r\n  getReconnectAttempts(): number {\r\n    return this.reconnectAttempts;\r\n  }\r\n\r\n  /**\r\n   * Reset reconnect attempts\r\n   */\r\n  resetReconnectAttempts(): void {\r\n    this.reconnectAttempts = 0;\r\n  }\r\n\r\n  public isConnectionHealthy(): boolean {\r\n    if (!this.isConnected()) return false;\r\n    \r\n    const timeSinceLastNop = Date.now() - this.lastNopReceived;\r\n    return timeSinceLastNop < WebSocketClient.NOP_TIMEOUT; // 60 seconds\r\n  }\r\n}\r\n", "/**\r\n * Storage Repository Pattern\r\n * \r\n * This module implements the Repository Pattern for storage operations.\r\n * It abstracts away the chrome.storage API, making the code more testable\r\n * and maintainable.\r\n * \r\n * Benefits:\r\n * - Testability: Easy to mock storage in tests\r\n * - Maintainability: Storage logic centralized in one place\r\n * - Clarity: Simple, clear API for storage operations\r\n */\r\n\r\n/**\r\n * Storage Repository Interface\r\n * \r\n * This interface defines the contract for storage operations.\r\n * Any implementation must provide these methods.\r\n */\r\nexport interface StorageRepository {\r\n  // API Key\r\n  getApiKey(): Promise<string | null>;\r\n  setApiKey(key: string | null): Promise<void>;\r\n\r\n  // Device Information\r\n  getDeviceIden(): Promise<string | null>;\r\n  setDeviceIden(iden: string | null): Promise<void>;\r\n\r\n  getDeviceNickname(): Promise<string | null>;\r\n  setDeviceNickname(nickname: string): Promise<void>;\r\n\r\n  // Settings\r\n  getAutoOpenLinks(): Promise<boolean>;\r\n  setAutoOpenLinks(enabled: boolean): Promise<void>;\r\n\r\n  getNotificationTimeout(): Promise<number>;\r\n  setNotificationTimeout(timeout: number): Promise<void>;\r\n\r\n  // Encryption\r\n  getEncryptionPassword(): Promise<string | null>;\r\n  setEncryptionPassword(password: string | null): Promise<void>;\r\n\r\n  // UI State\r\n  getScrollToRecentPushes(): Promise<boolean>;\r\n  setScrollToRecentPushes(scroll: boolean): Promise<void>;\r\n  removeScrollToRecentPushes(): Promise<void>;\r\n\r\n  // Device Registration\r\n  getDeviceRegistrationInProgress(): Promise<boolean>;\r\n  setDeviceRegistrationInProgress(inProgress: boolean): Promise<void>;\r\n\r\n  // Bulk Operations\r\n  clear(): Promise<void>;\r\n  remove(keys: string[]): Promise<void>;\r\n}\r\n\r\n/**\r\n * Chrome Storage Repository Implementation\r\n * \r\n * This class implements the StorageRepository interface using the\r\n * chrome.storage API. It handles the promisification of the callback-based\r\n * chrome.storage API.\r\n */\r\nexport class ChromeStorageRepository implements StorageRepository {\r\n  /**\r\n   * Get API Key from local storage\r\n   * Security: API keys are stored in local storage (not synced) to prevent\r\n   * exposure through Chrome's sync infrastructure\r\n   */\r\n  async getApiKey(): Promise<string | null> {\r\n    const result = await chrome.storage.local.get(['apiKey']);\r\n    return result.apiKey || null;\r\n  }\r\n\r\n  /**\r\n   * Set API Key in local storage\r\n   * Security: API keys are stored in local storage (not synced) to prevent\r\n   * exposure through Chrome's sync infrastructure\r\n   */\r\n  async setApiKey(key: string | null): Promise<void> {\r\n    if (key === null) {\r\n      await chrome.storage.local.remove(['apiKey']);\r\n    } else {\r\n      await chrome.storage.local.set({ apiKey: key });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get Device Identifier from local storage\r\n   */\r\n  async getDeviceIden(): Promise<string | null> {\r\n    const result = await chrome.storage.local.get(['deviceIden']);\r\n    return result.deviceIden || null;\r\n  }\r\n\r\n  /**\r\n   * Set Device Identifier in local storage\r\n   */\r\n  async setDeviceIden(iden: string | null): Promise<void> {\r\n    if (iden === null) {\r\n      await chrome.storage.local.remove(['deviceIden']);\r\n    } else {\r\n      await chrome.storage.local.set({ deviceIden: iden });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get Device Nickname from sync storage\r\n   */\r\n  async getDeviceNickname(): Promise<string | null> {\r\n    const result = await chrome.storage.sync.get(['deviceNickname']);\r\n    return result.deviceNickname || null;\r\n  }\r\n\r\n  /**\r\n   * Set Device Nickname in sync storage\r\n   */\r\n  async setDeviceNickname(nickname: string): Promise<void> {\r\n    await chrome.storage.sync.set({ deviceNickname: nickname });\r\n  }\r\n\r\n  /**\r\n   * Get Auto Open Links setting from sync storage\r\n   */\r\n  async getAutoOpenLinks(): Promise<boolean> {\r\n    const result = await chrome.storage.sync.get(['autoOpenLinks']);\r\n    return result.autoOpenLinks !== undefined ? result.autoOpenLinks : false;\r\n  }\r\n\r\n  /**\r\n   * Set Auto Open Links setting in sync storage\r\n   */\r\n  async setAutoOpenLinks(enabled: boolean): Promise<void> {\r\n    await chrome.storage.sync.set({ autoOpenLinks: enabled });\r\n  }\r\n\r\n  /**\r\n   * Get Notification Timeout from sync storage\r\n   */\r\n  async getNotificationTimeout(): Promise<number> {\r\n    const result = await chrome.storage.sync.get(['notificationTimeout']);\r\n    return result.notificationTimeout !== undefined ? result.notificationTimeout : 5000;\r\n  }\r\n\r\n  /**\r\n   * Set Notification Timeout in sync storage\r\n   */\r\n  async setNotificationTimeout(timeout: number): Promise<void> {\r\n    await chrome.storage.sync.set({ notificationTimeout: timeout });\r\n  }\r\n\r\n  /**\r\n   * Get Encryption Password from local storage\r\n   */\r\n  async getEncryptionPassword(): Promise<string | null> {\r\n    const result = await chrome.storage.local.get(['encryptionPassword']);\r\n    return result.encryptionPassword || null;\r\n  }\r\n\r\n  /**\r\n   * Set Encryption Password in local storage\r\n   */\r\n  async setEncryptionPassword(password: string | null): Promise<void> {\r\n    if (password === null) {\r\n      await chrome.storage.local.remove(['encryptionPassword']);\r\n    } else {\r\n      await chrome.storage.local.set({ encryptionPassword: password });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get Scroll to Recent Pushes flag from local storage\r\n   */\r\n  async getScrollToRecentPushes(): Promise<boolean> {\r\n    const result = await chrome.storage.local.get(['scrollToRecentPushes']);\r\n    return result.scrollToRecentPushes || false;\r\n  }\r\n\r\n  /**\r\n   * Set Scroll to Recent Pushes flag in local storage\r\n   */\r\n  async setScrollToRecentPushes(scroll: boolean): Promise<void> {\r\n    await chrome.storage.local.set({ scrollToRecentPushes: scroll });\r\n  }\r\n\r\n  /**\r\n   * Remove Scroll to Recent Pushes flag from local storage\r\n   */\r\n  async removeScrollToRecentPushes(): Promise<void> {\r\n    await chrome.storage.local.remove(['scrollToRecentPushes']);\r\n  }\r\n\r\n  /**\r\n   * Get Device Registration In Progress flag from local storage\r\n   */\r\n  async getDeviceRegistrationInProgress(): Promise<boolean> {\r\n    const result = await chrome.storage.local.get(['deviceRegistrationInProgress']);\r\n    return result.deviceRegistrationInProgress || false;\r\n  }\r\n\r\n  /**\r\n   * Set Device Registration In Progress flag in local storage\r\n   */\r\n  async setDeviceRegistrationInProgress(inProgress: boolean): Promise<void> {\r\n    await chrome.storage.local.set({ deviceRegistrationInProgress: inProgress });\r\n  }\r\n\r\n  /**\r\n   * Clear all storage (both sync and local)\r\n   */\r\n  async clear(): Promise<void> {\r\n    await Promise.all([\r\n      chrome.storage.sync.clear(),\r\n      chrome.storage.local.clear()\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Remove specific keys from storage\r\n   * Removes from both sync and local storage\r\n   */\r\n  async remove(keys: string[]): Promise<void> {\r\n    await Promise.all([\r\n      chrome.storage.sync.remove(keys),\r\n      chrome.storage.local.remove(keys)\r\n    ]);\r\n  }\r\n}\r\n\r\n/**\r\n * Create a singleton instance of the storage repository\r\n * This ensures we have a single point of access throughout the application\r\n */\r\nexport const storageRepository = new ChromeStorageRepository();\r\n\r\n", "import type { Chat, User, Device, Push, DevicesResponse, PushesResponse } from \"../../types/domain\";\r\nimport { debugLogger } from \"../../lib/logging\";\r\nimport { storageRepository } from \"../../infrastructure/storage/storage.repository\";\r\n\r\nconst API_BASE_URL = 'https://api.pushbullet.com/v2';\r\nconst PUSHES_URL = `${API_BASE_URL}/pushes`;\r\nconst DEVICES_URL = `${API_BASE_URL}/devices`;\r\nconst USER_INFO_URL = `${API_BASE_URL}/users/me`;\r\n\r\ntype HeadersInit = Record<string, string>;\r\n\r\n// Promise singleton for device registration to prevent race conditions\r\nlet registrationPromise: Promise<{ deviceIden: string; needsUpdate: boolean }> | null = null;\r\n\r\nfunction authHeaders(apiKey: string): HeadersInit {\r\n  return { 'Access-Token': apiKey };\r\n}\r\n\r\nexport async function fetchUserInfo(apiKey: string): Promise<User> {\r\n  const startTime = Date.now();\r\n  debugLogger.api('INFO', 'Fetching user info', { url: USER_INFO_URL, hasApiKey: !!apiKey, timestamp: new Date().toISOString() });\r\n\r\n  try {\r\n    const response = await fetch(USER_INFO_URL, { headers: authHeaders(apiKey) });\r\n    const duration = Date.now() - startTime;\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text().catch(() => 'Unknown error');\r\n      const error = new Error(`Failed to fetch user info: ${response.status} ${response.statusText} - ${errorText}`);\r\n      debugLogger.api('ERROR', 'User info fetch failed', {\r\n        url: USER_INFO_URL,\r\n        status: response.status,\r\n        statusText: response.statusText,\r\n        duration: `${duration}ms`,\r\n        errorText\r\n      }, error);\r\n      throw error;\r\n    }\r\n\r\n    const data = await response.json();\r\n    debugLogger.api('INFO', 'User info fetched successfully', {\r\n      url: USER_INFO_URL,\r\n      status: response.status,\r\n      duration: `${duration}ms`,\r\n      userEmail: data.email ? data.email.substring(0, 3) + '***' : 'unknown',\r\n      userName: data.name || 'unknown'\r\n    });\r\n    return data;\r\n  } catch (error) {\r\n    const duration = Date.now() - startTime;\r\n    debugLogger.api('ERROR', 'User info fetch error', {\r\n      url: USER_INFO_URL,\r\n      duration: `${duration}ms`,\r\n      error: (error as Error).message\r\n    }, error as Error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function fetchDevices(apiKey: string): Promise<Device[]> {\r\n  const startTime = Date.now();\r\n  debugLogger.api('INFO', 'Fetching devices', { url: DEVICES_URL, hasApiKey: !!apiKey, timestamp: new Date().toISOString() });\r\n\r\n  try {\r\n    const response = await fetch(DEVICES_URL, { headers: authHeaders(apiKey) });\r\n    const duration = Date.now() - startTime;\r\n\r\n    if (!response.ok) {\r\n      const error = new Error(`Failed to fetch devices: ${response.status} ${response.statusText}`);\r\n      debugLogger.api('ERROR', 'Devices fetch failed', {\r\n        url: DEVICES_URL,\r\n        status: response.status,\r\n        statusText: response.statusText,\r\n        duration: `${duration}ms`\r\n      }, error);\r\n      throw error;\r\n    }\r\n\r\n    const data: DevicesResponse = await response.json();\r\n    const activeDevices = data.devices.filter(device => device.active);\r\n    debugLogger.api('INFO', 'Devices fetched successfully', {\r\n      url: DEVICES_URL,\r\n      status: response.status,\r\n      duration: `${duration}ms`,\r\n      totalDevices: data.devices.length,\r\n      activeDevices: activeDevices.length\r\n    });\r\n    return activeDevices;\r\n  } catch (error) {\r\n    const duration = Date.now() - startTime;\r\n    debugLogger.api('ERROR', 'Devices fetch error', {\r\n      url: DEVICES_URL,\r\n      duration: `${duration}ms`,\r\n      error: (error as Error).message\r\n    }, error as Error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function fetchRecentPushes(apiKey: string): Promise<Push[]> {\r\n  const startTime = Date.now();\r\n  const url = `${PUSHES_URL}?limit=20`;\r\n  debugLogger.api('INFO', 'Fetching recent pushes', { url, hasApiKey: !!apiKey, timestamp: new Date().toISOString() });\r\n\r\n  try {\r\n    const response = await fetch(url, { headers: authHeaders(apiKey) });\r\n    const duration = Date.now() - startTime;\r\n\r\n    if (!response.ok) {\r\n      const error = new Error(`Failed to fetch pushes: ${response.status} ${response.statusText}`);\r\n      debugLogger.api('ERROR', 'Pushes fetch failed', {\r\n        url,\r\n        status: response.status,\r\n        statusText: response.statusText,\r\n        duration: `${duration}ms`\r\n      }, error);\r\n      throw error;\r\n    }\r\n\r\n    const data: PushesResponse = await response.json();\r\n    const filteredPushes = data.pushes.filter(push => {\r\n      const hasContent =\r\n        ('title' in push && push.title) ||\r\n        ('body' in push && push.body) ||\r\n        ('url' in push && push.url) ||\r\n        ('file_name' in push && push.file_name) ||\r\n        ('file_url' in push && push.file_url);\r\n      return hasContent && !push.dismissed;\r\n    });\r\n    debugLogger.api('INFO', 'Pushes fetched successfully', {\r\n      url,\r\n      status: response.status,\r\n      duration: `${duration}ms`,\r\n      totalPushes: data.pushes.length,\r\n      filteredPushes: filteredPushes.length,\r\n      pushTypes: filteredPushes.map(p => p.type).join(', ')\r\n    });\r\n    return filteredPushes;\r\n  } catch (error) {\r\n    const duration = Date.now() - startTime;\r\n    debugLogger.api('ERROR', 'Pushes fetch error', {\r\n      url,\r\n      duration: `${duration}ms`,\r\n      error: (error as Error).message\r\n    }, error as Error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function ensureDeviceExists(apiKey: string, deviceIden: string): Promise<boolean> {\r\n  const response = await fetch(\r\n    `https://api.pushbullet.com/v2/devices/${deviceIden}`,\r\n    { method: 'GET', headers: { 'Access-Token': apiKey } }\r\n  );\r\n  return response.status !== 404;\r\n}\r\n\r\nexport async function registerDevice(\r\n  apiKey: string,\r\n  deviceIden: string | null,\r\n  deviceNickname: string\r\n): Promise<{ deviceIden: string; needsUpdate: boolean }> {\r\n  // If registration is already in progress, return the existing promise\r\n  if (registrationPromise) {\r\n    debugLogger.general('INFO', 'Device registration already in progress, reusing promise', {\r\n      source: 'registerDevice',\r\n      existingRegistration: true\r\n    });\r\n    return registrationPromise;\r\n  }\r\n\r\n  // Create and store the registration promise\r\n  registrationPromise = (async () => {\r\n    try {\r\n      debugLogger.general('INFO', 'Starting device registration process', {\r\n        hasApiKey: !!apiKey,\r\n        currentDeviceIden: deviceIden,\r\n        deviceNickname,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      // Check if device is already registered\r\n      const existingDeviceIden = await storageRepository.getDeviceIden();\r\n\r\n      if (existingDeviceIden) {\r\n        debugLogger.general('INFO', 'Device already registered', { deviceIden: existingDeviceIden, deviceNickname });\r\n\r\n        try {\r\n          await updateDeviceNickname(apiKey, existingDeviceIden, deviceNickname);\r\n          return { deviceIden: existingDeviceIden, needsUpdate: false };\r\n        } catch (error) {\r\n          debugLogger.general('WARN', 'Failed to update existing device, will re-register', {\r\n            error: (error as Error).message,\r\n            deviceIden: existingDeviceIden\r\n          });\r\n          await storageRepository.setDeviceIden(null);\r\n        }\r\n      }\r\n\r\n      // Register new device\r\n      debugLogger.general('INFO', 'Registering new device with Pushbullet API', { deviceNickname, url: DEVICES_URL });\r\n\r\n      const registrationData = {\r\n        nickname: deviceNickname,\r\n        model: 'Chrome',\r\n        manufacturer: 'Google',\r\n        push_token: '',\r\n        app_version: 8623,\r\n        icon: 'browser',\r\n        has_sms: false,\r\n        type: 'chrome'\r\n      };\r\n\r\n      debugLogger.api('INFO', 'Sending device registration request', {\r\n        url: DEVICES_URL,\r\n        method: 'POST',\r\n        deviceData: registrationData\r\n      });\r\n\r\n      const startTime = Date.now();\r\n      const response = await fetch(DEVICES_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n          ...authHeaders(apiKey),\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(registrationData)\r\n      });\r\n\r\n      const duration = Date.now() - startTime;\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text().catch(() => 'Unknown error');\r\n        const error = new Error(`Failed to register device: ${response.status} ${response.statusText} - ${errorText}`);\r\n        debugLogger.api('ERROR', 'Device registration failed', {\r\n          url: DEVICES_URL,\r\n          status: response.status,\r\n          statusText: response.statusText,\r\n          duration: `${duration}ms`,\r\n          errorText\r\n        }, error);\r\n        throw error;\r\n      }\r\n\r\n      const device: Device = await response.json();\r\n      const newDeviceIden = device.iden;\r\n\r\n      debugLogger.api('INFO', 'Device registered successfully', {\r\n        url: DEVICES_URL,\r\n        status: response.status,\r\n        duration: `${duration}ms`,\r\n        deviceIden: newDeviceIden,\r\n        deviceNickname: device.nickname\r\n      });\r\n\r\n      // Save device iden to storage\r\n      await storageRepository.setDeviceIden(newDeviceIden);\r\n\r\n      debugLogger.general('INFO', 'Device registration completed', {\r\n        deviceIden: newDeviceIden,\r\n        deviceNickname: device.nickname\r\n      });\r\n\r\n      return { deviceIden: newDeviceIden, needsUpdate: false };\r\n    } catch (error) {\r\n      debugLogger.general('ERROR', 'Error in registerDevice function', {\r\n        errorMessage: (error as Error).message,\r\n        errorStack: (error as Error).stack\r\n      });\r\n      throw error;\r\n    } finally {\r\n      // Clear the promise reference to allow retry on failure\r\n      registrationPromise = null;\r\n    }\r\n  })();\r\n\r\n  return registrationPromise;\r\n}\r\n\r\nexport async function updateDeviceNickname(\n  apiKey: string,\n  deviceIden: string,\n  newNickname: string\n): Promise<void> {\n  const deviceExists = await ensureDeviceExists(apiKey, deviceIden);\n  if (!deviceExists) {\n    throw new Error(`Device with iden ${deviceIden} not found on server.`);\n  }\n\n  debugLogger.general('INFO', 'Updating device nickname', {\n    deviceIden,\n    newNickname,\n    timestamp: new Date().toISOString()\n  });\n\n  try {\n    const url = `${DEVICES_URL}/${deviceIden}`;\n    const startTime = Date.now();\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        ...authHeaders(apiKey),\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ nickname: newNickname })\n    });\n\n    const duration = Date.now() - startTime;\n\n    if (!response.ok) {\n      const errorText = await response.text().catch(() => 'Unknown error');\n      const error = new Error(`Failed to update device nickname: ${response.status} ${response.statusText} - ${errorText}`);\n      debugLogger.api('ERROR', 'Device nickname update failed', {\n        url,\n        status: response.status,\n        statusText: response.statusText,\n        duration: `${duration}ms`,\n        errorText\n      }, error);\n      throw error;\n    }\n\n    const device: Device = await response.json();\n    debugLogger.api('INFO', 'Device nickname updated successfully', {\n      url,\n      status: response.status,\n      duration: `${duration}ms`,\n      deviceIden,\n      newNickname: device.nickname\n    });\n  } catch (error) {\n    debugLogger.general('ERROR', 'Error in updateDeviceNickname function', {\n      errorMessage: (error as Error).message,\n      errorStack: (error as Error).stack\n    });\n    throw error;\n  }\n}\n\n/**\n * Fetch chats (contacts/friends) from Pushbullet\n * Returns list of active chats only\n */\nexport async function fetchChats(apiKey: string): Promise<Chat[]> {\n  try {\n    debugLogger.api(\"INFO\", \"Fetching chats from Pushbullet API\");\n\n    const response = await fetch('https://api.pushbullet.com/v2/chats', {\n      method: 'GET',\n      headers: {\n        'Access-Token': apiKey,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\n        `Failed to fetch chats: ${response.status} ${response.statusText}`\n      );\n    }\n\n    const data = await response.json();\n    const chats = data.chats || [];\n\n    // Filter to only active chats (not deleted)\n    const activeChats = chats.filter((chat: Chat) => chat.active);\n\n    debugLogger.api(\"INFO\", \"Chats fetched successfully\", {\n      totalChats: chats.length,\n      activeChats: activeChats.length,\n    });\n\n    return activeChats;\n\n  } catch (error) {\n    debugLogger.api(\"ERROR\", \"Error fetching chats\", {\n      error: (error as Error).message,\n    });\n    throw error;\n  }\n}\n\n\r\n", "// src/infrastructure/storage/indexed-db.ts\r\n\r\nimport type { SessionCache } from \"../../types/domain\";\r\nimport { debugLogger } from \"../../lib/logging\";\r\n\r\nconst DB_NAME = \"PushbulletState\";\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = \"session\";\r\nconst CACHE_KEY = \"main\";\r\n\r\nlet dbPromise: Promise<IDBDatabase> | null = null;\r\n\r\n/**\r\n * Opens the IndexedDB database and creates the object store if needed.\r\n */\r\nfunction openDb(): Promise<IDBDatabase> {\r\n  if (dbPromise) {\r\n    return dbPromise;\r\n  }\r\n\r\n  dbPromise = new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n\r\n    request.onerror = () => {\r\n      debugLogger.storage(\"ERROR\", \"IndexedDB error\", { error: request.error });\r\n      reject(request.error);\r\n    };\r\n\r\n    request.onsuccess = () => {\r\n      resolve(request.result);\r\n    };\r\n\r\n    request.onupgradeneeded = (event) => {\r\n      const db = (event.target as IDBOpenDBRequest).result;\r\n      if (!db.objectStoreNames.contains(STORE_NAME)) {\r\n        db.createObjectStore(STORE_NAME);\r\n        debugLogger.storage(\"INFO\", \"IndexedDB object store created\");\r\n      }\r\n    };\r\n  });\r\n\r\n  return dbPromise;\r\n}\r\n\r\n/**\r\n * Saves the entire session cache to IndexedDB.\r\n * @param session The session cache object to save.\r\n */\r\nexport async function saveSessionCache(session: SessionCache): Promise<void> {\r\n  try {\r\n    const db = await openDb();\r\n    const transaction = db.transaction(STORE_NAME, \"readwrite\");\r\n    const store = transaction.objectStore(STORE_NAME);\r\n    store.put(session, CACHE_KEY);\r\n    await new Promise((resolve) => (transaction.oncomplete = resolve));\r\n    debugLogger.storage(\"DEBUG\", \"Session cache saved to IndexedDB\");\r\n  } catch (error) {\r\n    debugLogger.storage(\r\n      \"ERROR\",\r\n      \"Failed to save session to IndexedDB\",\r\n      null,\r\n      error as Error,\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Loads the session cache from IndexedDB.\r\n * @returns The saved session cache, or null if not found.\r\n */\r\nexport async function loadSessionCache(): Promise<SessionCache | null> {\r\n  try {\r\n    const db = await openDb();\r\n    const transaction = db.transaction(STORE_NAME, \"readonly\");\r\n    const store = transaction.objectStore(STORE_NAME);\r\n    const request = store.get(CACHE_KEY);\r\n\r\n    return new Promise((resolve) => {\r\n      request.onsuccess = () => {\r\n        debugLogger.storage(\"DEBUG\", \"Session cache loaded from IndexedDB\", {\r\n          found: !!request.result,\r\n        });\r\n        resolve(request.result || null);\r\n      };\r\n      request.onerror = () => {\r\n        debugLogger.storage(\"ERROR\", \"Failed to load session from IndexedDB\", {\r\n          error: request.error,\r\n        });\r\n        resolve(null);\r\n      };\r\n    });\r\n  } catch (error) {\r\n    debugLogger.storage(\r\n      \"ERROR\",\r\n      \"Failed to open IndexedDB for loading\",\r\n      null,\r\n      error as Error,\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Clears the session cache from IndexedDB.\r\n */\r\nexport async function clearSessionCache(): Promise<void> {\r\n  try {\r\n    const db = await openDb();\r\n    const transaction = db.transaction(STORE_NAME, \"readwrite\");\r\n    const store = transaction.objectStore(STORE_NAME);\r\n    store.clear();\r\n    await new Promise((resolve) => (transaction.oncomplete = resolve));\r\n    debugLogger.storage(\"INFO\", \"IndexedDB session cache cleared\");\r\n  } catch (error) {\r\n    debugLogger.storage(\r\n      \"ERROR\",\r\n      \"Failed to clear IndexedDB session\",\r\n      null,\r\n      error as Error,\r\n    );\r\n  }\r\n}", "import type { SessionCache } from \"../../types/domain\";\r\nimport { debugLogger } from \"../../lib/logging\";\r\nimport {\n  fetchChats,\n  fetchDevices,\n  fetchRecentPushes,\n  fetchUserInfo,\n  registerDevice,\n} from \"../api/client\";\nimport { storageRepository } from \"../../infrastructure/storage/storage.repository\";\r\nimport { saveSessionCache } from \"../../infrastructure/storage/indexed-db\";\r\n\r\n// Session cache state\nexport const sessionCache: SessionCache = {\n  userInfo: null,\n  devices: [],\n  recentPushes: [],\n  chats: [], // \u2190 ADD THIS LINE\n  isAuthenticated: false,\n  lastUpdated: 0,\n  autoOpenLinks: true,\n  deviceNickname: \"Chrome\",\n};\n\r\n/**\r\n * Reset the session cache to its initial, unauthenticated state.\r\n * This ensures no stale data remains when logging out.\r\n */\r\nexport function resetSessionCache(): void {\n  sessionCache.userInfo = null;\n  sessionCache.devices = [];\n  sessionCache.recentPushes = [];\n  sessionCache.chats = [];\n  sessionCache.isAuthenticated = false;\n  sessionCache.lastUpdated = 0;\n  sessionCache.autoOpenLinks = true;\n  sessionCache.deviceNickname = \"Chrome\";\n}\n\r\n\r\n\r\n// Promise singleton for single-flight initialization\r\n// Prevents race conditions when multiple events trigger initialization concurrently\r\nlet initPromise: Promise<string | null> | null = null;\r\n\r\n/**\r\n * Get the current initialization promise (if any)\r\n * This allows callers to await ongoing initialization instead of polling\r\n */\r\nexport function getInitPromise(): Promise<string | null> | null {\r\n  return initPromise;\r\n}\r\n\r\n// NO DECRYPTION - API key is stored in plain text in chrome.storage.sync\r\n// The crypto module is ONLY for decrypting E2EE push messages, NOT the API key!\r\n\r\nexport async function initializeSessionCache(\r\n  source = \"unknown\",\r\n  connectWebSocketFn?: () => void,\r\n  stateSetters?: {\r\n    setApiKey: (key: string | null) => void;\r\n    setDeviceIden: (iden: string | null) => void;\r\n    setAutoOpenLinks: (value: boolean) => void;\r\n    setDeviceNickname: (nickname: string) => void;\r\n    setNotificationTimeout: (timeout: number) => void;\r\n  },\r\n): Promise<string | null> {\r\n  // If initialization is already in progress, return the existing promise\r\n  // This allows concurrent callers to await the same initialization\r\n  if (initPromise) {\r\n    debugLogger.general(\r\n      \"INFO\",\r\n      \"Initialization already in progress, returning existing promise\",\r\n      {\r\n        source,\r\n        existingInitialization: true,\r\n      },\r\n    );\r\n    return initPromise;\r\n  }\r\n\r\n  // If the session is already authenticated (e.g., loaded from IndexedDB),\r\n  // then there is no work to do here.\r\n  if (sessionCache.isAuthenticated) {\r\n    debugLogger.general(\"INFO\", \"Session already loaded, skipping network initialization.\");\r\n    // We must still connect the WebSocket.\r\n    if (connectWebSocketFn) {\r\n      connectWebSocketFn();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Create and store the initialization promise\r\n  initPromise = (async () => {\r\n    try {\r\n      debugLogger.general(\"INFO\", \"Initializing session cache\", {\r\n        source,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n\r\n      // Load core settings from sync storage\r\n      debugLogger.storage(\r\n        \"DEBUG\",\r\n        \"Loading initial configuration from storage repository\",\r\n      );\r\n\r\n      // Get API key and device iden from storage repository\r\n      const apiKeyValue = await storageRepository.getApiKey();\r\n      const deviceIdenValue = await storageRepository.getDeviceIden();\r\n\r\n      if (stateSetters) {\r\n        stateSetters.setApiKey(apiKeyValue);\r\n        stateSetters.setDeviceIden(deviceIdenValue);\r\n      }\r\n\r\n      // Get settings with defaults from storage repository\r\n      const autoOpenLinksValue = await storageRepository.getAutoOpenLinks();\r\n      const notificationTimeoutValue =\r\n        await storageRepository.getNotificationTimeout();\r\n      const deviceNicknameValue =\r\n        (await storageRepository.getDeviceNickname()) || \"Chrome\";\r\n\r\n      if (stateSetters) {\r\n        stateSetters.setAutoOpenLinks(autoOpenLinksValue);\r\n        stateSetters.setNotificationTimeout(notificationTimeoutValue);\r\n        stateSetters.setDeviceNickname(deviceNicknameValue);\r\n      }\r\n\r\n      sessionCache.autoOpenLinks = autoOpenLinksValue;\r\n      sessionCache.deviceNickname = deviceNicknameValue;\r\n\r\n      debugLogger.storage(\r\n        \"INFO\",\r\n        \"Loaded configuration from storage repository\",\r\n        {\r\n          hasApiKey: !!apiKeyValue,\r\n          hasDeviceIden: !!deviceIdenValue,\r\n          autoOpenLinks: autoOpenLinksValue,\r\n          deviceNickname: deviceNicknameValue,\r\n          notificationTimeout: notificationTimeoutValue,\r\n        },\r\n      );\r\n\r\n      debugLogger.general(\"DEBUG\", \"API key status\", {\r\n        hasApiKey: !!apiKeyValue,\r\n        apiKeyLength: apiKeyValue ? apiKeyValue.length : 0,\r\n      });\r\n\r\n      if (apiKeyValue) {\r\n        debugLogger.general(\r\n          \"INFO\",\r\n          \"API key available - initializing session data\",\r\n        );\r\n\r\n        // Fetch user info\r\n        const userInfo = await fetchUserInfo(apiKeyValue);\r\n        sessionCache.userInfo = userInfo;\r\n\r\n        // Fetch devices\r\n        const devices = await fetchDevices(apiKeyValue);\r\n        sessionCache.devices = devices;\r\n\r\n        // Fetch recent pushes\n        const pushes = await fetchRecentPushes(apiKeyValue);\n        sessionCache.recentPushes = pushes;\n\n        // ========== ADD THIS ENTIRE BLOCK ==========\n        // Fetch chats (friends/contacts)\n        try {\n          const chats = await fetchChats(apiKeyValue);\n          sessionCache.chats = chats;\n          debugLogger.general(\"INFO\", \"Chats loaded successfully\", {\n            chatCount: chats.length,\n          });\n        } catch (error) {\n          // Don't fail initialization if chats fail to load\n          debugLogger.general(\"WARN\", \"Failed to load chats, continuing anyway\", {\n            error: (error as Error).message,\n          });\n          sessionCache.chats = [];\n        }\n        // ========== END OF BLOCK ==========\n\n        // Update session cache\n        sessionCache.isAuthenticated = true;\n        sessionCache.lastUpdated = Date.now();\n\r\n        debugLogger.general(\"INFO\", \"Session cache populated successfully\", {\r\n          hasUserInfo: !!sessionCache.userInfo,\r\n          deviceCount: sessionCache.devices.length,\r\n          pushCount: sessionCache.recentPushes.length,\r\n          lastUpdated: new Date(sessionCache.lastUpdated).toISOString(),\r\n        });\r\n\r\n        // Register device\r\n        await registerDevice(apiKeyValue, deviceIdenValue, deviceNicknameValue);\r\n\r\n        // Connect WebSocket if the function is provided\r\n        if (connectWebSocketFn) {\r\n          debugLogger.general(\"INFO\", \"Session initialized, connecting WebSocket.\");\r\n          connectWebSocketFn();\r\n        }\r\n\r\n        // Start periodic health check\r\n        chrome.alarms.create(\"websocketHealthCheck\", { periodInMinutes: 1 });\r\n        debugLogger.general(\"DEBUG\", \"WebSocket health check alarm created\", {\r\n          interval: \"5 minutes\",\r\n        });\r\n      } else {\r\n        debugLogger.general(\r\n          \"WARN\",\r\n          \"No API key available - session cache not initialized\",\r\n        );\r\n      }\r\n\r\n      // Save our freshly built session to the database for next time.\r\n      saveSessionCache(sessionCache);\r\n      debugLogger.general(\"INFO\", \"Initialization completed successfully\", {\r\n        source,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n\r\n      return apiKeyValue;\r\n    } catch (error) {\r\n      debugLogger.general(\r\n        \"ERROR\",\r\n        \"Error initializing session cache\",\r\n        {\r\n          error:\r\n            (error as Error).message ||\r\n            (error as Error).name ||\r\n            \"Unknown error\",\r\n        },\r\n        error as Error,\r\n      );\r\n      sessionCache.isAuthenticated = false;\r\n      throw error;\r\n    } finally {\r\n      // Clear the promise reference to allow retry on failure\r\n      initPromise = null;\r\n    }\r\n  })();\r\n\r\n  return initPromise;\r\n}\r\n\r\nexport async function refreshSessionCache(apiKeyParam: string): Promise<void> {\r\n  debugLogger.general(\"INFO\", \"Refreshing session cache\", {\r\n    hasApiKey: !!apiKeyParam,\r\n    timestamp: new Date().toISOString(),\r\n  });\r\n\r\n  try {\r\n    if (apiKeyParam) {\r\n      debugLogger.general(\r\n        \"DEBUG\",\r\n        \"API key available - refreshing session data\",\r\n      );\r\n\r\n      // Fetch user info\r\n      debugLogger.general(\"DEBUG\", \"Refreshing user info\");\r\n      const userInfo = await fetchUserInfo(apiKeyParam);\r\n      sessionCache.userInfo = userInfo;\r\n\r\n      // Fetch devices\r\n      debugLogger.general(\"DEBUG\", \"Refreshing devices\");\r\n      const devices = await fetchDevices(apiKeyParam);\r\n      sessionCache.devices = devices;\r\n\r\n      // Fetch recent pushes\n      debugLogger.general(\"DEBUG\", \"Refreshing recent pushes\");\n      const pushes = await fetchRecentPushes(apiKeyParam);\n      sessionCache.recentPushes = pushes;\n\n      // ========== ADD THIS ==========\n      // Refresh chats\n      try {\n        const chats = await fetchChats(apiKeyParam);\n        sessionCache.chats = chats;\n      } catch (error) {\n        debugLogger.general(\"WARN\", \"Failed to refresh chats\", {\n          error: (error as Error).message,\n        });\n      }\n      // ========== END ==========\n\n      // Update session cache\n      sessionCache.isAuthenticated = true;\n      sessionCache.lastUpdated = Date.now();\n\r\n      debugLogger.general(\"INFO\", \"Session cache refreshed successfully\", {\r\n        hasUserInfo: !!sessionCache.userInfo,\r\n        deviceCount: sessionCache.devices.length,\r\n        pushCount: sessionCache.recentPushes.length,\r\n        lastUpdated: new Date(sessionCache.lastUpdated).toISOString(),\r\n      });\r\n    } else {\r\n      debugLogger.general(\r\n        \"WARN\",\r\n        \"No API key available - cannot refresh session cache\",\r\n      );\r\n      sessionCache.isAuthenticated = false;\r\n    }\r\n  } catch (error) {\r\n    debugLogger.general(\r\n      \"ERROR\",\r\n      \"Error refreshing session cache\",\r\n      {\r\n        error: (error as Error).message,\r\n      },\r\n      error as Error,\r\n    );\r\n    throw error;\r\n  }\r\n}\r\n", "import { debugLogger } from '../../lib/logging';\r\nimport { storageRepository } from '../../infrastructure/storage/storage.repository';\r\n\r\n// NO DECRYPTION - API key is stored in plain text in chrome.storage.local\r\n// Security: API keys are stored in local storage (not synced) to prevent exposure\r\n// The crypto module is ONLY for decrypting E2EE push messages, NOT the API key!\r\n\r\n/**\r\n * Ensure critical configuration is loaded from storage\r\n * Used for service worker wake-ups to rehydrate state\r\n *\r\n * ARCHITECTURAL PATTERN: Uses StorageRepository for centralized storage access\r\n * All storage operations go through the repository pattern - NO direct chrome.storage calls\r\n *\r\n * @param stateSetters - Object containing state setter functions\r\n * @param stateGetters - Object containing state getter functions\r\n */\r\nexport async function ensureConfigLoaded(\r\n  stateSetters?: {\r\n    setApiKey: (key: string | null) => void;\r\n    setDeviceIden: (iden: string | null) => void;\r\n    setAutoOpenLinks: (value: boolean) => void;\r\n    setDeviceNickname: (nickname: string) => void;\r\n    setNotificationTimeout: (timeout: number) => void;\r\n  },\r\n  stateGetters?: {\r\n    getApiKey: () => string | null;\r\n    getDeviceIden: () => string | null;\r\n    getAutoOpenLinks: () => boolean;\r\n    getDeviceNickname: () => string;\r\n    getNotificationTimeout: () => number;\r\n  }\r\n): Promise<void> {\r\n  try {\r\n    if (!stateSetters || !stateGetters) {\r\n      // No state management provided, just return\r\n      return;\r\n    }\r\n\r\n    // Determine what needs to be loaded\r\n    const needsApiKey = !stateGetters.getApiKey();\r\n    const needsDeviceIden = !stateGetters.getDeviceIden();\r\n    const needsNickname = stateGetters.getDeviceNickname() === null || stateGetters.getDeviceNickname() === undefined;\r\n    const needsAutoOpen = stateGetters.getAutoOpenLinks() === null || stateGetters.getAutoOpenLinks() === undefined;\r\n    const needsTimeout = stateGetters.getNotificationTimeout() === null || stateGetters.getNotificationTimeout() === undefined;\r\n\r\n    // Load API key from repository (local storage, not synced)\r\n    if (needsApiKey) {\r\n      try {\r\n        const apiKey = await storageRepository.getApiKey();\r\n        if (apiKey) {\r\n          stateSetters.setApiKey(apiKey);\r\n        }\r\n      } catch (error) {\r\n        // Log storage errors in ensureConfigLoaded - these are non-critical for startup\r\n        debugLogger.general(\"WARN\", \"Failed to load API key from storage\", null, error as Error);\r\n      }\r\n    }\r\n\r\n    // Load device identifier from repository (local storage)\r\n    if (needsDeviceIden) {\r\n      try {\r\n        const deviceIden = await storageRepository.getDeviceIden();\r\n        if (deviceIden) {\r\n          stateSetters.setDeviceIden(deviceIden);\r\n        }\r\n      } catch (error) {\r\n        // Log storage errors in ensureConfigLoaded - these are non-critical for startup\r\n        debugLogger.general(\"WARN\", \"Failed to load device identifier from storage\", null, error as Error);\r\n      }\r\n    }\r\n\r\n    // Load device nickname from repository (synced storage)\r\n    if (needsNickname) {\r\n      try {\r\n        const deviceNickname = await storageRepository.getDeviceNickname();\r\n        if (deviceNickname !== null && deviceNickname !== undefined) {\r\n          stateSetters.setDeviceNickname(deviceNickname);\r\n        }\r\n      } catch (error) {\r\n        // Log storage errors in ensureConfigLoaded - these are non-critical for startup\r\n        debugLogger.general(\"WARN\", \"Failed to load device nickname from storage\", null, error as Error);\r\n      }\r\n    }\r\n\r\n    // Load auto-open links setting from repository (synced storage)\r\n    if (needsAutoOpen) {\r\n      try {\r\n        const autoOpenLinks = await storageRepository.getAutoOpenLinks();\r\n        if (autoOpenLinks !== null && autoOpenLinks !== undefined) {\r\n          stateSetters.setAutoOpenLinks(autoOpenLinks);\r\n        }\r\n      } catch (error) {\r\n        // Log storage errors in ensureConfigLoaded - these are non-critical for startup\r\n        debugLogger.general(\"WARN\", \"Failed to load auto-open links setting from storage\", null, error as Error);\r\n      }\r\n    }\r\n\r\n    // Load notification timeout from repository (synced storage)\r\n    if (needsTimeout) {\r\n      try {\r\n        const notificationTimeout = await storageRepository.getNotificationTimeout();\r\n        if (notificationTimeout !== null && notificationTimeout !== undefined) {\r\n          stateSetters.setNotificationTimeout(notificationTimeout);\r\n        }\r\n      } catch (error) {\r\n        // Log storage errors in ensureConfigLoaded - these are non-critical for startup\r\n        debugLogger.general(\"WARN\", \"Failed to load notification timeout from storage\", null, error as Error);\r\n      }\r\n    }\r\n\r\n    // Log completion\r\n    try {\r\n      debugLogger.storage('DEBUG', 'ensureConfigLoaded completed', {\r\n        hasApiKey: !!stateGetters.getApiKey(),\r\n        hasDeviceIden: !!stateGetters.getDeviceIden(),\r\n        autoOpenLinks: stateGetters.getAutoOpenLinks(),\r\n        notificationTimeout: stateGetters.getNotificationTimeout(),\r\n        deviceNickname: stateGetters.getDeviceNickname()\r\n      });\r\n    } catch (error) {\r\n      // Log logging errors in ensureConfigLoaded - these are non-critical\r\n      console.warn('Failed to log ensureConfigLoaded completion:', error);\r\n    }\r\n  } catch (e) {\r\n    try {\r\n      debugLogger.storage('WARN', 'ensureConfigLoaded encountered an error', {\r\n        error: e && (e as Error).message\r\n      });\r\n    } catch (error) {\r\n      // Log logging errors in ensureConfigLoaded - these are non-critical\r\n      console.warn('Failed to log ensureConfigLoaded error:', error);\r\n    }\r\n  }\r\n}\r\n\r\n", "/**\r\n * Pushbullet End-to-End Encryption (E2EE) Decryption\r\n * \r\n * Based on Pushbullet's E2EE specification:\r\n * - Key derivation: PBKDF2 with HMAC-SHA256\r\n * - Encryption: AES-256-GCM\r\n * - Encoding: Base64\r\n */\r\n\r\nimport type { Push } from '../../types/domain';\r\n\r\nexport class PushbulletCrypto {\r\n  /**\r\n   * Generate encryption/decryption key from password\r\n   * @param password - User's encryption password\r\n   * @param userIden - User's iden (used as salt)\r\n   * @returns Derived key for AES-GCM\r\n   */\r\n  static async deriveKey(password: string, userIden: string): Promise<CryptoKey> {\r\n    // Check if Web Crypto API is available\r\n    if (!globalThis.crypto || !crypto.subtle) {\r\n      throw new Error('Web Crypto API unavailable - requires HTTPS or localhost');\r\n    }\r\n\r\n    // Convert password to bytes\r\n    const encoder = new TextEncoder();\r\n    const passwordBytes = encoder.encode(password);\r\n    \r\n    // Import password as key material\r\n    const keyMaterial = await crypto.subtle.importKey(\r\n      'raw',\r\n      passwordBytes,\r\n      { name: 'PBKDF2' },\r\n      false,\r\n      ['deriveBits', 'deriveKey']\r\n    );\r\n    \r\n    // Use user iden as salt\r\n    const salt = encoder.encode(userIden);\r\n    \r\n    // Derive key using PBKDF2\r\n    const key = await crypto.subtle.deriveKey(\r\n      {\r\n        name: 'PBKDF2',\r\n        salt: salt,\r\n        iterations: 30000,\r\n        hash: 'SHA-256'\r\n      },\r\n      keyMaterial,\r\n      { name: 'AES-GCM', length: 256 },\r\n      false,\r\n      ['decrypt']\r\n    );\r\n    \r\n    return key;\r\n  }\r\n  \r\n  /**\r\n   * Decrypt an encrypted message\r\n   * @param encodedMessage - Base64 encoded encrypted message\r\n   * @param key - Decryption key\r\n   * @returns Decrypted message object\r\n   */\r\n  static async decryptMessage(encodedMessage: string, key: CryptoKey): Promise<unknown> {\r\n    try {\r\n      // Decode from base64\r\n      const encryptedData = this.base64ToBytes(encodedMessage);\r\n      \r\n      // Parse the encoded message format:\r\n      // version (1 byte) + tag (16 bytes) + iv (12 bytes) + ciphertext (rest)\r\n      const version = encryptedData[0];\r\n      \r\n      if (version !== 49) { // ASCII '1'\r\n        throw new Error(`Unsupported encryption version: ${version}`);\r\n      }\r\n      \r\n      const tag = encryptedData.slice(1, 17);        // 16 bytes\r\n      const iv = encryptedData.slice(17, 29);        // 12 bytes (96 bits)\r\n      const ciphertext = encryptedData.slice(29);    // Rest\r\n      \r\n      // Combine ciphertext and tag for AES-GCM\r\n      const combined = new Uint8Array(ciphertext.length + tag.length);\r\n      combined.set(ciphertext);\r\n      combined.set(tag, ciphertext.length);\r\n      \r\n      // Decrypt using AES-GCM\r\n      const decrypted = await crypto.subtle.decrypt(\r\n        {\r\n          name: 'AES-GCM',\r\n          iv: iv,\r\n          tagLength: 128 // 16 bytes = 128 bits\r\n        },\r\n        key,\r\n        combined\r\n      );\r\n      \r\n      // Convert decrypted bytes to string\r\n      const decoder = new TextDecoder();\r\n      const decryptedText = decoder.decode(decrypted);\r\n      \r\n      // Parse as JSON\r\n      return JSON.parse(decryptedText);\r\n    } catch {\r\n      // SECURITY FIX (M-04): Don't log sensitive crypto data\r\n      console.error('Decryption error - check encryption password');\r\n      throw new Error('Failed to decrypt message. Check your encryption password.');\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Convert base64 string to Uint8Array\r\n   * @param base64 - Base64 encoded string\r\n   * @returns Decoded bytes\r\n   */\r\n  static base64ToBytes(base64: string): Uint8Array {\r\n    const binaryString = atob(base64);\r\n    const bytes = new Uint8Array(binaryString.length);\r\n    for (let i = 0; i < binaryString.length; i++) {\r\n      bytes[i] = binaryString.charCodeAt(i);\r\n    }\r\n    return bytes;\r\n  }\r\n  \r\n  /**\r\n   * Decrypt a Pushbullet encrypted push\r\n   * @param encryptedPush - Push object with 'encrypted' and 'ciphertext' fields\r\n   * @param password - User's encryption password\r\n   * @param userIden - User's iden\r\n   * @returns Decrypted push data\r\n   */\r\n  static async decryptPush(encryptedPush: Push, password: string, userIden: string): Promise<Push> {\r\n    if (!encryptedPush.encrypted || !encryptedPush.ciphertext) {\r\n      throw new Error('Push is not encrypted');\r\n    }\r\n    \r\n    // Derive key from password\r\n    const key = await this.deriveKey(password, userIden);\r\n    \r\n    // Decrypt the ciphertext\r\n    const decryptedData = await this.decryptMessage(encryptedPush.ciphertext, key);\r\n    \r\n    // Return decrypted push with original metadata\r\n    return {\r\n      ...encryptedPush,\r\n      ...(decryptedData as object),\r\n      encrypted: false // Mark as decrypted\r\n    } as Push;\r\n  }\r\n}\r\n\r\n", "/**\r\n * Global state management for background service worker\r\n */\r\n\r\n\r\nimport { WebSocketClient } from '../app/ws/client';\r\n\r\n// API constants\r\nexport const API_BASE_URL = 'https://api.pushbullet.com/v2';\r\nexport const PUSHES_URL = `${API_BASE_URL}/pushes`;\r\nexport const DEVICES_URL = `${API_BASE_URL}/devices`;\r\nexport const USER_INFO_URL = `${API_BASE_URL}/users/me`;\r\nexport const WEBSOCKET_URL = 'wss://stream.pushbullet.com/websocket/';\r\n\r\n// Global state variables\r\nlet apiKey: string | null = null;\r\nlet deviceIden: string | null = null;\r\nlet deviceNickname = 'Chrome';\r\nlet autoOpenLinks = true;\r\nlet notificationTimeout = 10000;\r\nlet websocketClient: WebSocketClient | null = null;\r\nlet pollingMode = false;\r\nlet lastDisconnectionNotification = 0;\r\n\r\n// Constants\r\nexport const DISCONNECTION_NOTIFICATION_COOLDOWN = 300000; // 5 minutes\r\nexport const DISCONNECTION_NOTIFICATION_THRESHOLD = 300000; // 5 minutes\r\n\r\n\r\n\r\n// NO ENCRYPTION/DECRYPTION - API key is stored in plain text in chrome.storage.local\r\n// Security: API keys are stored in local storage (not synced) to prevent exposure\r\n// The crypto module is ONLY for decrypting E2EE push messages, NOT the API key!\r\n\r\n// Getters and setters\r\nexport function getApiKey(): string | null {\r\n  return apiKey;\r\n}\r\n\r\nexport function setApiKey(key: string | null): void {\r\n  apiKey = key;\r\n}\r\n\r\nexport function getDeviceIden(): string | null {\r\n  return deviceIden;\r\n}\r\n\r\nexport function setDeviceIden(iden: string | null): void {\r\n  deviceIden = iden;\r\n}\r\n\r\nexport function getDeviceNickname(): string {\r\n  return deviceNickname;\r\n}\r\n\r\nexport function setDeviceNickname(nickname: string): void {\r\n  deviceNickname = nickname;\r\n}\r\n\r\nexport function getAutoOpenLinks(): boolean {\r\n  return autoOpenLinks;\r\n}\r\n\r\nexport function setAutoOpenLinks(value: boolean): void {\r\n  autoOpenLinks = value;\r\n}\r\n\r\nexport function getNotificationTimeout(): number {\r\n  return notificationTimeout;\r\n}\r\n\r\nexport function setNotificationTimeout(timeout: number): void {\r\n  notificationTimeout = timeout;\r\n}\r\n\r\nexport function getWebSocketClient(): WebSocketClient | null {\r\n  return websocketClient;\r\n}\r\n\r\nexport function setWebSocketClient(client: WebSocketClient | null): void {\r\n  websocketClient = client;\r\n}\r\n\r\nexport function isPollingMode(): boolean {\r\n  return pollingMode;\r\n}\r\n\r\nexport function setPollingMode(mode: boolean): void {\r\n  pollingMode = mode;\r\n}\r\n\r\nexport function getLastDisconnectionNotification(): number {\r\n  return lastDisconnectionNotification;\r\n}\r\n\r\nexport function setLastDisconnectionNotification(timestamp: number): void {\r\n  lastDisconnectionNotification = timestamp;\r\n}\r\n\r\n", "/**\r\n * Utility functions for background service worker\r\n */\r\n\r\nimport { debugLogger } from \"../lib/logging\";\r\nimport { performanceMonitor } from \"../lib/perf\";\r\nimport { sessionCache } from \"../app/session\";\r\nimport { fetchRecentPushes } from \"../app/api/client\";\r\nimport {\r\n  getApiKey,\r\n  getAutoOpenLinks,\r\n  setPollingMode,\r\n  isPollingMode,\r\n} from \"./state\";\r\nimport type { Push, LinkPush } from \"../types/domain\";\r\nimport { isLinkPush } from \"../types/domain\";\r\nimport { createNotificationWithTimeout } from \"../app/notifications\";\r\nimport { ensureConfigLoaded } from \"../app/reconnect\";\r\nimport { globalEventBus } from \"../lib/events/event-bus\";\r\n\r\n// Guard flag to prevent concurrent context menu setup\r\n// Ensures idempotent behavior when multiple startup events fire\r\nlet isSettingUpContextMenu = false;\r\n\r\n/**\r\n * Connection status for icon updates\r\n */\r\nexport type ConnectionStatus =\r\n  | \"connected\"\r\n  | \"connecting\"\r\n  | \"disconnected\"\r\n  | \"degraded\";\r\n\r\n/**\r\n * Sanitize text to prevent XSS attacks\r\n * Removes HTML tags and dangerous characters\r\n *\r\n * DEFENSE-IN-DEPTH STRATEGY:\r\n * 1. This function provides basic sanitization for Chrome notification content\r\n * 2. The extension's CSP (Content Security Policy) provides strong XSS protection\r\n * 3. UI code (popup, options, etc.) uses textContent instead of innerHTML for user data\r\n * 4. This regex-based approach is sufficient for notification text (not rendered as HTML)\r\n *\r\n * NOTE: For HTML rendering, use textContent or a library like DOMPurify.\r\n * The popup's displayPushes() function correctly uses textContent for all user data.\r\n */\r\nfunction sanitizeText(text: string): string {\r\n  if (!text) return \"\";\r\n\r\n  // Remove HTML tags\r\n  let sanitized = text.replace(/<[^>]*>/g, \"\");\r\n\r\n  // Remove script-like content\r\n  sanitized = sanitized.replace(/javascript:/gi, \"\");\r\n  sanitized = sanitized.replace(/on\\w+\\s*=/gi, \"\");\r\n\r\n  // Trim and limit length\r\n  sanitized = sanitized.trim().substring(0, 1000);\r\n\r\n  return sanitized;\r\n}\r\n\r\n/**\r\n * Sanitize URL to prevent XSS attacks\r\n * Validates URL format and ensures it's safe\r\n */\r\nfunction sanitizeUrl(url: string): string {\r\n  if (!url) return \"\";\r\n\r\n  try {\r\n    const urlObj = new URL(url);\r\n    // Only allow http/https protocols\r\n    if (urlObj.protocol !== \"http:\" && urlObj.protocol !== \"https:\") {\r\n      return \"\";\r\n    }\r\n    return url;\r\n  } catch {\r\n    debugLogger.general(\"WARN\", \"Invalid URL provided\", { url });\r\n    return \"\";\r\n  }\r\n}\r\n\r\n/**\r\n * Validates if a given URL belongs to trusted domains for image loading.\r\n * This includes Pushbullet domains and Google secure content domains.\r\n * @param urlString The URL to validate.\r\n * @returns True if the URL is from a trusted domain, false otherwise.\r\n */\r\nfunction isTrustedImageUrl(urlString: string): boolean {\r\n  if (!urlString) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    const url = new URL(urlString);\r\n    // Trust Pushbullet domains and Google secure content domains\r\n    return (\r\n      url.hostname.endsWith(\".pushbullet.com\") ||\r\n      url.hostname.endsWith(\".pushbulletusercontent.com\") ||\r\n      /^lh[0-9]\\.googleusercontent\\.com$/.test(url.hostname)\r\n    );\r\n  } catch {\r\n    debugLogger.general(\"WARN\", \"Could not parse URL for domain check\", {\r\n      url: urlString,\r\n    });\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Update extension icon tooltip to show current state\r\n */\r\nexport function updateExtensionTooltip(stateDescription: string): void {\r\n  try {\r\n    chrome.action.setTitle({ title: stateDescription });\r\n    debugLogger.general(\"DEBUG\", \"Updated extension tooltip\", {\r\n      stateDescription,\r\n    });\r\n  } catch (error) {\r\n    debugLogger.general(\"ERROR\", \"Exception setting tooltip\", {\r\n      stateDescription,\r\n      error: (error as Error).message,\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Update extension icon based on connection status\r\n * Uses badge color instead of different icon files since service workers have issues loading icons\r\n */\r\nexport function updateConnectionIcon(status: ConnectionStatus): void {\r\n  try {\r\n    // Set badge text\r\n    const badgeText = \" \";\r\n\r\n    // Set badge color\r\n    const badgeColor =\r\n      status === \"connected\"\r\n        ? \"#4CAF50\" // Green\r\n        : status === \"connecting\"\r\n          ? \"#FFC107\" // Yellow\r\n          : status === \"degraded\"\r\n            ? \"#00BCD4\" // Cyan\r\n            : \"#F44336\"; // Red\r\n\r\n    chrome.action.setBadgeText({ text: badgeText });\r\n    chrome.action.setBadgeBackgroundColor({ color: badgeColor });\r\n\r\n    debugLogger.general(\"DEBUG\", \"Updated connection status badge\", {\r\n      status,\r\n      badgeText,\r\n      badgeColor,\r\n    });\r\n  } catch (error) {\r\n    debugLogger.general(\r\n      \"ERROR\",\r\n      \"Exception setting badge\",\r\n      {\r\n        status,\r\n        error: (error as Error).message,\r\n      },\r\n      error as Error,\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Refresh pushes from API and show notifications for new ones\r\n */\r\nexport async function refreshPushes(\r\n  notificationDataStore?: Map<string, Push>,\r\n): Promise<void> {\r\n  // RACE CONDITION FIX: Ensure configuration is loaded before processing pushes\r\n  // This prevents the autoOpenLinks setting from being its default (false) value\r\n  // when a push arrives before settings have finished loading from storage\r\n  await ensureConfigLoaded();\r\n\r\n  const apiKey = getApiKey();\r\n  if (!apiKey) {\r\n    debugLogger.general(\"WARN\", \"Cannot refresh pushes - no API key\");\r\n    return;\r\n  }\r\n\r\n  try {\r\n    debugLogger.general(\"DEBUG\", \"Refreshing pushes from API\");\r\n\r\n    // Get current push idens to detect new ones\r\n    const oldPushIdens = new Set(sessionCache.recentPushes.map((p) => p.iden));\r\n\r\n    const pushes = await fetchRecentPushes(apiKey);\r\n\r\n    // Find NEW pushes (not in old cache)\r\n    const newPushes = pushes.filter((p) => !oldPushIdens.has(p.iden));\r\n\r\n    debugLogger.general(\"INFO\", \"Pushes refreshed successfully\", {\r\n      totalPushes: pushes.length,\r\n      newPushes: newPushes.length,\r\n    });\r\n\r\n    // Update cache\r\n    sessionCache.recentPushes = pushes;\r\n    sessionCache.lastUpdated = Date.now();\r\n\r\n    // Show notifications for NEW pushes\r\n    for (const push of newPushes) {\r\n      debugLogger.general(\r\n        \"INFO\",\r\n        \"Showing notification for new push from tickle\",\r\n        {\r\n          pushIden: push.iden,\r\n          pushType: push.type,\r\n        },\r\n      );\r\n      // Don't await - fire and forget\r\n      showPushNotification(push, notificationDataStore).catch((error) => {\r\n        debugLogger.general(\r\n          \"ERROR\",\r\n          \"Failed to show notification\",\r\n          { pushIden: push.iden },\r\n          error,\r\n        );\r\n      });\r\n\r\n      // Auto-open links if setting is enabled\r\n      const autoOpenLinks = getAutoOpenLinks();\r\n      if (autoOpenLinks && isLinkPush(push)) {\r\n        debugLogger.general(\"INFO\", \"Auto-opening link push from tickle\", {\r\n          pushIden: push.iden,\r\n          url: (push as LinkPush).url,\r\n        });\r\n\r\n        chrome.tabs\r\n          .create({\r\n            url: (push as LinkPush).url,\r\n            active: false, // Open in background to avoid disrupting user\r\n          })\r\n          .catch((error) => {\r\n            debugLogger.general(\r\n              \"ERROR\",\r\n              \"Failed to auto-open link from tickle\",\r\n              {\r\n                url: (push as LinkPush).url,\r\n              },\r\n              error,\r\n            );\r\n          });\r\n      }\r\n    }\r\n\r\n    // Notify popup\r\n    chrome.runtime\r\n      .sendMessage({\r\n        action: \"pushesUpdated\",\r\n        pushes: pushes,\r\n      })\r\n      .catch(() => {\r\n        // Popup may not be open\r\n      });\r\n  } catch (error) {\r\n    debugLogger.general(\r\n      \"ERROR\",\r\n      \"Failed to refresh pushes\",\r\n      null,\r\n      error as Error,\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Counter for notification IDs\r\n */\r\nlet counter = 0;\r\n\r\n/**\r\n * Show push notification\r\n */\r\nexport async function showPushNotification(\r\n  push: Push,\r\n  notificationDataStore?: Map<string, Push>,\r\n): Promise<void> {\r\n  try {\r\n    // --- NEW GUARD CLAUSE: START ---\r\n    // This specifically catches the empty push that follows an SMS deletion.\r\n    // It checks for a push that is 'sms_changed' but has an empty or missing 'notifications' array.\r\n    if (\r\n      (push as any).type === \"sms_changed\" &&\r\n      (!(push as any).notifications || (push as any).notifications.length === 0)\r\n    ) {\r\n      debugLogger.notifications(\r\n        \"INFO\",\r\n        \"Ignoring sms_changed push with no notification content (deletion event).\",\r\n        { pushIden: push.iden },\r\n      );\r\n      return; // Exit the function immediately.\r\n    }\r\n    // --- NEW GUARD CLAUSE: END ---\r\n\r\n    const notificationId = `pushbullet-push-${counter++}-${Date.now()}`;\r\n    const baseOptions = {\r\n      iconUrl: chrome.runtime.getURL(\"icons/icon128.png\"),\r\n    };\r\n\r\n    let notificationOptions: chrome.notifications.NotificationOptions = {\r\n      ...baseOptions,\r\n      type: \"basic\",\r\n      title: \"Pushbullet\",\r\n      message: \"New push received\",\r\n    };\r\n\r\n    // Handle undecrypted pushes first\r\n    if (push.encrypted && \"ciphertext\" in push) {\r\n      notificationOptions = {\r\n        ...baseOptions,\r\n        type: \"basic\",\r\n        title: \"Pushbullet\",\r\n        message:\r\n          \"An encrypted push was received. To view future encrypted pushes you need to add the correct end2end password in options\",\r\n      };\r\n      debugLogger.notifications(\r\n        \"INFO\",\r\n        \"Showing notification for undecrypted push\",\r\n      );\r\n    } else if ((push as any).type === \"sms_changed\") {\r\n      // The condition is now much simpler because the guard clause at the top\r\n      // has already guaranteed that if we get here, the 'notifications' array\r\n      // exists and is not empty.\r\n\r\n      debugLogger.notifications(\r\n        \"DEBUG\",\r\n        \"Complete sms_changed push object received\",\r\n        { push },\r\n      );\r\n      const sms = (push as any).notifications[0];\r\n\r\n      // This redundant check is now removed, as the guard clause handles all empty cases.\r\n      // if (!sms.body) { ... }\r\n\r\n      const title = sms.title || \"New SMS\";\r\n      const message = sms.body; // We can trust that 'body' exists.\r\n      const imageUrl = sms.image_url;\n\n      if (imageUrl && isTrustedImageUrl(imageUrl)) {\n        try {\n          debugLogger.notifications(\n            \"DEBUG\",\n            \"Fetching contact photo for SMS notification\",\n            {\n              imageUrl,\n            },\n          );\n\n          // Fetch the image and convert to data URL to avoid CORS issues\n          const response = await fetch(imageUrl);\n\n          if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n          }\n\n          const blob = await response.blob();\n\n          // Convert blob to data URL\n          const reader = new FileReader();\n          const dataUrl = await new Promise<string>((resolve, reject) => {\n            reader.onloadend = () => resolve(reader.result as string);\n            reader.onerror = reject;\n            reader.readAsDataURL(blob);\n          });\n\n          debugLogger.notifications(\"DEBUG\", \"Contact photo converted to data URL\", {\n            originalUrl: imageUrl,\n            dataUrlLength: dataUrl.length,\n            blobSize: blob.size,\n            blobType: blob.type,\n          });\n\n          // Use data URL for notification (avoids CORS issues)\n          notificationOptions = {\n            ...baseOptions,\n            type: \"basic\",\n            title: title,\n            message: message,\n            iconUrl: dataUrl,\n          };\n\n          debugLogger.notifications(\n            \"INFO\",\n            \"Showing business card SMS notification with contact photo\",\n            {\n              title,\n              hasIcon: true,\n            },\n          );\n        } catch (error) {\n          debugLogger.notifications(\n            \"WARN\",\n            \"Failed to fetch/convert contact photo, showing SMS without image\",\n            {\n              imageUrl,\n              error: (error as Error).message,\n            },\n          );\n\n          // Fallback: notification without image\n          notificationOptions = {\n            ...baseOptions,\n            type: \"basic\",\n            title: title,\n            message: message,\n          };\n        }\n      } else {\n        // Regular SMS without photo\n        notificationOptions = {\n          ...baseOptions,\n          type: \"basic\",\n          title: title,\n          message: message,\n        };\n\n        debugLogger.notifications(\"INFO\", \"Showing basic notification for SMS\", {\n          title,\n          hasImage: false,\n        });\n      }\n    } else {\r\n      // Standard handler for note, link, and file\r\n      let title = \"Pushbullet\";\r\n      let message = \"\";\r\n\r\n      if (push.type === \"note\") {\r\n        title = push.title || \"New Note\";\r\n        message = push.body || \"\";\r\n\r\n        notificationOptions = {\r\n          ...baseOptions,\r\n          type: \"basic\",\r\n          title: title,\r\n          message: message,\r\n        };\r\n      } else if (push.type === \"link\") {\r\n        title = push.title || push.url || \"New Link\";\r\n        message = push.url || \"\";\r\n\r\n        notificationOptions = {\r\n          ...baseOptions,\r\n          type: \"basic\",\r\n          title: title,\r\n          message: message,\r\n        };\r\n      } else if (push.type === \"file\") {\r\n        // Security validation for image URLs in file pushes\r\n        debugLogger.notifications(\r\n          \"DEBUG\",\r\n          \"Complete file push object received\",\r\n          { push },\r\n        );\r\n\r\n        let fileTitle = \"New File\";\r\n        let fileMessage = \"\";\r\n\r\n        if ((push as any).title) {\r\n          // MMS-style file push\r\n          fileTitle = (push as any).title;\r\n          fileMessage =\r\n            (push as any).body || `Image (${(push as any).file_type})`;\r\n        } else {\r\n          // Regular file push\r\n          fileTitle = `New File: ${(push as any).file_name || \"unknown file\"}`;\r\n          fileMessage = (push as any).body || (push as any).file_type || \"\";\r\n        }\r\n\r\n        // Security validation for image URLs - check both image_url and file_url\r\n        const imageUrl = (push as any).image_url;\r\n        const fileUrl = (push as any).file_url;\r\n\r\n        // Determine which URL to use for image preview\r\n        let previewUrl = null;\r\n        if (imageUrl && isTrustedImageUrl(imageUrl)) {\r\n          previewUrl = imageUrl;\r\n        } else if (\r\n          fileUrl &&\r\n          isTrustedImageUrl(fileUrl) &&\r\n          (push as any).file_type?.startsWith(\"image/\")\r\n        ) {\r\n          previewUrl = fileUrl;\r\n        }\r\n\r\n        if (previewUrl) {\r\n          // Show image notification for trusted Pushbullet URLs\r\n          notificationOptions = {\r\n            ...baseOptions,\r\n            type: \"image\",\r\n            title: fileTitle,\r\n            message: fileMessage,\r\n            imageUrl: previewUrl,\r\n          };\r\n          debugLogger.notifications(\r\n            \"INFO\",\r\n            \"Showing image notification for trusted file push\",\r\n            {\r\n              fileName: (push as any).file_name,\r\n              previewUrl: previewUrl,\r\n            },\r\n          );\r\n        } else {\r\n          // Fallback to basic notification for security\r\n          notificationOptions = {\r\n            ...baseOptions,\r\n            type: \"basic\",\r\n            title: fileTitle,\r\n            message: fileMessage,\r\n          };\r\n          if (imageUrl && !isTrustedImageUrl(imageUrl)) {\r\n            debugLogger.notifications(\r\n              \"WARN\",\r\n              \"Ignored image from untrusted domain for file push\",\r\n              {\r\n                imageUrl: imageUrl,\r\n              },\r\n            );\r\n          }\r\n        }\r\n      } else if (push.type === \"mirror\") {\n        // Format title as \"AppName: SenderName\" for better clarity\n        const mirrorTitle =\n          push.application_name && push.title\n            ? `${push.application_name}: ${push.title}`\n            : push.title || push.application_name || \"Notification\";\n        const mirrorMessage = push.body || \"\";\n        const iconData = (push as any).icon;\n\n        // Check if mirror has an icon (base64 image data)\n        if (iconData && typeof iconData === 'string' && iconData.startsWith('/9j/')) {\n          debugLogger.notifications(\"DEBUG\", \"Processing mirror notification icon\", {\n            iconDataLength: iconData.length,\n            title: mirrorTitle,\n          });\n\n          // Icon is already base64 JPEG data, just add data URL prefix\n          const dataUrl = `data:image/jpeg;base64,${iconData}`;\n\n          notificationOptions = {\n            ...baseOptions,\n            type: \"basic\",\n            title: mirrorTitle,\n            message: mirrorMessage,\n            iconUrl: dataUrl,\n          };\n\n          debugLogger.notifications(\"INFO\", \"Showing mirror notification with icon\", {\n            title: mirrorTitle,\n            hasIcon: true,\n            application: push.application_name,\n          });\n        } else {\n          // Security validation for image URLs (fallback)\n          const mirrorImageUrl = (push as any).image_url;\n          if (mirrorImageUrl && isTrustedImageUrl(mirrorImageUrl)) {\n            notificationOptions = {\n              ...baseOptions,\n              type: \"image\",\n              title: mirrorTitle,\n              message: mirrorMessage,\n              imageUrl: mirrorImageUrl,\n            };\n            debugLogger.notifications(\n              \"INFO\",\n              \"Showing image notification for trusted mirrored push\",\n              { pushType: push.type },\n            );\n          } else {\n            // No icon, show basic notification\n            notificationOptions = {\n              ...baseOptions,\n              type: \"basic\",\n              title: mirrorTitle,\n              message: mirrorMessage,\n            };\n\n            debugLogger.notifications(\"INFO\", \"Showing mirror notification without icon\", {\n              title: mirrorTitle,\n              hasIcon: false,\n              application: push.application_name,\n            });\n          }\n        }\n      } else {\r\n        // Default handler for other types\r\n        const defaultTitle = \"Pushbullet\";\r\n        const defaultMessage = `New ${push.type}`;\r\n\r\n        notificationOptions = {\r\n          ...baseOptions,\r\n          type: \"basic\",\r\n          title: defaultTitle,\r\n          message: defaultMessage,\r\n        };\r\n        debugLogger.notifications(\"INFO\", \"Showing basic notification\", {\r\n          pushType: push.type,\r\n        });\r\n      }\r\n    }\r\n\r\n    // Ensure all required properties are defined\r\n    const finalNotificationOptions: chrome.notifications.NotificationCreateOptions =\r\n      {\r\n        type: notificationOptions.type || \"basic\",\r\n        title: notificationOptions.title || \"Pushbullet\",\r\n        message: notificationOptions.message || \"New push received\",\r\n        iconUrl:\r\n          notificationOptions.iconUrl ||\r\n          chrome.runtime.getURL(\"icons/icon128.png\"),\r\n      };\r\n\r\n    // Add optional properties if they exist\r\n    if (notificationOptions.imageUrl) {\r\n      finalNotificationOptions.imageUrl = notificationOptions.imageUrl;\r\n    }\r\n\r\n    await chrome.notifications.create(notificationId, finalNotificationOptions);\r\n\r\n    if (notificationDataStore) {\r\n      notificationDataStore.set(notificationId, push);\r\n    }\r\n\r\n    performanceMonitor.recordNotificationCreated();\r\n    debugLogger.notifications(\"INFO\", \"Push notification created\", {\r\n      notificationId,\r\n      pushType: push.type,\r\n    });\r\n  } catch (error) {\r\n    performanceMonitor.recordNotificationFailed();\r\n    debugLogger.notifications(\r\n      \"ERROR\",\r\n      \"Failed to show push notification\",\r\n      { pushIden: push.iden },\r\n      error as Error,\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Check if we should enter polling mode\r\n */\r\nexport function checkPollingMode(): void {\r\n  const qualityMetrics = performanceMonitor.getQualityMetrics();\r\n\r\n  if (qualityMetrics.consecutiveFailures >= 3 && !isPollingMode()) {\r\n    debugLogger.general(\r\n      \"WARN\",\r\n      \"Entering polling mode due to consecutive failures\",\r\n      {\r\n        consecutiveFailures: qualityMetrics.consecutiveFailures,\r\n      },\r\n    );\r\n\r\n    setPollingMode(true);\r\n\r\n    // Start polling alarm\r\n    chrome.alarms.create(\"pollingFallback\", { periodInMinutes: 1 });\r\n\r\n    debugLogger.general(\"INFO\", \"Polling mode activated\", {\r\n      interval: \"1 minute\",\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Stop polling mode\r\n */\r\nexport function stopPollingMode(): void {\r\n  if (isPollingMode()) {\r\n    debugLogger.general(\r\n      \"INFO\",\r\n      \"Stopping polling mode - WebSocket reconnected\",\r\n    );\r\n    setPollingMode(false);\r\n    chrome.alarms.clear(\"pollingFallback\");\r\n    updateConnectionIcon(\"connected\");\r\n  }\r\n}\r\n\r\n/**\r\n * Perform polling fetch\r\n */\r\nexport async function performPollingFetch(): Promise<void> {\r\n  const apiKey = getApiKey();\r\n  if (!apiKey) {\r\n    debugLogger.general(\"WARN\", \"Cannot perform polling fetch - no API key\");\r\n    return;\r\n  }\r\n\r\n  debugLogger.general(\"DEBUG\", \"Performing polling fetch\", {\r\n    timestamp: new Date().toISOString(),\r\n  });\r\n\r\n  try {\r\n    // Fetch recent pushes\r\n    const pushes = await fetchRecentPushes(apiKey);\r\n\r\n    // If fetch is successful, reset the failure counter.\r\n    performanceMonitor.recordHealthCheckSuccess();\r\n\r\n    // Check for new pushes\r\n    const latestPush = pushes[0];\r\n    if (latestPush && sessionCache.recentPushes[0]?.iden !== latestPush.iden) {\r\n      debugLogger.general(\"INFO\", \"New push detected via polling\", {\r\n        pushId: latestPush.iden,\r\n        pushType: latestPush.type,\r\n      });\r\n\r\n      // Update session cache\r\n      sessionCache.recentPushes = pushes;\r\n\r\n      // Notify popup\r\n      chrome.runtime\r\n        .sendMessage({\r\n          action: \"pushesUpdated\",\r\n          pushes: pushes,\r\n        })\r\n        .catch(() => {});\r\n    }\r\n  } catch (error) {\r\n    debugLogger.general(\"ERROR\", \"Polling fetch failed\", null, error as Error);\r\n    // Record the failure.\r\n    performanceMonitor.recordHealthCheckFailure();\r\n  }\r\n}\r\n\r\n/**\r\n * Perform WebSocket health check\r\n */\r\nexport function performWebSocketHealthCheck(\r\n  wsClient: any,\r\n  connectFn: () => void,\r\n): void {\r\n  const apiKey = getApiKey();\r\n\r\n  // This is the key condition:\r\n  // If we SHOULD be connected (we have an API key) but we ARE NOT...\r\n  if (apiKey && (!wsClient || !wsClient.isConnected())) {\r\n    debugLogger.websocket(\r\n      \"WARN\",\r\n      \"Health check failed - WebSocket is disconnected. Triggering reconnect.\",\r\n    );\r\n    performanceMonitor.recordHealthCheckFailure();\r\n\r\n    // ...then it's the health check's job to initiate the connection.\r\n    connectFn(); // This calls connectWebSocket in the background script.\r\n  }\r\n  // The new health check for active connections.\r\n  else if (wsClient && wsClient.isConnected()) {\r\n    if (wsClient.isConnectionHealthy()) {\r\n      debugLogger.websocket(\"DEBUG\", \"WebSocket connection is healthy.\");\r\n      performanceMonitor.recordHealthCheckSuccess();\r\n    } else {\r\n      debugLogger.websocket(\r\n        \"WARN\",\r\n        \"WebSocket connection is unhealthy. Triggering reconnect.\",\r\n      );\r\n      performanceMonitor.recordHealthCheckFailure();\r\n      globalEventBus.emit(\"websocket:disconnected\");\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Update popup connection state\r\n */\r\nexport function updatePopupConnectionState(state: string): void {\r\n  chrome.runtime\r\n    .sendMessage({\r\n      action: \"connectionStateChanged\",\r\n      state: state,\r\n    })\r\n    .catch(() => {\r\n      // Popup may not be open\r\n    });\r\n}\r\n\r\n/**\r\n * Setup context menu\r\n * Idempotent - safe to call from multiple event listeners\r\n */\r\nexport function setupContextMenu(): void {\r\n  // Guard against concurrent setup attempts\r\n  if (isSettingUpContextMenu) {\r\n    debugLogger.general(\r\n      \"INFO\",\r\n      \"Context menu setup already in progress, skipping\",\r\n    );\r\n    return;\r\n  }\r\n\r\n  isSettingUpContextMenu = true;\r\n\r\n  try {\r\n    chrome.contextMenus.removeAll(() => {\r\n      // Check for errors from removeAll\r\n      if (chrome.runtime.lastError) {\r\n        debugLogger.general(\r\n          \"ERROR\",\r\n          \"Failed to remove existing context menus\",\r\n          {\r\n            error: chrome.runtime.lastError.message,\r\n          },\r\n        );\r\n        isSettingUpContextMenu = false;\r\n        return;\r\n      }\r\n\r\n      // Now that menus are removed, create new ones\r\n      try {\r\n        chrome.contextMenus.create({\r\n          id: \"push-link\",\r\n          title: \"Push this link\",\r\n          contexts: [\"link\"],\r\n        });\r\n        if (chrome.runtime.lastError) {\r\n          const lastError = chrome.runtime.lastError as any;\r\n          const errorMessage = lastError.message || \"Unknown error\";\r\n          debugLogger.general(\"ERROR\", \"Failed to create push-link menu\", {\r\n            error: errorMessage,\r\n          });\r\n        }\r\n\r\n        chrome.contextMenus.create({\r\n          id: \"push-page\",\r\n          title: \"Push this page\",\r\n          contexts: [\"page\"],\r\n        });\r\n        if (chrome.runtime.lastError) {\r\n          const lastError = chrome.runtime.lastError as any;\r\n          const errorMessage = lastError.message || \"Unknown error\";\r\n          debugLogger.general(\"ERROR\", \"Failed to create push-page menu\", {\r\n            error: errorMessage,\r\n          });\r\n        }\r\n\r\n        chrome.contextMenus.create({\r\n          id: \"push-selection\",\r\n          title: \"Push selected text\",\r\n          contexts: [\"selection\"],\r\n        });\r\n        if (chrome.runtime.lastError) {\r\n          const lastError = chrome.runtime.lastError as any;\r\n          const errorMessage = lastError.message || \"Unknown error\";\r\n          debugLogger.general(\"ERROR\", \"Failed to create push-selection menu\", {\r\n            error: errorMessage,\r\n          });\r\n        }\r\n\r\n        chrome.contextMenus.create({\r\n          id: \"push-image\",\r\n          title: \"Push this image\",\r\n          contexts: [\"image\"],\r\n        });\r\n        if (chrome.runtime.lastError) {\r\n          const lastError = chrome.runtime.lastError as any;\r\n          const errorMessage = lastError.message || \"Unknown error\";\r\n          debugLogger.general(\"ERROR\", \"Failed to create push-image menu\", {\r\n            error: errorMessage,\r\n          });\r\n        }\r\n\r\n        debugLogger.general(\"INFO\", \"Context menu created successfully\");\r\n      } finally {\r\n        // Always clear the guard flag when done\r\n        isSettingUpContextMenu = false;\r\n      }\r\n    });\r\n  } catch (error) {\r\n    debugLogger.general(\r\n      \"ERROR\",\r\n      \"Failed to create context menu\",\r\n      null,\r\n      error as Error,\r\n    );\r\n    isSettingUpContextMenu = false;\r\n  }\r\n}\r\n\r\n/**\r\n * Push a link\r\n */\r\nexport async function pushLink(url: string, title?: string): Promise<void> {\r\n  const apiKey = getApiKey();\r\n  if (!apiKey) {\r\n    debugLogger.general(\"WARN\", \"Cannot push link - no API key\");\r\n    return;\r\n  }\r\n\r\n  // Sanitize inputs to prevent XSS\r\n  const sanitizedUrl = sanitizeUrl(url);\r\n  const sanitizedTitle = sanitizeText(title || \"Link\");\r\n\r\n  if (!sanitizedUrl) {\r\n    debugLogger.general(\"ERROR\", \"Invalid URL provided\", { url });\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(\"https://api.pushbullet.com/v2/pushes\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Token\": apiKey,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        type: \"link\",\r\n        title: sanitizedTitle,\r\n        url: sanitizedUrl,\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to push link: ${response.status}`);\r\n    }\r\n\r\n    debugLogger.general(\"INFO\", \"Link pushed successfully\", { url, title });\r\n\r\n    createNotificationWithTimeout(\"pushbullet-link-sent\", {\r\n      type: \"basic\",\r\n      iconUrl: \"icons/icon128.png\",\r\n      title: \"Link Sent\",\r\n      message: title || url,\r\n    });\r\n  } catch (error) {\r\n    debugLogger.general(\r\n      \"ERROR\",\r\n      \"Failed to push link\",\r\n      { url, title },\r\n      error as Error,\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Push a note\r\n */\r\nexport async function pushNote(title: string, body: string): Promise<void> {\r\n  const apiKey = getApiKey();\r\n  if (!apiKey) {\r\n    debugLogger.general(\"WARN\", \"Cannot push note - no API key\");\r\n    return;\r\n  }\r\n\r\n  // Sanitize inputs to prevent XSS\r\n  const sanitizedTitle = sanitizeText(title);\r\n  const sanitizedBody = sanitizeText(body);\r\n\r\n  try {\r\n    const response = await fetch(\"https://api.pushbullet.com/v2/pushes\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Token\": apiKey,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        type: \"note\",\r\n        title: sanitizedTitle,\r\n        body: sanitizedBody,\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to push note: ${response.status}`);\r\n    }\r\n\r\n    debugLogger.general(\"INFO\", \"Note pushed successfully\", { title });\r\n\r\n    createNotificationWithTimeout(\"pushbullet-note-sent\", {\r\n      type: \"basic\",\r\n      iconUrl: \"icons/icon128.png\",\r\n      title: \"Note Sent\",\r\n      message: title,\r\n    });\r\n  } catch (error) {\r\n    debugLogger.general(\r\n      \"ERROR\",\r\n      \"Failed to push note\",\r\n      { title },\r\n      error as Error,\r\n    );\r\n  }\r\n}\r\n", "/**\r\n * Service Worker State Machine\r\n * \r\n * This module implements a State Machine Pattern to centralize all service worker\r\n * lifecycle logic. Instead of scattered state flags (initializationState.inProgress,\r\n * isPollingMode, etc.), we have a single, explicit state machine.\r\n * \r\n * Benefits:\r\n * - Predictable behavior (single currentState variable)\r\n * - Explicit transitions (transition('WS_CONNECTED'))\r\n * - No invalid states (state machine ensures only valid transitions)\r\n * - Easy to debug (state transitions are logged)\r\n * - Easy to test (can test each state and transition independently)\r\n * \r\n * See ADR 0005 for full design documentation.\r\n */\r\n\r\nimport { debugLogger } from '../lib/logging';\r\nimport { updateExtensionTooltip, updateConnectionIcon } from './utils';\r\n\r\n/**\r\n * Service Worker States\r\n * \r\n * These represent all possible states the service worker can be in.\r\n */\r\nexport enum ServiceWorkerState {\r\n  IDLE = 'idle',                 // Fresh start, no API key\r\n  INITIALIZING = 'initializing', // API key present, fetching session data\r\n  READY = 'ready',               // Authenticated, WebSocket connected\r\n  DEGRADED = 'degraded',         // Authenticated, using polling fallback\r\n  RECONNECTING = 'reconnecting', // Attempting to restore real-time connection\r\n  ERROR = 'error',               // Permanent, unrecoverable error\r\n}\r\n\r\n/**\r\n * Service Worker Events\r\n * \r\n * These are the events that can trigger state transitions.\r\n */\r\nexport type ServiceWorkerEvent =\r\n  | 'STARTUP'            // onInstalled or onStartup\r\n  | 'API_KEY_SET'        // User saves a new API key\r\n  | 'INIT_SUCCESS'       // Session data successfully fetched\r\n  | 'INIT_FAILURE'       // Session data fetching failed\r\n  | 'WS_CONNECTED'       // WebSocket connected successfully\r\n  | 'WS_DISCONNECTED'    // WebSocket disconnected (transient error)\r\n  | 'WS_PERMANENT_ERROR' // WebSocket disconnected (permanent error)\r\n  | 'ATTEMPT_RECONNECT'  // Health check triggered reconnect attempt\r\n  | 'LOGOUT';            // User logged out\r\n\r\n/**\r\n * State Machine Callbacks\r\n * \r\n * These callbacks are called when entering/exiting states.\r\n * They allow the state machine to trigger side effects without\r\n * being tightly coupled to the background script.\r\n */\r\nexport interface StateMachineCallbacks {\r\n  onInitialize?: (data?: any) => Promise<void>;\r\n  onConnectWebSocket?: () => void;\r\n  onStartPolling?: () => void;\r\n  onStopPolling?: () => void;\r\n  onShowError?: (error: string) => void;\r\n  onClearData?: () => Promise<void>;\r\n  onDisconnectWebSocket?: () => void;\r\n}\r\n\r\n/**\r\n * Service Worker State Machine\r\n * \r\n * Manages the lifecycle of the service worker through explicit states and transitions.\r\n */\r\nexport class ServiceWorkerStateMachine {\r\n  private currentState: ServiceWorkerState = ServiceWorkerState.IDLE;\r\n  private callbacks: StateMachineCallbacks;\r\n\r\n  private constructor(callbacks: StateMachineCallbacks) {\r\n    this.callbacks = callbacks;\r\n    debugLogger.general('INFO', '[StateMachine] Initialized', { initialState: this.currentState });\r\n  }\r\n\r\n  /**\r\n   * Create a new state machine instance with hydrated state from storage\r\n   *\r\n   * This static factory method is the only way to create a ServiceWorkerStateMachine.\r\n   * It reads the last known state from chrome.storage.local and initializes the\r\n   * state machine with that state, ensuring continuity across service worker restarts.\r\n   *\r\n   * @param callbacks - The callbacks to use for state transitions\r\n   * @returns A promise that resolves to a fully initialized state machine\r\n   */\r\n  public static async create(callbacks: StateMachineCallbacks): Promise<ServiceWorkerStateMachine> {\r\n    const instance = new ServiceWorkerStateMachine(callbacks);\r\n\r\n    try {\r\n      const { lastKnownState } = await chrome.storage.local.get('lastKnownState');\r\n\r\n      if (lastKnownState && Object.values(ServiceWorkerState).includes(lastKnownState)) {\r\n        instance.currentState = lastKnownState as ServiceWorkerState;\r\n        debugLogger.general('INFO', '[StateMachine] Hydrated state from storage', {\r\n          restoredState: instance.currentState\r\n        });\r\n      } else {\r\n        debugLogger.general('INFO', '[StateMachine] No valid state in storage, using default', {\r\n          initialState: instance.currentState\r\n        });\r\n      }\r\n    } catch (error) {\r\n      debugLogger.storage('ERROR', '[StateMachine] Failed to hydrate state, defaulting to IDLE', null, error as Error);\r\n      instance.currentState = ServiceWorkerState.IDLE;\r\n    }\r\n\r\n    // After hydrating its state, the state machine is now the source of truth.\r\n    // It is now its responsibility to set the initial UI to match its state.\r\n\r\n    // 1. Update the tooltip.\r\n    updateExtensionTooltip(instance.getStateDescription());\r\n\r\n    // 2. Update the icon badge color.\r\n    switch (instance.currentState) {\r\n    case ServiceWorkerState.READY:\r\n      updateConnectionIcon(\"connected\");\r\n      break;\r\n    case ServiceWorkerState.INITIALIZING:\r\n    case ServiceWorkerState.RECONNECTING:\r\n      updateConnectionIcon(\"connecting\");\r\n      break;\r\n    case ServiceWorkerState.DEGRADED:\r\n      updateConnectionIcon(\"degraded\");\r\n      break;\r\n    case ServiceWorkerState.ERROR:\r\n    case ServiceWorkerState.IDLE:\r\n      updateConnectionIcon(\"disconnected\"); // Red\r\n      break;\r\n    }\r\n\r\n    return instance;\r\n  }\r\n\r\n  /**\r\n   * Get the current state\r\n   */\r\n  public getCurrentState(): ServiceWorkerState {\r\n    return this.currentState;\r\n  }\r\n\r\n  /**\r\n   * Check if in a specific state\r\n   */\r\n  public isInState(state: ServiceWorkerState): boolean {\r\n    return this.currentState === state;\r\n  }\r\n\r\n  /**\r\n   * Transition to a new state based on an event\r\n   * \r\n   * @param event - The event that triggers the transition\r\n   * @param data - Optional data to pass to the state entry handler\r\n   */\r\n  public async transition(event: ServiceWorkerEvent, data?: any): Promise<void> {\r\n    const nextState = this.getNextState(event, data);\r\n\r\n    if (nextState !== this.currentState) {\r\n      debugLogger.general('INFO', `[StateMachine] Transition`, {\r\n        from: this.currentState,\r\n        event,\r\n        to: nextState\r\n      });\r\n\r\n      // Run exit actions for the old state\r\n      await this.onStateExit(this.currentState, nextState);\r\n\r\n      // Change state\r\n      const previousState = this.currentState;\r\n      this.currentState = nextState;\r\n\r\n      // Run entry actions for the new state\r\n      await this.onStateEnter(this.currentState, previousState, data);\r\n\r\n      // ICON PERSISTENCE FIX: Persist state to storage so icon badge survives service worker restarts\r\n      // This ensures users always see the correct extension state (error, connected, etc.)\r\n      // even after Chrome shuts down the service worker or the browser is restarted\r\n      try {\r\n        await chrome.storage.local.set({\r\n          lastKnownState: this.currentState,\r\n          lastKnownStateDescription: this.getStateDescription()\r\n        });\r\n        debugLogger.storage('DEBUG', '[StateMachine] Persisted new state to storage', { state: this.currentState });\r\n      } catch (error) {\r\n        debugLogger.storage('ERROR', '[StateMachine] Failed to persist state', null, error as Error);\r\n      }\r\n    } else {\r\n      debugLogger.general('DEBUG', `[StateMachine] No transition`, {\r\n        state: this.currentState,\r\n        event\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine the next state based on current state and event\r\n   *\r\n   * This implements the state transition table from ADR 0005.\r\n   */\r\n  private getNextState(event: ServiceWorkerEvent, data?: any): ServiceWorkerState {\r\n    // LOGOUT can happen from any state\r\n    if (event === 'LOGOUT') {\r\n      return ServiceWorkerState.IDLE;\r\n    }\r\n\r\n    // STARTUP event handling: When service worker restarts, we need to re-initialize\r\n    // if we have an API key, regardless of the current state. This handles the case\r\n    // where the state machine was hydrated to READY/DEGRADED but the service worker\r\n    // has restarted and needs to restore the session.\r\n    if (event === 'STARTUP') {\r\n      if (data?.hasApiKey) {\r\n        // If we're already in INITIALIZING, stay there to avoid duplicate initialization\r\n        if (this.currentState === ServiceWorkerState.INITIALIZING) {\r\n          return ServiceWorkerState.INITIALIZING;\r\n        }\r\n        // From any other state, transition to INITIALIZING to restore session\r\n        return ServiceWorkerState.INITIALIZING;\r\n      } else {\r\n        // No API key, go to IDLE\r\n        return ServiceWorkerState.IDLE;\r\n      }\r\n    }\r\n\r\n    switch (this.currentState) {\r\n    case ServiceWorkerState.IDLE:\r\n      if (event === 'API_KEY_SET') {\r\n        return ServiceWorkerState.INITIALIZING;\r\n      }\r\n      break;\r\n\r\n    case ServiceWorkerState.INITIALIZING:\r\n      if (event === 'INIT_SUCCESS') {\r\n        return ServiceWorkerState.READY;\r\n      }\r\n      if (event === 'INIT_FAILURE') {\r\n        return ServiceWorkerState.ERROR;\r\n      }\r\n      break;\r\n\r\n    case ServiceWorkerState.READY:\r\n      if (event === 'WS_DISCONNECTED') {\r\n        return ServiceWorkerState.DEGRADED;\r\n      }\r\n      if (event === 'WS_PERMANENT_ERROR') {\r\n        return ServiceWorkerState.ERROR;\r\n      }\r\n      break;\r\n\r\n    case ServiceWorkerState.DEGRADED:\r\n      if (event === 'WS_CONNECTED') {\r\n        return ServiceWorkerState.READY;\r\n      }\r\n      if (event === 'WS_PERMANENT_ERROR') {\r\n        return ServiceWorkerState.ERROR;\r\n      }\r\n      if (event === 'ATTEMPT_RECONNECT') {\r\n        return ServiceWorkerState.RECONNECTING;\r\n      }\r\n      break;\r\n\r\n    case ServiceWorkerState.RECONNECTING:\r\n      // Rule 1: If connection succeeds, go to READY (green).\r\n      if (event === 'WS_CONNECTED') {\r\n        return ServiceWorkerState.READY;\r\n      }\r\n      // Rule 2: If connection fails, go back to DEGRADED (cyan) to wait for the next attempt.\r\n      if (event === 'WS_DISCONNECTED') {\r\n        return ServiceWorkerState.DEGRADED;\r\n      }\r\n      // Rule 3: If it's a permanent error, go to ERROR (red).\r\n      if (event === 'WS_PERMANENT_ERROR') {\r\n        return ServiceWorkerState.ERROR;\r\n      }\r\n      break;\r\n\r\n    case ServiceWorkerState.ERROR:\r\n      if (event === 'API_KEY_SET') {\r\n        return ServiceWorkerState.INITIALIZING;\r\n      }\r\n      break;\r\n    }\r\n\r\n    // No valid transition found, stay in current state\r\n    return this.currentState;\r\n  }\r\n\r\n  /**\r\n   * Handle entering a new state\r\n   * \r\n   * This is where side effects happen (calling callbacks).\r\n   */\r\n  private async onStateEnter(\r\n    state: ServiceWorkerState,\r\n    previousState: ServiceWorkerState,\r\n    data?: any\r\n  ): Promise<void> {\r\n    debugLogger.general('DEBUG', `[StateMachine] Entering state`, { state, previousState });\r\n\r\n    // Update extension tooltip to show current state\r\n    updateExtensionTooltip(this.getStateDescription());\r\n\r\n    switch (state) {\r\n    case ServiceWorkerState.IDLE:\r\n      updateConnectionIcon(\"disconnected\");  // Red\r\n      // Clean slate - clear all data\r\n      if (this.callbacks.onClearData) {\r\n        await this.callbacks.onClearData();\r\n      }\r\n      if (this.callbacks.onDisconnectWebSocket) {\r\n        this.callbacks.onDisconnectWebSocket();\r\n      }\r\n      break;\r\n\r\n    case ServiceWorkerState.INITIALIZING:\r\n      // The INITIALIZING state is now responsible for the \"connecting\" UI.\r\n      updateConnectionIcon('connecting');\r\n      // Start initialization process\r\n      if (this.callbacks.onInitialize) {\r\n        try {\r\n          await this.callbacks.onInitialize(data);\r\n          // Initialization succeeded - transition to READY\r\n          await this.transition('INIT_SUCCESS');\r\n        } catch (error) {\r\n          // Initialization failed - transition to ERROR\r\n          debugLogger.general('ERROR', '[StateMachine] Initialization failed', null, error as Error);\r\n          await this.transition('INIT_FAILURE');\r\n        }\r\n      }\r\n      break;\r\n\r\n    case ServiceWorkerState.READY:\r\n      updateConnectionIcon(\"connected\");\r\n      // Stop polling if we were in DEGRADED mode\r\n      if (previousState === ServiceWorkerState.DEGRADED && this.callbacks.onStopPolling) {\r\n        this.callbacks.onStopPolling();\r\n      }\r\n      // Connect WebSocket if coming from INITIALIZING\r\n      if (previousState === ServiceWorkerState.INITIALIZING && this.callbacks.onConnectWebSocket) {\r\n        this.callbacks.onConnectWebSocket();\r\n      }\r\n      break;\r\n\r\n    case ServiceWorkerState.DEGRADED:\r\n      // When we ENTER the DEGRADED state, we start polling\r\n      debugLogger.general('WARN', 'Entering DEGRADED state. Starting polling fallback.');\r\n      // Directly update the icon to reflect the new state\r\n      updateConnectionIcon('degraded');\r\n      // Call the callback for consistency\r\n      if (this.callbacks.onStartPolling) {\r\n        this.callbacks.onStartPolling();\r\n      }\r\n      break;\r\n\r\n    case ServiceWorkerState.RECONNECTING:\r\n      // Update icon to yellow (connecting)\r\n      updateConnectionIcon('connecting');\r\n      // Now, actually start the connection attempt\r\n      if (this.callbacks.onConnectWebSocket) {\r\n        this.callbacks.onConnectWebSocket();\r\n      }\r\n      break;\r\n\r\n    case ServiceWorkerState.ERROR:\r\n      // Update icon to red (disconnected)\r\n      updateConnectionIcon('disconnected');\r\n      // Show error notification\r\n      if (this.callbacks.onShowError) {\r\n        this.callbacks.onShowError('Service worker encountered an error');\r\n      }\r\n      break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle exiting a state\r\n   * \r\n   * Optional cleanup logic when leaving a state.\r\n   */\r\n  private async onStateExit(\r\n    state: ServiceWorkerState,\r\n    nextState: ServiceWorkerState\r\n  ): Promise<void> {\r\n    debugLogger.general('DEBUG', `[StateMachine] Exiting state`, { state, nextState });\r\n\r\n    // When we EXIT the DEGRADED state, we must stop polling\r\n    if (state === ServiceWorkerState.DEGRADED) {\r\n      debugLogger.general('INFO', 'Exiting DEGRADED state. Stopping polling fallback.');\r\n      if (this.callbacks.onStopPolling) {\r\n        this.callbacks.onStopPolling();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a human-readable description of the current state\r\n   */\r\n  public getStateDescription(): string {\r\n    switch (this.currentState) {\r\n    case ServiceWorkerState.IDLE:\r\n      return 'Idle - No API key configured';\r\n    case ServiceWorkerState.INITIALIZING:\r\n      return 'Initializing - Fetching session data';\r\n    case ServiceWorkerState.READY:\r\n      return 'Ready - Connected via WebSocket';\r\n    case ServiceWorkerState.DEGRADED:\r\n      return 'Degraded - Using polling fallback';\r\n    case ServiceWorkerState.RECONNECTING:\r\n      return 'Reconnecting - Attempting to restore real-time connection';\r\n    case ServiceWorkerState.ERROR:\r\n      return 'Error - Unrecoverable error occurred';\r\n    default:\r\n      return 'Unknown state';\r\n    }\r\n  }\r\n}\r\n\r\n", "/**\r\n * Message sender validation for security\r\n * Prevents external extensions/pages from sending privileged messages\r\n */\r\n\r\nimport { debugLogger } from '../logging';\r\n\r\n/**\r\n * Validate that message sender is from this extension\r\n */\r\nexport function isValidSender(sender: chrome.runtime.MessageSender): boolean {\r\n  // Must have a valid sender object\r\n  if (!sender) {\r\n    debugLogger.general('WARN', 'Message received with no sender');\r\n    return false;\r\n  }\r\n\r\n  // Must be from this extension\r\n  if (sender.id !== chrome.runtime.id) {\r\n    debugLogger.general('WARN', 'Message received from external extension', {\r\n      senderId: sender.id,\r\n      expectedId: chrome.runtime.id\r\n    });\r\n    return false;\r\n  }\r\n\r\n  // Must be from an extension page (not a content script)\r\n  if (sender.url) {\r\n    const extensionUrl = chrome.runtime.getURL('');\r\n    if (!sender.url.startsWith(extensionUrl)) {\r\n      debugLogger.general('WARN', 'Message received from non-extension URL', {\r\n        senderUrl: sender.url,\r\n        expectedPrefix: extensionUrl\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * List of privileged actions that require sender validation\r\n */\r\nconst PRIVILEGED_ACTIONS = new Set([\r\n  'apiKeyChanged',\r\n  'logout',\r\n  'settingsChanged',\r\n  'deviceNicknameChanged',\r\n  'autoOpenLinksChanged',\r\n  'encryptionPasswordChanged',\r\n  'debugModeChanged',\r\n  'pushNote',\r\n  'pushLink',\r\n  'pushFile'\r\n]);\r\n\r\n/**\r\n * Check if an action requires privileged access\r\n */\r\nexport function isPrivilegedAction(action: string): boolean {\r\n  return PRIVILEGED_ACTIONS.has(action);\r\n}\r\n\r\n/**\r\n * Validate sender for privileged actions\r\n * Returns true if valid, false if should be rejected\r\n */\r\nexport function validatePrivilegedMessage(\r\n  action: string,\r\n  sender: chrome.runtime.MessageSender\r\n): boolean {\r\n  if (!isPrivilegedAction(action)) {\r\n    // Non-privileged actions don't need validation\r\n    return true;\r\n  }\r\n\r\n  if (!isValidSender(sender)) {\r\n    debugLogger.general('ERROR', 'Rejected privileged action from invalid sender', {\r\n      action,\r\n      senderId: sender?.id,\r\n      senderUrl: sender?.url\r\n    });\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n", "/**\r\n * Background Service Worker - Main Entry Point\r\n * Pushbullet Chrome Extension (Manifest V3)\r\n */\r\n\r\nimport {\r\n  debugLogger,\r\n  debugConfigManager,\r\n  globalErrorTracker,\r\n} from \"../lib/logging\";\r\nimport { performanceMonitor } from \"../lib/perf\";\r\nimport { initTracker, wsStateMonitor } from \"../lib/monitoring\";\r\nimport { WebSocketClient } from \"../app/ws/client\";\r\nimport {\r\n  sessionCache,\r\n  initializeSessionCache,\r\n  refreshSessionCache,\r\n  resetSessionCache,\r\n} from \"../app/session\";\r\nimport { fetchDevices, updateDeviceNickname } from \"../app/api/client\";\r\nimport { ensureConfigLoaded } from \"../app/reconnect\";\r\nimport { PushbulletCrypto } from \"../lib/crypto\";\r\nimport { storageRepository } from \"../infrastructure/storage/storage.repository\";\r\nimport { MessageAction } from \"../types/domain\";\r\nimport { globalEventBus } from \"../lib/events/event-bus\";\r\nimport { ServiceWorkerStateMachine, ServiceWorkerState } from \"./state-machine\";\r\nimport {\r\n  getApiKey,\r\n  setApiKey,\r\n  getDeviceIden,\r\n  setDeviceIden,\r\n  getDeviceNickname,\r\n  setDeviceNickname,\r\n  getAutoOpenLinks,\r\n  setAutoOpenLinks,\r\n  setNotificationTimeout,\r\n  setWebSocketClient,\r\n  WEBSOCKET_URL,\r\n} from \"./state\";\r\nimport {\r\n  refreshPushes,\r\n  showPushNotification,\r\n  checkPollingMode,\r\n  stopPollingMode,\r\n  performPollingFetch,\r\n  performWebSocketHealthCheck,\r\n  updatePopupConnectionState,\r\n  setupContextMenu,\r\n  pushLink,\r\n  pushNote,\r\n  updateConnectionIcon,\r\n} from \"./utils\";\r\nimport { validatePrivilegedMessage } from \"../lib/security/message-validation\";\r\nimport type { Push } from \"../types/domain\";\r\nimport { isLinkPush } from \"../types/domain\";\r\nimport {\r\n  saveSessionCache,\r\n  clearSessionCache,\r\n} from \"../infrastructure/storage/indexed-db\";\r\n\r\n// Load debug configuration\r\ndebugConfigManager.loadConfig();\r\n\r\n// Store notification data for detail view\r\n// SECURITY FIX (M-06): Limit store size to prevent memory leak\r\nconst notificationDataStore = new Map<string, Push>();\r\nconst MAX_NOTIFICATION_STORE_SIZE = 100;\r\n\r\n/**\r\n * Add notification to store with size limit\r\n */\r\nexport function addToNotificationStore(id: string, push: Push): void {\r\n  // Remove oldest entries if at capacity\r\n  if (notificationDataStore.size >= MAX_NOTIFICATION_STORE_SIZE) {\r\n    const firstKey = notificationDataStore.keys().next().value;\r\n    if (firstKey) {\r\n      notificationDataStore.delete(firstKey);\r\n    }\r\n  }\r\n  notificationDataStore.set(id, push);\r\n}\r\n\r\n/**\r\n * Get notification store (for passing to utils)\r\n */\r\nexport function getNotificationStore(): Map<string, Push> {\r\n  return notificationDataStore;\r\n}\r\n\r\n/**\r\n * Attempts to get the API key from storage with retries.\r\n *\r\n * RACE CONDITION FIX: The chrome.storage API can be transiently unavailable\r\n * immediately after a service worker restart, returning empty results even when\r\n * data exists. This function implements a retry mechanism to handle this MV3\r\n * lifecycle issue.\r\n *\r\n * @param attempts - Number of retry attempts (default: 3)\r\n * @param delay - Delay in milliseconds between attempts (default: 100)\r\n * @returns The API key string, or null if not found after all retries\r\n */\r\nasync function getApiKeyWithRetries(\r\n  attempts = 3,\r\n  delay = 100,\r\n): Promise<string | null> {\r\n  for (let i = 0; i < attempts; i++) {\r\n    try {\r\n      const apiKey = await storageRepository.getApiKey();\r\n      if (apiKey) {\r\n        debugLogger.storage(\r\n          \"INFO\",\r\n          `API key found on attempt ${i + 1}/${attempts}`,\r\n        );\r\n        return apiKey;\r\n      }\r\n      // API key is null - could be genuinely missing or storage not ready yet\r\n      debugLogger.storage(\r\n        \"DEBUG\",\r\n        `API key not found on attempt ${i + 1}/${attempts}, will retry`,\r\n      );\r\n    } catch (error) {\r\n      debugLogger.storage(\r\n        \"WARN\",\r\n        `Error getting API key on attempt ${i + 1}/${attempts}`,\r\n        null,\r\n        error as Error,\r\n      );\r\n    }\r\n\r\n    // Wait before the next attempt (but not after the last attempt)\r\n    if (i < attempts - 1) {\r\n      await new Promise((resolve) => setTimeout(resolve, delay));\r\n    }\r\n  }\r\n\r\n  debugLogger.storage(\r\n    \"WARN\",\r\n    `API key not found after ${attempts} retry attempts - assuming no key configured`,\r\n  );\r\n  return null;\r\n}\r\n\r\n// Initialize WebSocket client\r\nlet websocketClient: WebSocketClient | null = null;\r\n\r\n// MV3 LIFECYCLE TRACKING: Recovery timer for measuring WebSocket reconnection time\r\nlet recoveryTimerStart: number = 0;\r\n\r\n// Initialize State Machine\r\n// ARCHITECTURAL CHANGE: Centralized lifecycle management\r\n// All service worker state is now managed by the state machine\r\n// STATE MACHINE HYDRATION: The state machine is created asynchronously to allow\r\n// it to hydrate its state from storage, ensuring continuity across service worker restarts\r\nlet stateMachine: ServiceWorkerStateMachine;\r\n\r\n// Define the callbacks once for reuse\r\nconst stateMachineCallbacks = {\r\n  onInitialize: async (data: any) => {\r\n    // Initialize session cache\r\n    const apiKey = data?.apiKey || getApiKey();\r\n    if (apiKey) {\r\n      // Pass connectWebSocket so it can be called upon successful initialization\r\n      await initializeSessionCache(\"state-machine\", connectWebSocket, {\r\n        setApiKey,\r\n        setDeviceIden,\r\n        setAutoOpenLinks,\r\n        setNotificationTimeout,\r\n        setDeviceNickname,\r\n      });\r\n    }\r\n  },\r\n\r\n  onStartPolling: () => {\r\n    checkPollingMode();\r\n  },\r\n  onStopPolling: () => {\r\n    stopPollingMode();\r\n  },\r\n  onShowError: (error: string) => {\r\n    debugLogger.general(\"ERROR\", \"[StateMachine] Error state\", { error });\r\n    updateConnectionIcon(\"disconnected\");\r\n  },\r\n  onClearData: async () => {\r\n    // Clear session cache to initial state\r\n    resetSessionCache();\r\n  },\r\n  onDisconnectWebSocket: () => {\r\n    disconnectWebSocket();\r\n  },\r\n};\r\n\r\n// Create a promise that resolves when the state machine is ready\r\n// This ensures startup listeners wait for hydration to complete before attempting transitions\r\nconst stateMachineReady = ServiceWorkerStateMachine.create(\r\n  stateMachineCallbacks,\r\n).then((sm) => {\r\n  stateMachine = sm;\r\n  debugLogger.general(\r\n    \"INFO\",\r\n    \"[Background] State machine initialized and ready\",\r\n    {\r\n      currentState: stateMachine.getCurrentState(),\r\n    },\r\n  );\r\n});\r\n\r\n/**\r\n * Connect to WebSocket\r\n */\r\nfunction connectWebSocket(): void {\r\n  // MV3 LIFECYCLE TRACKING: Start recovery timer\r\n  recoveryTimerStart = Date.now();\r\n\r\n  // SECURITY FIX (H-02): Dispose existing socket before creating new one\r\n  if (websocketClient) {\r\n    debugLogger.websocket(\r\n      \"INFO\",\r\n      \"Disposing existing WebSocket before reconnecting\",\r\n    );\r\n    websocketClient.disconnect();\r\n    websocketClient = null;\r\n  }\r\n\r\n  // RACE CONDITION FIX: Remove all previous event listeners to prevent listener leaks\r\n  // When connectWebSocket is called multiple times (during reconnection attempts),\r\n  // old listeners accumulate, causing duplicate event handling and multiple notifications\r\n  // for the same push. This cleanup ensures only one set of listeners is active.\r\n  debugLogger.websocket(\r\n    \"DEBUG\",\r\n    \"Cleaning up old event listeners before reconnecting\",\r\n  );\r\n  globalEventBus.removeAllListeners(\"websocket:tickle:push\");\r\n  globalEventBus.removeAllListeners(\"websocket:tickle:device\");\r\n  globalEventBus.removeAllListeners(\"websocket:push\");\r\n  globalEventBus.removeAllListeners(\"websocket:connected\");\r\n  globalEventBus.removeAllListeners(\"websocket:disconnected\");\r\n  globalEventBus.removeAllListeners(\"websocket:polling:check\");\r\n  globalEventBus.removeAllListeners(\"websocket:polling:stop\");\r\n  globalEventBus.removeAllListeners(\"websocket:state\");\r\n\r\n  websocketClient = new WebSocketClient(WEBSOCKET_URL, getApiKey);\r\n  setWebSocketClient(websocketClient);\r\n\r\n  // Set up event listeners using event bus\r\n  // ARCHITECTURAL CHANGE: Using event-driven architecture instead of direct handler calls\r\n  // This decouples the WebSocketClient from the background script\r\n\r\n  globalEventBus.on(\"websocket:tickle:push\", async () => {\r\n    await refreshPushes(notificationDataStore);\r\n  });\r\n\r\n  globalEventBus.on(\"websocket:tickle:device\", async () => {\r\n    const apiKey = getApiKey();\r\n    if (apiKey) {\r\n      const devices = await fetchDevices(apiKey);\r\n      sessionCache.devices = devices;\r\n      sessionCache.lastUpdated = Date.now();\r\n\r\n      chrome.runtime\r\n        .sendMessage({\r\n          action: MessageAction.SESSION_DATA_UPDATED,\r\n          devices: devices,\r\n          userInfo: sessionCache.userInfo,\r\n          recentPushes: sessionCache.recentPushes,\r\n          autoOpenLinks: sessionCache.autoOpenLinks,\r\n          deviceNickname: sessionCache.deviceNickname,\r\n        })\r\n        .catch(() => {});\r\n    }\r\n  });\r\n\r\n  globalEventBus.on(\"websocket:push\", async (push: Push) => {\r\n    // RACE CONDITION FIX: Ensure configuration is loaded before processing push\r\n    await ensureConfigLoaded();\r\n\r\n    // Track push received\r\n    performanceMonitor.recordPushReceived();\r\n\r\n    let decryptedPush = push;\r\n\r\n    // Check if push is encrypted\r\n    if (\"encrypted\" in push && push.encrypted && \"ciphertext\" in push) {\r\n      try {\r\n        // Get encryption password from storage repository\r\n        const password = await storageRepository.getEncryptionPassword();\r\n\r\n        if (password && sessionCache.userInfo) {\r\n          debugLogger.general(\"INFO\", \"Decrypting encrypted push\", {\r\n            pushIden: push.iden,\r\n          });\r\n\r\n          const decrypted = await PushbulletCrypto.decryptPush(\r\n            push as any,\r\n            password,\r\n            sessionCache.userInfo.iden,\r\n          );\r\n\r\n          decryptedPush = decrypted as Push;\r\n          debugLogger.general(\"INFO\", \"Push decrypted successfully\", {\n            pushType: decryptedPush.type,\n          });\n\n          // ADD THIS - Full dump of decrypted data\n          debugLogger.general(\"DEBUG\", \"FULL DECRYPTED PUSH DATA\", {\n            completeData: decryptedPush,\n          });\n        } else {\r\n          debugLogger.general(\r\n            \"WARN\",\r\n            \"Cannot decrypt push - no encryption password set\",\r\n          );\r\n        }\r\n      } catch (error) {\r\n        debugLogger.general(\r\n          \"ERROR\",\r\n          \"Failed to decrypt push\",\r\n          {\r\n            error: (error as Error).message,\r\n          },\r\n          error as Error,\r\n        );\r\n      }\r\n    }\r\n\r\n    // --- FILTERING LOGIC: Only process displayable push types ---\r\n    const displayableTypes = [\"mirror\", \"note\", \"link\", \"sms_changed\"];\r\n\r\n    if (!displayableTypes.includes(decryptedPush.type)) {\r\n      // Log for debugging purposes and ignore the push\r\n      debugLogger.general(\"INFO\", \"Ignoring non-displayable push of type\", {\r\n        pushType: decryptedPush.type,\r\n        pushIden: decryptedPush.iden,\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Log that we're processing a displayable push\n    debugLogger.general(\"INFO\", \"Processing displayable push of type\", {\n      pushType: decryptedPush.type,\n      pushIden: decryptedPush.iden,\n    });\n\n    // ADD THIS - Dump for Mirror Messages\n    if (decryptedPush.type === 'mirror') {\n      // Log full mirror message data to see all available fields\n      debugLogger.general(\"DEBUG\", \"FULL MIRROR MESSAGE DATA\", {\n        completeMirrorData: decryptedPush,\n      });\n    }\n\n    // Update cache (prepend)\n    if (sessionCache.recentPushes) {\r\n      sessionCache.recentPushes.unshift(decryptedPush);\r\n      // Save the updated cache (with the new push) to our database.\r\n      saveSessionCache(sessionCache);\r\n      sessionCache.lastUpdated = Date.now();\r\n\r\n      chrome.runtime\r\n        .sendMessage({\r\n          action: MessageAction.PUSHES_UPDATED,\r\n          pushes: sessionCache.recentPushes,\r\n        })\r\n        .catch(() => {});\r\n    }\r\n\r\n    // FIX: Don't await - let notifications show immediately without blocking\r\n    // This allows multiple notifications to appear concurrently\r\n    showPushNotification(decryptedPush, notificationDataStore).catch(\r\n      (error) => {\r\n        debugLogger.general(\r\n          \"ERROR\",\r\n          \"Failed to show notification\",\r\n          null,\r\n          error,\r\n        );\r\n        performanceMonitor.recordNotificationFailed();\r\n      },\r\n    );\r\n\r\n    // Auto-open links if setting is enabled\r\n    const autoOpenLinks = getAutoOpenLinks();\r\n    if (autoOpenLinks && isLinkPush(decryptedPush)) {\r\n      debugLogger.general(\"INFO\", \"Auto-opening link push\", {\r\n        pushIden: decryptedPush.iden,\r\n        url: decryptedPush.url,\r\n      });\r\n\r\n      chrome.tabs\r\n        .create({\r\n          url: decryptedPush.url,\r\n          active: false, // Open in background to avoid disrupting user\r\n        })\r\n        .catch((error) => {\r\n          debugLogger.general(\r\n            \"ERROR\",\r\n            \"Failed to auto-open link\",\r\n            {\r\n              url: decryptedPush.url,\r\n            },\r\n            error,\r\n          );\r\n        });\r\n    }\r\n  });\r\n\r\n  globalEventBus.on(\"websocket:connected\", async () => {\r\n    // MV3 LIFECYCLE TRACKING: Calculate and store recovery time\r\n    const recoveryTime = Date.now() - recoveryTimerStart;\r\n    debugLogger.performance(\"INFO\", \"WebSocket recovery time\", {\r\n      duration: recoveryTime,\r\n    });\r\n    const { recoveryTimings = [] } =\r\n      await chrome.storage.local.get(\"recoveryTimings\");\r\n    recoveryTimings.push(recoveryTime);\r\n    // Keep only the last 20 timings for averaging\r\n    await chrome.storage.local.set({\r\n      recoveryTimings: recoveryTimings.slice(-20),\r\n    });\r\n\r\n    // Trigger state machine transition\r\n    stateMachine.transition(\"WS_CONNECTED\");\r\n  });\r\n\r\n  globalEventBus.on(\"websocket:disconnected\", () => {\r\n    // Trigger state machine transition\r\n    stateMachine.transition(\"WS_DISCONNECTED\");\r\n  });\r\n\r\n  globalEventBus.on(\"websocket:polling:check\", () => {\r\n    checkPollingMode();\r\n  });\r\n\r\n  globalEventBus.on(\"websocket:polling:stop\", () => {\r\n    stopPollingMode();\r\n  });\r\n\r\n  globalEventBus.on(\"websocket:state\", (state: string) => {\r\n    updatePopupConnectionState(state);\r\n  });\r\n\r\n  websocketClient.connect();\r\n}\r\n\r\n/**\r\n * Disconnect WebSocket\r\n */\r\nfunction disconnectWebSocket(): void {\r\n  if (websocketClient) {\r\n    websocketClient.disconnect();\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// Chrome Event Listeners\r\n// ============================================================================\r\n\r\n/**\r\n * Extension installed/updated\r\n */\r\nchrome.runtime.onInstalled.addListener(async () => {\r\n  // MV3 LIFECYCLE TRACKING: Increment restart counter\r\n  const { restarts = 0 } = await chrome.storage.local.get(\"restarts\");\r\n  await chrome.storage.local.set({ restarts: restarts + 1 });\r\n\r\n  debugLogger.general(\"INFO\", \"Pushbullet extension installed/updated\", {\r\n    reason: \"onInstalled\",\r\n    timestamp: new Date().toISOString(),\r\n  });\r\n\r\n  initTracker.recordInitialization(\"onInstalled\");\r\n  setupContextMenu();\r\n\r\n  // Create periodic log flush alarm\r\n  chrome.alarms.create(\"logFlush\", { periodInMinutes: 1 });\r\n\r\n  // In chrome.runtime.onInstalled and onStartup listeners\r\n  chrome.alarms.create(\"keepalive\", {\r\n    periodInMinutes: 0.5, // Every 30 seconds (Chrome's minimum)\r\n  });\r\n\r\n  // STATE MACHINE HYDRATION: Wait for state machine to be ready before attempting transitions\r\n  // This ensures the state machine has loaded its persisted state from storage\r\n  await stateMachineReady;\r\n\r\n  // Now that the machine is ready and has its state, just tell it\r\n  // that a startup event happened. It will decide what to do.\r\n  const apiKey = await getApiKeyWithRetries();\r\n  await stateMachine.transition(\"STARTUP\", { hasApiKey: !!apiKey });\r\n});\r\n\r\n/**\r\n * Browser startup\r\n */\r\nchrome.runtime.onStartup.addListener(async () => {\r\n  // MV3 LIFECYCLE TRACKING: Increment restart counter\r\n  const { restarts = 0 } = await chrome.storage.local.get(\"restarts\");\r\n  await chrome.storage.local.set({ restarts: restarts + 1 });\r\n\r\n  debugLogger.general(\r\n    \"INFO\",\r\n    \"Browser started - reinitializing Pushbullet extension\",\r\n    {\r\n      reason: \"onStartup\",\r\n      timestamp: new Date().toISOString(),\r\n    },\r\n  );\r\n\r\n  initTracker.recordInitialization(\"onStartup\");\r\n  setupContextMenu();\r\n\r\n  // Create periodic log flush alarm\r\n  chrome.alarms.create(\"logFlush\", { periodInMinutes: 1 });\r\n\r\n  // In chrome.runtime.onInstalled and onStartup listeners\r\n  chrome.alarms.create(\"keepalive\", {\r\n    periodInMinutes: 0.5, // Every 30 seconds (Chrome's minimum)\r\n  });\r\n\r\n  // STATE MACHINE HYDRATION: Wait for state machine to be ready before attempting transitions\r\n  // This ensures the state machine has loaded its persisted state from storage\r\n  await stateMachineReady;\r\n\r\n  // Now that the machine is ready and has its state, just tell it\r\n  // that a startup event happened. It will decide what to do.\r\n  const apiKey = await getApiKeyWithRetries();\r\n  await stateMachine.transition(\"STARTUP\", { hasApiKey: !!apiKey });\r\n});\r\n\r\n/**\r\n * Alarm listener\r\n */\r\nchrome.alarms.onAlarm.addListener(async (alarm) => {\r\n  if (alarm.name === \"keepalive\") {\r\n    // Minimal work to prevent termination\r\n    debugLogger.general(\"DEBUG\", \"Keepalive heartbeat\");\r\n\r\n    // Verify critical state integrity\r\n    const apiKey = getApiKey();\r\n    if (!apiKey) {\r\n      debugLogger.general(\"WARN\", \"Keepalive: API key missing, reloading\");\r\n      await ensureConfigLoaded();\r\n    }\r\n    return;\r\n  }\r\n\r\n  if (alarm.name === \"logFlush\") {\r\n    await debugLogger.flush();\r\n    return;\r\n  }\r\n\r\n  // Ensure state machine is ready\r\n  await stateMachineReady;\r\n\r\n  // Handle our two main periodic alarms.\r\n  if (alarm.name === \"websocketHealthCheck\") {\r\n    // ADD THIS CHECK AT THE TOP\r\n    if (stateMachine.isInState(ServiceWorkerState.ERROR)) {\r\n      debugLogger.general(\"INFO\", \"In ERROR state, ignoring health check.\");\r\n      return;\r\n    }\r\n\r\n    await ensureConfigLoaded();\r\n    // Check the current state first.\r\n    if (stateMachine.isInState(ServiceWorkerState.DEGRADED)) {\r\n      // Perform polling as fallback\r\n      await performPollingFetch();\r\n\r\n      // Check for escalation to ERROR state\r\n      const failures =\r\n        performanceMonitor.getQualityMetrics().consecutiveFailures;\r\n      const FAILURE_THRESHOLD = 5; // Escalate after 5 consecutive failures (approx. 5 minutes)\r\n\r\n      if (failures >= FAILURE_THRESHOLD) {\r\n        // If we've failed too many times, escalate to ERROR and STOP.\r\n        debugLogger.general(\r\n          \"ERROR\",\r\n          `Exceeded failure threshold (${failures} consecutive failures). Escalating to ERROR state.`,\r\n        );\r\n        await stateMachine.transition(\"WS_PERMANENT_ERROR\");\r\n      } else {\r\n        // Only if we are NOT escalating to error, do we try to reconnect.\r\n        debugLogger.general(\r\n          \"INFO\",\r\n          \"Health check found us in DEGRADED state. Attempting to reconnect.\",\r\n        );\r\n        // Tell the state machine to start the reconnect process.\r\n        await stateMachine.transition(\"ATTEMPT_RECONNECT\");\r\n      }\r\n    } else {\r\n      // If we are not in DEGRADED, do the normal health check.\r\n      performWebSocketHealthCheck(websocketClient, connectWebSocket);\r\n    }\r\n  }\r\n});\r\n\r\n/**\r\n * Context menu click handler\r\n */\r\nchrome.contextMenus.onClicked.addListener(async (info, tab) => {\r\n  // RACE CONDITION FIX: Ensure configuration is loaded before processing context menu action\r\n  await ensureConfigLoaded();\r\n\r\n  if (!getApiKey()) {\r\n    chrome.notifications.create(\"pushbullet-no-api-key\", {\r\n      type: \"basic\",\r\n      iconUrl: \"icons/icon128.png\",\r\n      title: \"Pushbullet\",\r\n      message: \"Please set your API key in the extension popup\",\r\n    });\r\n    return;\r\n  }\r\n\r\n  switch (info.menuItemId) {\r\n  case \"push-link\":\r\n    if (info.linkUrl && tab) {\r\n      pushLink(info.linkUrl, tab.title);\r\n    }\r\n    break;\r\n  case \"push-page\":\r\n    if (tab && tab.url) {\r\n      pushLink(tab.url, tab.title);\r\n    }\r\n    break;\r\n  case \"push-selection\":\r\n    if (info.selectionText && tab) {\r\n      pushNote(\"Selection from \" + (tab.title || \"page\"), info.selectionText);\r\n    }\r\n    break;\r\n  case \"push-image\":\r\n    if (info.srcUrl && tab) {\r\n      pushLink(info.srcUrl, \"Image from \" + (tab.title || \"page\"));\r\n    }\r\n    break;\r\n  }\r\n});\r\n\r\n/**\r\n * Message listener for popup communication\r\n */\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n  // SECURITY FIX (C-04): Validate sender for privileged actions\r\n  // Prevents external extensions/pages from sending privileged messages\r\n  if (!validatePrivilegedMessage(message.action, sender)) {\r\n    debugLogger.general(\r\n      \"ERROR\",\r\n      \"Rejected privileged message from untrusted sender\",\r\n      {\r\n        action: message.action,\r\n        senderId: sender?.id,\r\n        senderUrl: sender?.url,\r\n      },\r\n    );\r\n    sendResponse({ success: false, error: \"Unauthorized\" });\r\n    return false;\r\n  } else if (message.action === MessageAction.LOG) {\n    // Handler for centralized logging from other scripts (e.g., popup)\n    if (message.payload) {\n      const { level, message: logMessage, data } = message.payload;\n      const prefix = \"[POPUP]\"; // Add a prefix to identify the source\n\n      switch (level) {\n      case \"ERROR\":\n        debugLogger.general(\"ERROR\", `${prefix} ${logMessage}`, data);\n        break;\n      case \"WARN\":\n        debugLogger.general(\"WARN\", `${prefix} ${logMessage}`, data);\n        break;\n      case \"INFO\":\n      default:\n        debugLogger.general(\"INFO\", `${prefix} ${logMessage}`, data);\n        break;\n      }\n    }\n    // Return false because we are not sending a response asynchronously.\n    return false;\n  }\n\n  // Log the message (skip debug dashboard auto-refresh spam)\n  if (message.action !== MessageAction.GET_DEBUG_SUMMARY) {\n    debugLogger.general(\"DEBUG\", \"Message received\", {\n      type: message.type,\n      action: message.action,\n      sender: sender.id,\n    });\n  }\n\n  if (message.type === \"GET_PUSH_DATA\") {\n    debugLogger.general(\"DEBUG\", \"GET_PUSH_DATA request received\", {\n      notificationId: message.notificationId,\n    });\n\n    const push = notificationDataStore.get(message.notificationId);\n\n    if (push) {\n      debugLogger.general(\"DEBUG\", \"Push data found\", {\n        notificationId: message.notificationId,\n        pushType: push.type,\n      });\n\n      sendResponse({ success: true, push });\n    } else {\n      debugLogger.general(\"WARN\", \"Push data not found\", {\n        notificationId: message.notificationId,\n        storeSize: notificationDataStore.size,\n      });\n\n      sendResponse({ success: false, error: \"Push data not found\" });\n    }\n\n    return true; // IMPORTANT: Keep channel open\n  }\n\n  if (message.action === MessageAction.GET_SESSION_DATA) {\n    // SERVICE WORKER AMNESIA FIX: Check storage directly, not the in-memory variable\r\n    // After service worker restart, in-memory variables are null, but storage persists.\r\n    // This ensures we detect wake-ups reliably by using storage as the source of truth.\r\n    (async () => {\r\n      try {\r\n        // RACE CONDITION FIX: Ensure configuration is loaded before processing\r\n        await ensureConfigLoaded();\r\n\r\n        // Check storage directly, not the in-memory variable\r\n        const storedApiKey = await storageRepository.getApiKey();\r\n\r\n        // Detect wake-up: if we have a key in storage but the session is not loaded in memory\r\n        if (storedApiKey && !sessionCache.isAuthenticated) {\r\n          debugLogger.general(\r\n            \"WARN\",\r\n            \"Service worker wake-up detected - reloading session from storage.\",\r\n          );\r\n\r\n          // Await the full initialization process\r\n          await initializeSessionCache(\"onMessageWakeup\", connectWebSocket, {\r\n            setApiKey,\r\n            setDeviceIden,\r\n            setAutoOpenLinks,\r\n            setNotificationTimeout,\r\n            setDeviceNickname,\r\n          });\r\n        }\r\n\r\n        // Now, respond with the (potentially restored) session data\n        sendResponse({\n          isAuthenticated: sessionCache.isAuthenticated,\n          userInfo: sessionCache.userInfo,\n          devices: sessionCache.devices,\n          recentPushes: sessionCache.recentPushes,\n          chats: sessionCache.chats || [], // \u2190 ADD THIS\n          autoOpenLinks: getAutoOpenLinks(),\n          deviceNickname: getDeviceNickname(),\n          websocketConnected: websocketClient\n            ? websocketClient.isConnected()\n            : false,\n        });\n      } catch (error) {\r\n        debugLogger.general(\r\n          \"ERROR\",\r\n          \"Error handling getSessionData after wake-up\",\r\n          null,\r\n          error as Error,\r\n        );\r\n        sendResponse({\r\n          isAuthenticated: false,\r\n          error: (error as Error).message,\r\n        });\r\n      }\r\n    })();\r\n\r\n    return true; // Return true to indicate an asynchronous response.\r\n  } else if (message.action === MessageAction.API_KEY_CHANGED) {\r\n    // Update API key\r\n    setApiKey(message.apiKey);\r\n\r\n    // Build promise chain\r\n    let savePromise = storageRepository.setApiKey(message.apiKey);\r\n\r\n    // Update device nickname if provided\r\n    if (message.deviceNickname) {\r\n      savePromise = savePromise.then(() => {\r\n        setDeviceNickname(message.deviceNickname);\r\n        sessionCache.deviceNickname = message.deviceNickname as string;\r\n        return storageRepository.setDeviceNickname(\r\n          message.deviceNickname as string,\r\n        );\r\n      });\r\n    }\r\n\r\n    // ARCHITECTURAL CHANGE: Use state machine instead of direct initialization\r\n    // STATE MACHINE HYDRATION: Ensure state machine is ready before using it\r\n    savePromise\r\n      .then(() => stateMachineReady)\r\n      .then(() => {\r\n        return stateMachine.transition(\"API_KEY_SET\", {\r\n          apiKey: message.apiKey,\r\n        });\r\n      })\r\n      .then(() => {\r\n        // Send response with session data after state machine completes\r\n        sendResponse({\n          isAuthenticated:\n            stateMachine.isInState(ServiceWorkerState.READY) ||\n            stateMachine.isInState(ServiceWorkerState.DEGRADED),\n          userInfo: sessionCache.userInfo,\n          devices: sessionCache.devices,\n          recentPushes: sessionCache.recentPushes,\n          chats: sessionCache.chats || [], // \u2190 ADD THIS\n          autoOpenLinks: sessionCache.autoOpenLinks,\n          deviceNickname: sessionCache.deviceNickname,\n          websocketConnected: websocketClient\n            ? websocketClient.isConnected()\n            : false,\n        });\n      })\r\n      .catch((error) => {\r\n        debugLogger.general(\"ERROR\", \"Error saving API key\", null, error);\r\n        sendResponse({ success: false, error: error.message });\r\n      });\r\n\r\n    return true; // Keep message channel open for async response\r\n  } else if (message.action === MessageAction.LOGOUT) {\r\n    // ARCHITECTURAL CHANGE: Use state machine for logout\r\n    // STATE MACHINE HYDRATION: Ensure state machine is ready before using it\r\n    stateMachineReady\r\n      .then(() => {\r\n        return stateMachine.transition(\"LOGOUT\");\r\n      })\r\n      .then(() => {\r\n        // Clear storage via repository\r\n        return storageRepository.setApiKey(null);\r\n      })\r\n      .then(() => {\r\n        return storageRepository.setDeviceIden(null);\r\n      })\r\n      .then(() => {\r\n        return clearSessionCache();\r\n      })\r\n      .then(() => {\r\n        sendResponse({ success: true });\r\n      })\r\n      .catch((error) => {\r\n        debugLogger.general(\"ERROR\", \"Error during logout\", null, error);\r\n        sendResponse({ success: false, error: error.message });\r\n      });\r\n\r\n    return true; // Async response\r\n  } else if (message.action === MessageAction.REFRESH_SESSION) {\r\n    // RACE CONDITION FIX: Ensure configuration is loaded before processing\r\n    (async () => {\r\n      await ensureConfigLoaded();\r\n\r\n      const apiKey = getApiKey();\r\n      if (apiKey) {\r\n        refreshSessionCache(apiKey)\r\n          .then(() => {\r\n            sendResponse({\n              isAuthenticated: true,\n              userInfo: sessionCache.userInfo,\n              devices: sessionCache.devices,\n              recentPushes: sessionCache.recentPushes,\n              chats: sessionCache.chats || [], // \u2190 ADD THIS\n              autoOpenLinks: sessionCache.autoOpenLinks,\n              deviceNickname: sessionCache.deviceNickname,\n            });\n          })\r\n          .catch((error) => {\r\n            debugLogger.general(\r\n              \"ERROR\",\r\n              \"Error refreshing session\",\r\n              null,\r\n              error,\r\n            );\r\n            sendResponse({ isAuthenticated: false });\r\n          });\r\n      } else {\r\n        sendResponse({ isAuthenticated: false });\r\n      }\r\n    })();\r\n\r\n    return true; // Async response\r\n  } else if (message.action === MessageAction.SETTINGS_CHANGED) {\r\n    const promises: Promise<void>[] = [];\r\n\r\n    // BONUS FIX: Handle device nickname updates from \"Save All Settings\" button\r\n    if (message.settings?.deviceNickname) {\r\n      const newNickname = message.settings.deviceNickname;\r\n      const apiKey = getApiKey();\r\n      const deviceIden = getDeviceIden();\r\n\r\n      // Trigger API update if we have the required credentials\r\n      if (apiKey && deviceIden) {\r\n        promises.push(\r\n          updateDeviceNickname(apiKey, deviceIden, newNickname).then(() => {\r\n            // Only update state and storage after API success\r\n            setDeviceNickname(newNickname);\r\n            sessionCache.deviceNickname = newNickname;\r\n            return storageRepository.setDeviceNickname(newNickname);\r\n          }),\r\n        );\r\n      } else {\r\n        // No API credentials, just update local state and storage\r\n        setDeviceNickname(newNickname);\r\n        sessionCache.deviceNickname = newNickname;\r\n        promises.push(storageRepository.setDeviceNickname(newNickname));\r\n      }\r\n    }\r\n\r\n    if (message.autoOpenLinks !== undefined) {\r\n      setAutoOpenLinks(message.autoOpenLinks);\r\n      sessionCache.autoOpenLinks = message.autoOpenLinks;\r\n      promises.push(storageRepository.setAutoOpenLinks(message.autoOpenLinks));\r\n    }\r\n\r\n    if (message.notificationTimeout !== undefined) {\r\n      setNotificationTimeout(message.notificationTimeout);\r\n      promises.push(\r\n        storageRepository.setNotificationTimeout(message.notificationTimeout),\r\n      );\r\n    }\r\n\r\n    Promise.all(promises)\r\n      .then(() => {\r\n        sendResponse({ success: true });\r\n      })\r\n      .catch((error) => {\r\n        debugLogger.general(\"ERROR\", \"Error saving settings\", null, error);\r\n        sendResponse({ success: false, error: error.message });\r\n      });\r\n\r\n    return true; // Async response\r\n  } else if (message.action === MessageAction.UPDATE_DEVICE_NICKNAME) {\r\n    // RACE CONDITION FIX: Ensure configuration is loaded before processing\r\n    (async () => {\r\n      await ensureConfigLoaded();\r\n\r\n      const apiKey = getApiKey();\r\n      const deviceIden = getDeviceIden();\r\n\r\n      if (apiKey && deviceIden && message.nickname) {\r\n        updateDeviceNickname(apiKey, deviceIden, message.nickname)\r\n          .then(async () => {\r\n            setDeviceNickname(message.nickname);\r\n            sessionCache.deviceNickname = message.nickname;\r\n            await storageRepository.setDeviceNickname(message.nickname);\r\n\r\n            sendResponse({ success: true });\r\n          })\r\n          .catch((error) => {\r\n            debugLogger.general(\r\n              \"ERROR\",\r\n              \"Error updating device nickname\",\r\n              null,\r\n              error,\r\n            );\r\n            sendResponse({ success: false, error: error.message });\r\n          });\r\n      } else {\r\n        sendResponse({ success: false, error: \"Missing required parameters\" });\r\n      }\r\n    })();\r\n\r\n    return true; // Async response\r\n  } else if (message.action === MessageAction.GET_DEBUG_SUMMARY) {\r\n    // Return debug summary for debug dashboard\r\n    (async () => {\r\n      // STATE MACHINE HYDRATION: Ensure state machine is ready before using it\r\n      await stateMachineReady;\r\n\r\n      const logData = debugLogger.exportLogs();\r\n      const wsState = wsStateMonitor.getStateReport();\r\n      const perfData = performanceMonitor.exportPerformanceData();\r\n      const perfSummary = perfData.summary;\r\n\r\n      // Format websocket state for dashboard compatibility\r\n      const websocketState = {\r\n        current: {\r\n          stateText: websocketClient\r\n            ? websocketClient.isConnected()\r\n              ? \"Connected\"\r\n              : \"Disconnected\"\r\n            : \"Not initialized\",\r\n          readyState: wsState.currentState,\r\n          stateMachineState: stateMachine.getCurrentState(),\r\n          stateMachineDescription: stateMachine.getStateDescription(),\r\n        },\r\n        lastCheck: wsState.lastCheck,\r\n        historyLength: wsState.historyLength,\r\n      };\r\n\r\n      // Map performance data to match frontend expectations\r\n      // The frontend expects: { websocket, qualityMetrics, notifications }\r\n      // The backend provides: { summary: { websocket, health, quality, metrics, notifications } }\r\n      const performanceForDashboard = {\r\n        websocket: perfSummary.websocket,\r\n        qualityMetrics: {\r\n          // Map health checks\r\n          healthChecksPassed: perfSummary.health?.success || 0,\r\n          healthChecksFailed: perfSummary.health?.failure || 0,\r\n          // Map quality metrics\r\n          disconnectionCount: perfSummary.quality?.disconnections || 0,\r\n          consecutiveFailures: perfSummary.quality?.consecutiveFailures || 0,\r\n          // These metrics don't exist in the backend yet, so they'll be undefined\r\n          averageLatency: undefined,\r\n          minLatency: undefined,\r\n          maxLatency: undefined,\r\n          connectionUptime: 0,\r\n          currentUptime: 0,\r\n        },\r\n        notifications: perfSummary.notifications,\r\n      };\r\n\r\n      // MV3 LIFECYCLE TRACKING: Gather metrics for dashboard\r\n      const { restarts = 0, recoveryTimings = [] } =\r\n        await chrome.storage.local.get([\"restarts\", \"recoveryTimings\"]);\r\n      const avgRecoveryTime =\r\n        recoveryTimings.length > 0\r\n          ? recoveryTimings.reduce((a: number, b: number) => a + b, 0) /\r\n            recoveryTimings.length\r\n          : 0;\r\n\r\n      const mv3LifecycleStats = {\r\n        restarts: restarts,\r\n        wakeUpTriggers: initTracker.exportData().stats, // We already track this!\r\n        avgRecoveryTime: avgRecoveryTime.toFixed(0) + \" ms\",\r\n        // Add more stats like downtime here in the future\r\n      };\r\n\r\n      const summary = {\r\n        config: debugConfigManager.getConfig(),\r\n        logs: logData.logs, // Array of log entries\r\n        totalLogs: logData.summary.totalLogs,\r\n        performance: performanceForDashboard,\r\n        websocketState: websocketState,\r\n        initializationStats: initTracker.exportData(),\r\n        mv3LifecycleStats: mv3LifecycleStats, // Add the new data object\r\n        errors: {\r\n          total: logData.summary.errors,\r\n          last24h: logData.summary.errors, // Add last24h for dashboard\r\n          critical: [],\r\n        },\r\n      };\r\n\r\n      sendResponse({ success: true, summary });\r\n    })();\r\n\r\n    return true; // Async response\r\n  } else if (message.action === MessageAction.CLEAR_ALL_LOGS) {\r\n    // Clear all logs from memory and persistent storage\r\n    debugLogger.clearLogs().then(() => {\r\n      sendResponse({ success: true });\r\n    });\r\n    return true; // Async response\r\n  } else if (message.action === MessageAction.UPDATE_DEBUG_CONFIG) {\r\n    // Update debug configuration\r\n    if (message.config) {\r\n      debugConfigManager\r\n        .updateConfig(message.config)\r\n        .then(() => {\r\n          sendResponse({ success: true });\r\n        })\r\n        .catch((error: any) => {\r\n          debugLogger.general(\r\n            \"ERROR\",\r\n            \"Failed to update debug config\",\r\n            null,\r\n            error,\r\n          );\r\n          sendResponse({ success: false, error: error.message });\r\n        });\r\n    } else {\r\n      sendResponse({ success: false, error: \"No config provided\" });\r\n    }\r\n    return true; // Async response\r\n  } else if (message.action === MessageAction.EXPORT_DEBUG_DATA) {\r\n    // This handler gathers all debug data for exporting\r\n    debugLogger.general(\"INFO\", \"Exporting full debug data\");\r\n\r\n    // STATE MACHINE HYDRATION: Ensure state machine is ready before using it\r\n    (async () => {\r\n      await stateMachineReady;\r\n\r\n      const logData = debugLogger.exportLogs();\r\n      const errorSummary = globalErrorTracker.getErrorSummary();\r\n\r\n      const dataToExport = {\r\n        timestamp: new Date().toISOString(),\r\n        version: chrome.runtime.getManifest().version,\r\n        debugLogs: logData,\r\n        performanceData: performanceMonitor.exportPerformanceData(),\r\n        systemInfo: {\r\n          websocketState: wsStateMonitor.getStateReport(),\r\n          initializationData: initTracker.exportData(),\r\n          stateMachine: {\r\n            currentState: stateMachine.getCurrentState(),\r\n            description: stateMachine.getStateDescription(),\r\n          },\r\n        },\r\n        errorData: {\r\n          summary: errorSummary,\r\n          recent: globalErrorTracker.exportErrorData().errors,\r\n        },\r\n        sessionCache: {\r\n          isAuthenticated: sessionCache.isAuthenticated,\r\n          lastUpdated: sessionCache.lastUpdated\r\n            ? new Date(sessionCache.lastUpdated).toISOString()\r\n            : \"never\",\r\n          userInfo: sessionCache.userInfo\r\n            ? { email: sessionCache.userInfo.email?.substring(0, 3) + \"***\" }\r\n            : null,\r\n          deviceCount: sessionCache.devices?.length || 0,\r\n          pushCount: sessionCache.recentPushes?.length || 0,\r\n        },\r\n      };\r\n\r\n      sendResponse({ success: true, data: dataToExport });\r\n    })();\r\n\r\n    return true; // Async response\r\n  } else if (message.action === MessageAction.GET_NOTIFICATION_DATA) {\n    // Return notification data for detail view\n    const pushData = notificationDataStore.get(message.notificationId);\n    if (pushData) {\n      sendResponse({ success: true, push: pushData });\n    } else {\n      sendResponse({ success: false, error: \"Notification not found\" });\n    }\n    return false; // Synchronous response\n  } else if (message.action === MessageAction.SEND_PUSH) {\n    // Handle push sending from popup\r\n    // SERVICE WORKER AMNESIA FIX: Ensure configuration is loaded before attempting to send push\r\n    (async () => {\r\n      try {\r\n        // Ensure core configuration is loaded from storage if service worker just woke up\r\n        await ensureConfigLoaded();\r\n\r\n        const apiKey = getApiKey();\r\n        if (!apiKey) {\r\n          sendResponse({\r\n            success: false,\r\n            error: \"Not logged in. Please try again.\",\r\n          });\r\n          return;\r\n        }\r\n\r\n        const pushData = message.pushData;\r\n        if (!pushData || !pushData.type) {\r\n          sendResponse({ success: false, error: \"Invalid push data\" });\r\n          return;\r\n        }\r\n\r\n        // Send push via API\r\n        const response = await fetch(\"https://api.pushbullet.com/v2/pushes\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Access-Token\": apiKey,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(pushData),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          const errorText = await response.text();\r\n          let errorMessage = \"Failed to send push\";\r\n          try {\r\n            const errorData = JSON.parse(errorText) as {\r\n              error?: { message?: string };\r\n            };\r\n            if (errorData.error?.message) {\r\n              errorMessage = errorData.error.message;\r\n            }\r\n          } catch {\r\n            // Use default\r\n          }\r\n          throw new Error(errorMessage);\r\n        }\r\n\r\n        // Refresh pushes after sending\r\n        await refreshPushes(notificationDataStore);\r\n\r\n        sendResponse({ success: true });\r\n      } catch (error) {\r\n        debugLogger.general(\r\n          \"ERROR\",\r\n          \"Failed to send push\",\r\n          { pushType: message.pushData?.type },\r\n          error as Error,\r\n        );\r\n        sendResponse({ success: false, error: (error as Error).message });\r\n      }\r\n    })();\r\n\r\n    return true; // Async response\r\n  }\r\n\r\n  return false;\n});\n\n// Notification clicked handler\nchrome.notifications.onClicked.addListener((notificationId: string) => {\n  debugLogger.notifications(\"INFO\", \"Notification clicked\", {\n    notificationId,\n  });\n\n  // Get the push data from the notification store\n  const push = notificationDataStore.get(notificationId);\n\n  if (!push) {\n    debugLogger.notifications(\n      \"WARN\",\n      \"No push data found for clicked notification\",\n      {\n        notificationId,\n      },\n    );\n    return;\n  }\n\n  // Open notification detail page in a popup window\n  const detailUrl = chrome.runtime.getURL(\n    `notification-detail.html?id=${encodeURIComponent(notificationId)}`,\n  );\n\n  chrome.windows.create(\n    {\n      url: detailUrl,\n      type: 'popup',\n      width: 500,\n      height: 600,\n      focused: true,\n    },\n    (window) => {\n      if (chrome.runtime.lastError) {\n        debugLogger.notifications(\n          \"ERROR\",\n          \"Failed to open notification detail\",\n          {\n            notificationId,\n            error: chrome.runtime.lastError.message,\n          },\n        );\n      } else {\n        debugLogger.notifications(\"INFO\", \"Notification detail opened in popup\", {\n          notificationId,\n          windowId: window?.id,\n        });\n      }\n    },\n  );\n\n  // Clear the notification after opening\n  chrome.notifications.clear(notificationId);\n});\n\n// Export debug info function for console access\n(globalThis as any).exportDebugInfo = function () {\r\n  return {\r\n    debugLogs: debugLogger.exportLogs(),\r\n    performanceData: performanceMonitor.exportPerformanceData(),\r\n    websocketState: wsStateMonitor.getStateReport(),\r\n    initializationData: initTracker.exportData(),\r\n    sessionCache: {\r\n      isAuthenticated: sessionCache.isAuthenticated,\r\n      lastUpdated: sessionCache.lastUpdated\r\n        ? new Date(sessionCache.lastUpdated).toISOString()\r\n        : \"never\",\r\n      userInfo: sessionCache.userInfo\r\n        ? { email: sessionCache.userInfo.email?.substring(0, 3) + \"***\" }\r\n        : null,\r\n      deviceCount: sessionCache.devices?.length || 0,\r\n      pushCount: sessionCache.recentPushes?.length || 0,\r\n    },\r\n    websocketConnected: websocketClient ? websocketClient.isConnected() : false,\r\n  };\r\n};\r\n\r\ndebugLogger.general(\"INFO\", \"Background service worker initialized\", {\r\n  timestamp: new Date().toISOString(),\r\n});\r\n"],
  "mappings": "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",
  "names": ["getApiKey", "apiKey", "apiKey", "deviceIden", "deviceNickname", "apiKey", "deviceIden", "deviceNickname", "autoOpenLinks", "notificationTimeout", "API_BASE_URL", "PUSHES_URL", "DEVICES_URL", "USER_INFO_URL", "notificationDataStore", "apiKey", "autoOpenLinks", "ServiceWorkerState", "apiKey", "websocketClient", "autoOpenLinks", "deviceIden"]
}
