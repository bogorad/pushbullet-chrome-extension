{
  "version": 3,
  "sources": ["../src/lib/ui/dom.ts", "../src/infrastructure/storage/storage.repository.ts", "../src/popup/index.ts"],
  "sourcesContent": ["/**\r\n * DOM manipulation utilities for UI pages\r\n */\r\n\r\n/**\r\n * Safely get an element by ID with type checking\r\n */\r\nexport function getElementById<T extends HTMLElement>(id: string): T {\r\n  const element = document.getElementById(id);\r\n  if (!element) {\r\n    throw new Error(`Element with id \"${id}\" not found`);\r\n  }\r\n  return element as T;\r\n}\r\n\r\n/**\r\n * Safely query selector with type checking\r\n */\r\nexport function querySelector<T extends Element>(selector: string): T {\r\n  const element = document.querySelector(selector);\r\n  if (!element) {\r\n    throw new Error(`Element with selector \"${selector}\" not found`);\r\n  }\r\n  return element as T;\r\n}\r\n\r\n/**\r\n * Show an element\r\n */\r\nexport function show(element: HTMLElement): void {\r\n  element.style.display = '';\r\n}\r\n\r\n/**\r\n * Hide an element\r\n */\r\nexport function hide(element: HTMLElement): void {\r\n  element.style.display = 'none';\r\n}\r\n\r\n/**\r\n * Toggle element visibility\r\n */\r\nexport function toggle(element: HTMLElement): void {\r\n  if (element.style.display === 'none') {\r\n    show(element);\r\n  } else {\r\n    hide(element);\r\n  }\r\n}\r\n\r\n/**\r\n * Set text content safely\r\n */\r\nexport function setText(element: HTMLElement, text: string): void {\r\n  element.textContent = text;\r\n}\r\n\r\n/**\r\n * Set HTML content safely (sanitized)\r\n */\r\nexport function setHTML(element: HTMLElement, html: string): void {\r\n  // Basic sanitization - remove script tags\r\n  const sanitized = html.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '');\r\n  element.innerHTML = sanitized;\r\n}\r\n\r\n/**\r\n * Add event listener with type safety\r\n */\r\nexport function on<K extends keyof HTMLElementEventMap>(\r\n  element: HTMLElement,\r\n  event: K,\r\n  handler: (this: HTMLElement, ev: HTMLElementEventMap[K]) => void\r\n): void {\r\n  element.addEventListener(event, handler);\r\n}\r\n\r\n/**\r\n * Format timestamp for display\r\n */\r\nexport function formatTimestamp(date: Date): string {\r\n  const now = new Date();\r\n  const diff = now.getTime() - date.getTime();\r\n  const seconds = Math.floor(diff / 1000);\r\n  const minutes = Math.floor(seconds / 60);\r\n  const hours = Math.floor(minutes / 60);\r\n  const days = Math.floor(hours / 24);\r\n\r\n  if (seconds < 60) {\r\n    return 'just now';\r\n  } else if (minutes < 60) {\r\n    return `${minutes}m ago`;\r\n  } else if (hours < 24) {\r\n    return `${hours}h ago`;\r\n  } else if (days < 7) {\r\n    return `${days}d ago`;\r\n  } else {\r\n    return date.toLocaleDateString();\r\n  }\r\n}\r\n\r\n/**\r\n * Show status message\r\n */\r\nexport function showStatus(element: HTMLElement, message: string, type: 'success' | 'error' | 'info' = 'info'): void {\r\n  element.textContent = message;\r\n  element.className = `status-message status-${type}`;\r\n  show(element);\r\n  \r\n  // Auto-hide after 3 seconds\r\n  setTimeout(() => {\r\n    hide(element);\r\n  }, 3000);\r\n}\r\n\r\n/**\r\n * Clear all children of an element\r\n */\r\nexport function clearChildren(element: HTMLElement): void {\r\n  while (element.firstChild) {\r\n    element.removeChild(element.firstChild);\r\n  }\r\n}\r\n\r\n", "/**\r\n * Storage Repository Pattern\r\n * \r\n * This module implements the Repository Pattern for storage operations.\r\n * It abstracts away the chrome.storage API, making the code more testable\r\n * and maintainable.\r\n * \r\n * Benefits:\r\n * - Testability: Easy to mock storage in tests\r\n * - Maintainability: Storage logic centralized in one place\r\n * - Clarity: Simple, clear API for storage operations\r\n */\r\n\r\n/**\r\n * Storage Repository Interface\r\n * \r\n * This interface defines the contract for storage operations.\r\n * Any implementation must provide these methods.\r\n */\r\nexport interface StorageRepository {\r\n  // API Key\r\n  getApiKey(): Promise<string | null>;\r\n  setApiKey(key: string | null): Promise<void>;\r\n\r\n  // Device Information\r\n  getDeviceIden(): Promise<string | null>;\r\n  setDeviceIden(iden: string | null): Promise<void>;\r\n\r\n  getDeviceNickname(): Promise<string | null>;\r\n  setDeviceNickname(nickname: string): Promise<void>;\r\n\r\n  // Settings\r\n  getAutoOpenLinks(): Promise<boolean>;\r\n  setAutoOpenLinks(enabled: boolean): Promise<void>;\r\n\r\n  getNotificationTimeout(): Promise<number>;\r\n  setNotificationTimeout(timeout: number): Promise<void>;\r\n\r\n  // Encryption\r\n  getEncryptionPassword(): Promise<string | null>;\r\n  setEncryptionPassword(password: string | null): Promise<void>;\r\n\r\n  // UI State\r\n  getScrollToRecentPushes(): Promise<boolean>;\r\n  setScrollToRecentPushes(scroll: boolean): Promise<void>;\r\n  removeScrollToRecentPushes(): Promise<void>;\r\n\r\n  // Bulk Operations\r\n  clear(): Promise<void>;\r\n  remove(keys: string[]): Promise<void>;\r\n}\r\n\r\n/**\r\n * Chrome Storage Repository Implementation\r\n * \r\n * This class implements the StorageRepository interface using the\r\n * chrome.storage API. It handles the promisification of the callback-based\r\n * chrome.storage API.\r\n */\r\nexport class ChromeStorageRepository implements StorageRepository {\r\n  /**\r\n   * Get API Key from local storage\r\n   * Security: API keys are stored in local storage (not synced) to prevent\r\n   * exposure through Chrome's sync infrastructure\r\n   */\r\n  async getApiKey(): Promise<string | null> {\r\n    const result = await chrome.storage.local.get(['apiKey']);\r\n    return result.apiKey || null;\r\n  }\r\n\r\n  /**\r\n   * Set API Key in local storage\r\n   * Security: API keys are stored in local storage (not synced) to prevent\r\n   * exposure through Chrome's sync infrastructure\r\n   */\r\n  async setApiKey(key: string | null): Promise<void> {\r\n    if (key === null) {\r\n      await chrome.storage.local.remove(['apiKey']);\r\n    } else {\r\n      await chrome.storage.local.set({ apiKey: key });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get Device Identifier from local storage\r\n   */\r\n  async getDeviceIden(): Promise<string | null> {\r\n    const result = await chrome.storage.local.get(['deviceIden']);\r\n    return result.deviceIden || null;\r\n  }\r\n\r\n  /**\r\n   * Set Device Identifier in local storage\r\n   */\r\n  async setDeviceIden(iden: string | null): Promise<void> {\r\n    if (iden === null) {\r\n      await chrome.storage.local.remove(['deviceIden']);\r\n    } else {\r\n      await chrome.storage.local.set({ deviceIden: iden });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get Device Nickname from sync storage\r\n   */\r\n  async getDeviceNickname(): Promise<string | null> {\r\n    const result = await chrome.storage.sync.get(['deviceNickname']);\r\n    return result.deviceNickname || null;\r\n  }\r\n\r\n  /**\r\n   * Set Device Nickname in sync storage\r\n   */\r\n  async setDeviceNickname(nickname: string): Promise<void> {\r\n    await chrome.storage.sync.set({ deviceNickname: nickname });\r\n  }\r\n\r\n  /**\r\n   * Get Auto Open Links setting from sync storage\r\n   */\r\n  async getAutoOpenLinks(): Promise<boolean> {\r\n    const result = await chrome.storage.sync.get(['autoOpenLinks']);\r\n    return result.autoOpenLinks !== undefined ? result.autoOpenLinks : false;\r\n  }\r\n\r\n  /**\r\n   * Set Auto Open Links setting in sync storage\r\n   */\r\n  async setAutoOpenLinks(enabled: boolean): Promise<void> {\r\n    await chrome.storage.sync.set({ autoOpenLinks: enabled });\r\n  }\r\n\r\n  /**\r\n   * Get Notification Timeout from sync storage\r\n   */\r\n  async getNotificationTimeout(): Promise<number> {\r\n    const result = await chrome.storage.sync.get(['notificationTimeout']);\r\n    return result.notificationTimeout !== undefined ? result.notificationTimeout : 5000;\r\n  }\r\n\r\n  /**\r\n   * Set Notification Timeout in sync storage\r\n   */\r\n  async setNotificationTimeout(timeout: number): Promise<void> {\r\n    await chrome.storage.sync.set({ notificationTimeout: timeout });\r\n  }\r\n\r\n  /**\r\n   * Get Encryption Password from local storage\r\n   */\r\n  async getEncryptionPassword(): Promise<string | null> {\r\n    const result = await chrome.storage.local.get(['encryptionPassword']);\r\n    return result.encryptionPassword || null;\r\n  }\r\n\r\n  /**\r\n   * Set Encryption Password in local storage\r\n   */\r\n  async setEncryptionPassword(password: string | null): Promise<void> {\r\n    if (password === null) {\r\n      await chrome.storage.local.remove(['encryptionPassword']);\r\n    } else {\r\n      await chrome.storage.local.set({ encryptionPassword: password });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get Scroll to Recent Pushes flag from local storage\r\n   */\r\n  async getScrollToRecentPushes(): Promise<boolean> {\r\n    const result = await chrome.storage.local.get(['scrollToRecentPushes']);\r\n    return result.scrollToRecentPushes || false;\r\n  }\r\n\r\n  /**\r\n   * Set Scroll to Recent Pushes flag in local storage\r\n   */\r\n  async setScrollToRecentPushes(scroll: boolean): Promise<void> {\r\n    await chrome.storage.local.set({ scrollToRecentPushes: scroll });\r\n  }\r\n\r\n  /**\r\n   * Remove Scroll to Recent Pushes flag from local storage\r\n   */\r\n  async removeScrollToRecentPushes(): Promise<void> {\r\n    await chrome.storage.local.remove(['scrollToRecentPushes']);\r\n  }\r\n\r\n  /**\r\n   * Clear all storage (both sync and local)\r\n   */\r\n  async clear(): Promise<void> {\r\n    await Promise.all([\r\n      chrome.storage.sync.clear(),\r\n      chrome.storage.local.clear()\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Remove specific keys from storage\r\n   * Removes from both sync and local storage\r\n   */\r\n  async remove(keys: string[]): Promise<void> {\r\n    await Promise.all([\r\n      chrome.storage.sync.remove(keys),\r\n      chrome.storage.local.remove(keys)\r\n    ]);\r\n  }\r\n}\r\n\r\n/**\r\n * Create a singleton instance of the storage repository\r\n * This ensures we have a single point of access throughout the application\r\n */\r\nexport const storageRepository = new ChromeStorageRepository();\r\n\r\n", "/**\r\n * Popup page - Full TypeScript implementation\r\n */\r\n\r\nimport type { Push, Device, UserInfo } from \"../types/domain\";\r\nimport {\r\n  getElementById,\r\n  formatTimestamp as formatTimestampUtil,\r\n} from \"../lib/ui/dom\";\r\nimport { storageRepository } from \"../infrastructure/storage/storage.repository\";\r\n\r\n// API URLs - MOSTLY REMOVED\r\n// ARCHITECTURAL CHANGE: Popup no longer makes direct API calls\r\n// All API communication is centralized in the background script\r\n//\r\n// EXCEPTION: File upload still requires direct API access because:\r\n// - FormData cannot be serialized through chrome.runtime.sendMessage\r\n// - File upload involves two steps: upload-request + S3 upload\r\n// - The final push creation is still delegated to background\r\n//\r\n// Removed URLs (now handled by background):\r\n// - USER_INFO_URL (user info fetched by background)\r\n// - DEVICES_URL (devices fetched by background)\r\n// - PUSHES_URL (pushes sent via background)\r\n// - WEBSOCKET_URL (WebSocket managed by background)\r\n\r\n// Type definitions\r\ninterface SessionData {\r\n  isAuthenticated: boolean;\r\n  devices: Device[];\r\n  userInfo: UserInfo;\r\n  recentPushes: Push[];\r\n  autoOpenLinks: boolean;\r\n  websocketConnected?: boolean;\r\n  deviceNickname?: string;\r\n}\r\n\r\ntype PushType = \"note\" | \"link\" | \"file\";\r\n\r\ninterface PushData {\r\n  type: PushType;\r\n  device_iden?: string;\r\n  source_device_iden?: string;\r\n  title?: string;\r\n  body?: string;\r\n  url?: string;\r\n  file_name?: string;\r\n  file_type?: string;\r\n  file_url?: string;\r\n}\r\n\r\ninterface UploadRequestResponse {\r\n  file_name: string;\r\n  file_type: string;\r\n  file_url: string;\r\n  upload_url: string;\r\n  data: Record<string, string>;\r\n}\r\n\r\n// DOM elements\r\nconst loadingSection = getElementById<HTMLDivElement>(\"loading-section\");\r\nconst loginSection = getElementById<HTMLDivElement>(\"login-section\");\r\nconst mainSection = getElementById<HTMLDivElement>(\"main-section\");\r\nconst apiKeyInput = getElementById<HTMLInputElement>(\"api-key\");\r\nconst deviceNicknameInput = getElementById<HTMLInputElement>(\"device-nickname\");\r\nconst saveApiKeyButton = getElementById<HTMLButtonElement>(\"save-api-key\");\r\nconst logoutButton = getElementById<HTMLButtonElement>(\"logout\");\r\nconst userImage = getElementById<HTMLImageElement>(\"user-image\");\r\nconst userName = getElementById<HTMLSpanElement>(\"user-name\");\r\n// Connection indicator removed - using badge instead\r\nconst pushTypeNoteBtn = getElementById<HTMLButtonElement>(\"push-type-note\");\r\nconst pushTypeLinkBtn = getElementById<HTMLButtonElement>(\"push-type-link\");\r\nconst pushTypeFileBtn = getElementById<HTMLButtonElement>(\"push-type-file\");\r\nconst noteForm = getElementById<HTMLDivElement>(\"note-form\");\r\nconst linkForm = getElementById<HTMLDivElement>(\"link-form\");\r\nconst fileForm = getElementById<HTMLDivElement>(\"file-form\");\r\nconst fileInput = getElementById<HTMLInputElement>(\"file-input\");\r\nconst fileSelected = getElementById<HTMLDivElement>(\"file-selected\");\r\nconst fileName = getElementById<HTMLSpanElement>(\"file-name\");\r\nconst fileSize = getElementById<HTMLSpanElement>(\"file-size\");\r\nconst noteTitleInput = getElementById<HTMLInputElement>(\"note-title\");\r\nconst noteBodyInput = getElementById<HTMLTextAreaElement>(\"note-body\");\r\nconst linkTitleInput = getElementById<HTMLInputElement>(\"link-title\");\r\nconst linkUrlInput = getElementById<HTMLInputElement>(\"link-url\");\r\nconst linkBodyInput = getElementById<HTMLTextAreaElement>(\"link-body\");\r\nconst targetDeviceSelect = getElementById<HTMLSelectElement>(\"target-device\");\r\nconst sendPushButton = getElementById<HTMLButtonElement>(\"send-push\");\r\nconst pushesList = getElementById<HTMLDivElement>(\"pushes-list\");\r\nconst statusMessage = getElementById<HTMLDivElement>(\"status-message\");\r\nconst openSettingsBtn = getElementById<HTMLButtonElement>(\"open-settings\");\r\nconst openDebugDashboardBtn = getElementById<HTMLButtonElement>(\r\n  \"open-debug-dashboard\",\r\n);\r\n\r\n// State variables\r\nlet apiKey: string | null = null;\r\nlet deviceNickname = \"Chrome\";\r\nlet devices: Device[] = [];\r\nlet hasInitialized = false;\r\nlet currentPushType: PushType = \"note\";\r\n// websocket variable removed - background script manages the single WebSocket connection\r\n\r\n/**\r\n * Initialize popup\r\n */\r\nfunction init(): void {\r\n  console.log(\"Popup initializing\");\r\n  setupEventListeners();\r\n  checkStorageForApiKey();\r\n}\r\n\r\n/**\r\n * Initialize from session data (from background)\r\n */\r\nasync function initializeFromSessionData(response: SessionData): Promise<void> {\r\n  if (!response.isAuthenticated) {\r\n    showSection(\"login\");\r\n    return;\r\n  }\r\n\r\n  // Update device nickname\r\n  if (response.deviceNickname) {\r\n    deviceNickname = response.deviceNickname;\r\n    console.log(\"Device nickname:\", deviceNickname);\r\n  }\r\n\r\n  // Update user info\r\n  if (response.userInfo) {\r\n    updateUserInfo(response.userInfo);\r\n  }\r\n\r\n  // Populate device dropdown\r\n  populateDeviceDropdown(response.devices);\r\n\r\n  // Display pushes\r\n  displayPushes(response.recentPushes);\r\n\r\n  // Show main section\r\n  showSection(\"main\");\r\n\r\n  // Connection status is now shown via badge icon (no UI indicator needed)\r\n  // WebSocket connection is managed by background script - popup receives updates via chrome.runtime.onMessage\r\n\r\n  hasInitialized = true;\r\n}\r\n\r\n/**\r\n * Check storage for API key and get session data from background\r\n * ARCHITECTURAL CHANGE: Popup no longer makes direct API calls.\r\n * All data is fetched from background script's session cache.\r\n */\r\nfunction checkStorageForApiKey(): void {\r\n  console.log(\"Requesting session data from background\");\r\n  showSection(\"loading\");\r\n\r\n  // Request session data from background script (single source of truth)\r\n  chrome.runtime.sendMessage(\r\n    { action: \"getSessionData\" },\r\n    async (response: SessionData) => {\r\n      if (chrome.runtime.lastError) {\r\n        console.error(\"Error getting session data:\", chrome.runtime.lastError);\r\n        showSection(\"login\");\r\n        return;\r\n      }\r\n\r\n      if (response.isAuthenticated) {\r\n        // Initialize from background's cached data\r\n        await initializeFromSessionData(response);\r\n\r\n        // Check if we should scroll to recent pushes\r\n        const shouldScroll = await storageRepository.getScrollToRecentPushes();\r\n        if (shouldScroll) {\r\n          await storageRepository.removeScrollToRecentPushes();\r\n          setTimeout(() => {\r\n            scrollToRecentPushes();\r\n          }, 100);\r\n        }\r\n      } else {\r\n        showSection(\"login\");\r\n      }\r\n    },\r\n  );\r\n}\r\n\r\n/**\r\n * Show section\r\n */\r\nfunction showSection(section: \"loading\" | \"login\" | \"main\"): void {\r\n  console.log(\"Showing section:\", section);\r\n  loadingSection.style.display = section === \"loading\" ? \"flex\" : \"none\";\r\n  loginSection.style.display = section === \"login\" ? \"block\" : \"none\";\r\n  mainSection.style.display = section === \"main\" ? \"block\" : \"none\";\r\n}\r\n\r\n/**\r\n * Set up event listeners\r\n */\r\nfunction setupEventListeners(): void {\r\n  // Save API key button\r\n  saveApiKeyButton.addEventListener(\"click\", saveApiKey);\r\n\r\n  // API key input - save on Enter\r\n  apiKeyInput.addEventListener(\"keyup\", (event) => {\r\n    if (event.key === \"Enter\") {\r\n      saveApiKey();\r\n    }\r\n  });\r\n\r\n  // Device nickname input - save on Enter\r\n  deviceNicknameInput.addEventListener(\"keyup\", (event) => {\r\n    if (event.key === \"Enter\") {\r\n      saveApiKey();\r\n    }\r\n  });\r\n\r\n  // Logout button\r\n  logoutButton.addEventListener(\"click\", logout);\r\n\r\n  // Push type buttons\r\n  pushTypeNoteBtn.addEventListener(\"click\", () => togglePushType(\"note\"));\r\n  pushTypeLinkBtn.addEventListener(\"click\", () => togglePushType(\"link\"));\r\n  pushTypeFileBtn.addEventListener(\"click\", () => togglePushType(\"file\"));\r\n\r\n  // File input\r\n  fileInput.addEventListener(\"change\", handleFileSelect);\r\n\r\n  // Send push button\r\n  sendPushButton.addEventListener(\"click\", sendPush);\r\n\r\n  // Open settings\r\n  openSettingsBtn.addEventListener(\"click\", () => {\r\n    chrome.runtime.openOptionsPage();\r\n  });\r\n\r\n  // Open debug dashboard\r\n  openDebugDashboardBtn.addEventListener(\"click\", () => {\r\n    chrome.tabs.create({\r\n      url: chrome.runtime.getURL(\"debug-dashboard.html\"),\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Save API key\r\n * ARCHITECTURAL CHANGE: Delegates API key validation to background script\r\n */\r\nasync function saveApiKey(): Promise<void> {\r\n  const newApiKey = apiKeyInput.value.trim();\r\n  const newNickname = deviceNicknameInput.value.trim() || \"Chrome\";\r\n\r\n  if (!newApiKey) {\r\n    showStatus(\"Please enter an Access Token.\", \"error\");\r\n    return;\r\n  }\r\n\r\n  showSection(\"loading\");\r\n\r\n  try {\r\n    // Save to storage repository\r\n    await storageRepository.setApiKey(newApiKey);\r\n    await storageRepository.setDeviceNickname(newNickname);\r\n\r\n    apiKey = newApiKey;\r\n    deviceNickname = newNickname;\r\n\r\n    // Notify background to validate and initialize\r\n    // Background will respond AFTER initialization is complete (no setTimeout needed!)\r\n    chrome.runtime.sendMessage(\r\n      {\r\n        action: \"apiKeyChanged\",\r\n        apiKey: newApiKey,\r\n        deviceNickname: newNickname,\r\n      },\r\n      (response: SessionData) => {\r\n        if (chrome.runtime.lastError) {\r\n          console.error(\r\n            \"Error notifying background:\",\r\n            chrome.runtime.lastError,\r\n          );\r\n          showStatus(\"Error: Could not connect to background script\", \"error\");\r\n          showSection(\"login\");\r\n          return;\r\n        }\r\n\r\n        // Response contains session data after background has completed initialization\r\n        if (response.success === false) {\r\n          showStatus(\r\n            `Error: ${response.error || \"Invalid Access Token\"}`,\r\n            \"error\",\r\n          );\r\n          showSection(\"login\");\r\n          return;\r\n        }\r\n\r\n        if (response.isAuthenticated) {\r\n          initializeFromSessionData(response);\r\n          hasInitialized = true;\r\n        } else {\r\n          showStatus(\"Invalid Access Token\", \"error\");\r\n          showSection(\"login\");\r\n        }\r\n      },\r\n    );\r\n  } catch (error) {\r\n    showStatus(`Error: ${(error as Error).message}`, \"error\");\r\n    showSection(\"login\");\r\n  }\r\n}\r\n\r\n/**\r\n * Logout\r\n */\r\nasync function logout(): Promise<void> {\r\n  // WebSocket disconnection is handled by background script\r\n  await storageRepository.setApiKey(null);\r\n  await storageRepository.setDeviceIden(null);\r\n  apiKey = null;\r\n  hasInitialized = false;\r\n\r\n  // Notify background script to disconnect WebSocket\r\n  chrome.runtime.sendMessage({ action: \"logout\" }).catch((error) => {\r\n    console.warn(\"Could not notify background of logout:\", error.message);\r\n  });\r\n\r\n  showSection(\"login\");\r\n  apiKeyInput.value = \"\";\r\n  deviceNicknameInput.value = \"\";\r\n}\r\n\r\n/**\r\n * REMOVED: initializeAuthenticated()\r\n *\r\n * This function previously made direct API calls to fetch user info, devices, and pushes.\r\n * It has been removed as part of the architectural refactoring to centralize all API\r\n * communication in the background script.\r\n *\r\n * The popup now uses initializeFromSessionData() which receives data from the background\r\n * script's session cache via chrome.runtime.sendMessage({ action: 'getSessionData' }).\r\n */\r\n\r\n/**\r\n * REMOVED: fetchUserInfo(), fetchDevices(), fetchRecentPushes()\r\n *\r\n * These functions previously made direct API calls to the Pushbullet API.\r\n * They have been removed as part of the architectural refactoring to centralize\r\n * all API communication in the background script.\r\n *\r\n * ARCHITECTURAL CHANGE:\r\n * - The popup is now a \"dumb client\" that only displays data\r\n * - All data comes from the background script's session cache\r\n * - The background script is the single source of truth for API state\r\n * - This eliminates redundant API calls every time the popup opens\r\n * - Improves efficiency and prevents state desynchronization\r\n *\r\n * Data flow:\r\n * 1. Popup opens \u2192 sends getSessionData message to background\r\n * 2. Background responds with cached session data\r\n * 3. Popup displays the data using initializeFromSessionData()\r\n * 4. Background proactively sends pushesUpdated when new data arrives\r\n */\r\n\r\n/**\r\n * REMOVED: connectWebSocket() and disconnectWebSocket()\r\n *\r\n * The popup no longer maintains its own WebSocket connection.\r\n * The background service worker manages a single, persistent WebSocket connection\r\n * and sends push updates to the popup via chrome.runtime.sendMessage with action 'pushesUpdated'.\r\n *\r\n * This architectural change:\r\n * - Eliminates dual state (popup and background having separate connections)\r\n * - Reduces resource consumption (only one WebSocket connection)\r\n * - Ensures connection persists when popup is closed\r\n * - Makes background script the single source of truth for WebSocket state\r\n */\r\n\r\n/**\r\n * Update user info\r\n */\r\nfunction updateUserInfo(userInfo: UserInfo): void {\r\n  userName.textContent = userInfo.name || userInfo.email;\r\n\r\n  if (userInfo.image_url) {\r\n    userImage.src = userInfo.image_url;\r\n    userImage.style.display = \"block\";\r\n  } else {\r\n    userImage.style.display = \"none\";\r\n  }\r\n}\r\n\r\n/**\r\n * Populate device dropdown\r\n */\r\nfunction populateDeviceDropdown(devicesList: Device[]): void {\r\n  const devicesToUse = devicesList || devices;\r\n\r\n  // Clear existing options except 'All Devices'\r\n  while (targetDeviceSelect.options.length > 1) {\r\n    targetDeviceSelect.remove(1);\r\n  }\r\n\r\n  // Add devices\r\n  devicesToUse.forEach((device) => {\r\n    const option = document.createElement(\"option\");\r\n    option.value = device.iden;\r\n    option.textContent = device.nickname || device.model || \"Unknown Device\";\r\n    targetDeviceSelect.appendChild(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Display pushes\r\n */\r\nfunction displayPushes(pushes: Push[]): void {\r\n  pushesList.innerHTML = \"\";\r\n\r\n  if (!pushes || pushes.length === 0) {\r\n    pushesList.innerHTML = \"<p>No recent pushes</p>\";\r\n    return;\r\n  }\r\n\r\n  // Show 10 most recent\r\n  const recentPushes = pushes.slice(0, 10);\r\n\r\n  recentPushes.forEach((push) => {\r\n    let title = push.title;\r\n    let body = push.body;\r\n    const url = push.url;\r\n\r\n    // Handle mirrored SMS notifications (check before generic sms_changed)\r\n    // The application_name might vary between Android phones, so we check if it includes 'messaging'\r\n    if (\r\n      push.type === \"mirror\" &&\r\n      push.application_name?.toLowerCase().includes(\"messaging\")\r\n    ) {\r\n      title = `SMS: ${push.title}`;\r\n      body = push.body || \"\";\r\n      const pushItem = document.createElement(\"div\");\r\n      pushItem.className = \"push-item\";\r\n      pushItem.classList.add(\"push-sms\"); // Add visual indicator\r\n\r\n      // Timestamp\r\n      if (push.created) {\r\n        const timestamp = new Date(push.created * 1000);\r\n        const timeElement = document.createElement(\"div\");\r\n        timeElement.className = \"push-time\";\r\n        timeElement.textContent = formatTimestamp(timestamp);\r\n        pushItem.appendChild(timeElement);\r\n      }\r\n\r\n      // Title\r\n      if (title) {\r\n        const titleEl = document.createElement(\"div\");\r\n        titleEl.className = \"push-title\";\r\n        titleEl.textContent = title;\r\n        pushItem.appendChild(titleEl);\r\n      }\r\n\r\n      // Body\r\n      if (body) {\r\n        const bodyEl = document.createElement(\"div\");\r\n        bodyEl.className = \"push-body\";\r\n        bodyEl.textContent = body;\r\n        pushItem.appendChild(bodyEl);\r\n      }\r\n\r\n      pushesList.appendChild(pushItem);\r\n      return; // Early return to avoid duplicate processing\r\n    }\r\n\r\n    // Handle legacy SMS pushes (fallback)\r\n    if (\r\n      push.type === \"sms_changed\" &&\r\n      push.notifications &&\r\n      push.notifications.length > 0\r\n    ) {\r\n      const sms = push.notifications[0];\r\n      title = sms.title || \"SMS\";\r\n      body = sms.body || \"\";\r\n    }\r\n\r\n    // Skip empty\r\n    if (!title && !body && !url) {\r\n      return;\r\n    }\r\n\r\n    const pushItem = document.createElement(\"div\");\r\n    pushItem.className = \"push-item\";\r\n\r\n    // Add SMS badge\r\n    if (push.type === \"sms_changed\") {\r\n      pushItem.classList.add(\"push-sms\");\r\n    }\r\n\r\n    // Timestamp\r\n    if (push.created) {\r\n      const timestamp = new Date(push.created * 1000);\r\n      const timeElement = document.createElement(\"div\");\r\n      timeElement.className = \"push-time\";\r\n      timeElement.textContent = formatTimestamp(timestamp);\r\n      pushItem.appendChild(timeElement);\r\n    }\r\n\r\n    // Title\r\n    if (title) {\r\n      const titleEl = document.createElement(\"div\");\r\n      titleEl.className = \"push-title\";\r\n      titleEl.textContent = title;\r\n      pushItem.appendChild(titleEl);\r\n    }\r\n\r\n    // URL\r\n    if (url) {\r\n      const urlEl = document.createElement(\"a\");\r\n      urlEl.href = url;\r\n      urlEl.target = \"_blank\";\r\n      urlEl.className = \"push-url\";\r\n      urlEl.textContent = url;\r\n      pushItem.appendChild(urlEl);\r\n    }\r\n\r\n    // Body\r\n    if (body) {\r\n      const bodyEl = document.createElement(\"div\");\r\n      bodyEl.className = \"push-body\";\r\n      bodyEl.textContent = body;\r\n      pushItem.appendChild(bodyEl);\r\n    }\r\n\r\n    pushesList.appendChild(pushItem);\r\n  });\r\n}\r\n\r\n/**\r\n * Format timestamp\r\n */\r\nfunction formatTimestamp(date: Date): string {\r\n  const now = new Date();\r\n  const diffMs = now.getTime() - date.getTime();\r\n  const diffSec = Math.floor(diffMs / 1000);\r\n  const diffMin = Math.floor(diffSec / 60);\r\n  const diffHour = Math.floor(diffMin / 60);\r\n  const diffDay = Math.floor(diffHour / 24);\r\n\r\n  if (diffDay > 0) {\r\n    return `${diffDay}d ago`;\r\n  } else if (diffHour > 0) {\r\n    return `${diffHour}h ago`;\r\n  } else if (diffMin > 0) {\r\n    return `${diffMin}m ago`;\r\n  } else {\r\n    return \"just now\";\r\n  }\r\n}\r\n\r\n/**\r\n * Handle file selection\r\n */\r\nfunction handleFileSelect(event: Event): void {\r\n  const target = event.target as HTMLInputElement;\r\n  const file = target.files?.[0];\r\n  if (file) {\r\n    fileName.textContent = file.name;\r\n    fileSize.textContent = formatFileSize(file.size);\r\n    fileSelected.style.display = \"block\";\r\n  } else {\r\n    fileSelected.style.display = \"none\";\r\n  }\r\n}\r\n\r\n/**\r\n * Format file size\r\n */\r\nfunction formatFileSize(bytes: number): string {\r\n  if (bytes === 0) return \"0 Bytes\";\r\n  const k = 1024;\r\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  return Math.round((bytes / Math.pow(k, i)) * 100) / 100 + \" \" + sizes[i];\r\n}\r\n\r\n/**\r\n * Toggle push type\r\n */\r\nasync function togglePushType(type: PushType): Promise<void> {\r\n  currentPushType = type;\r\n\r\n  // Update buttons\r\n  pushTypeNoteBtn.classList.toggle(\"active\", type === \"note\");\r\n  pushTypeLinkBtn.classList.toggle(\"active\", type === \"link\");\r\n  pushTypeFileBtn.classList.toggle(\"active\", type === \"file\");\r\n\r\n  if (type === \"note\") {\r\n    noteForm.style.display = \"block\";\r\n    linkForm.style.display = \"none\";\r\n    fileForm.style.display = \"none\";\r\n  } else if (type === \"link\") {\r\n    noteForm.style.display = \"none\";\r\n    linkForm.style.display = \"block\";\r\n    fileForm.style.display = \"none\";\r\n\r\n    // Auto-populate with current tab\r\n    try {\r\n      const tabs = await chrome.tabs.query({\r\n        active: true,\r\n        currentWindow: true,\r\n      });\r\n      if (tabs[0]) {\r\n        linkUrlInput.value = tabs[0].url || \"\";\r\n        linkTitleInput.value = tabs[0].title || \"\";\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error getting current tab info:\", error);\r\n    }\r\n  } else if (type === \"file\") {\r\n    noteForm.style.display = \"none\";\r\n    linkForm.style.display = \"none\";\r\n    fileForm.style.display = \"block\";\r\n  }\r\n}\r\n\r\n/**\r\n * Send push\r\n */\r\nasync function sendPush(): Promise<void> {\r\n  logToBackground(\"INFO\", \"[sendPush] Function initiated.\");\r\n\r\n  try {\r\n    const pushType = currentPushType;\r\n    const targetDevice = targetDeviceSelect.value;\r\n\r\n    logToBackground(\"INFO\", `[sendPush] currentPushType is: '${pushType}'`);\r\n\r\n    const pushData: PushData = {\r\n      type: pushType,\r\n    };\r\n\r\n    // Set device target\r\n    if (targetDevice !== \"all\") {\r\n      pushData.device_iden = targetDevice;\r\n    }\r\n\r\n    // Set push data based on type\r\n    if (pushType === \"note\") {\r\n      logToBackground(\"INFO\", '[sendPush] Handling \"note\" type.');\r\n      pushData.title = noteTitleInput.value.trim();\r\n      pushData.body = noteBodyInput.value.trim();\r\n\r\n      if (!pushData.title && !pushData.body) {\r\n        logToBackground(\r\n          \"WARN\",\r\n          \"[sendPush] Exiting: Note title and body are empty.\",\r\n        );\r\n        showStatus(\"Please enter a title or body for the note.\", \"error\");\r\n        return;\r\n      }\r\n    } else if (pushType === \"link\") {\r\n      logToBackground(\"INFO\", '[sendPush] Handling \"link\" type.');\r\n      pushData.title = linkTitleInput.value.trim();\r\n      pushData.url = linkUrlInput.value.trim();\r\n      pushData.body = linkBodyInput.value.trim();\r\n\r\n      if (!pushData.url) {\r\n        logToBackground(\"WARN\", \"[sendPush] Exiting: Link URL is empty.\");\r\n        showStatus(\"Please enter a URL for the link.\", \"error\");\r\n        return;\r\n      }\r\n    } else if (pushType === \"file\") {\r\n      logToBackground(\"INFO\", '[sendPush] Handling \"file\" type.');\r\n      const file = fileInput.files?.[0];\r\n      if (!file) {\r\n        logToBackground(\r\n          \"WARN\",\r\n          \"[sendPush] Exiting: File type selected but no file is attached.\",\r\n        );\r\n        showStatus(\"Please select a file to attach.\", \"error\");\r\n        return;\r\n      }\r\n\r\n      showStatus(\"Uploading file...\", \"info\");\r\n\r\n      try {\r\n        const uploadApiKey = await storageRepository.getApiKey();\r\n        if (!uploadApiKey) {\r\n          logToBackground(\r\n            \"WARN\",\r\n            \"[sendPush] Exiting: Cannot upload file, user is not logged in.\",\r\n          );\r\n          showStatus(\"Not logged in. Please log in first.\", \"error\");\r\n          return;\r\n        }\r\n\r\n        // Request upload authorization\r\n        const uploadRequestResponse = await fetch(\r\n          \"https://api.pushbullet.com/v2/upload-request\",\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Access-Token\": uploadApiKey,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n              file_name: file.name,\r\n              file_type: file.type || \"application/octet-stream\",\r\n            }),\r\n          },\r\n        );\r\n\r\n        if (!uploadRequestResponse.ok) {\r\n          throw new Error(\"Failed to request file upload authorization\");\r\n        }\r\n\r\n        const uploadData =\r\n          (await uploadRequestResponse.json()) as UploadRequestResponse;\r\n\r\n        // Upload to S3\r\n        const formData = new FormData();\r\n        Object.keys(uploadData.data).forEach((key) => {\r\n          formData.append(key, uploadData.data[key]);\r\n        });\r\n        formData.append(\"file\", file);\r\n\r\n        const uploadResponse = await fetch(uploadData.upload_url, {\r\n          method: \"POST\",\r\n          body: formData,\r\n        });\r\n\r\n        if (!uploadResponse.ok) {\r\n          throw new Error(\"Failed to upload file to server\");\r\n        }\r\n\r\n        // Create file push\r\n        pushData.type = \"file\";\r\n        pushData.file_name = uploadData.file_name;\r\n        pushData.file_type = uploadData.file_type;\r\n        pushData.file_url = uploadData.file_url;\r\n        pushData.body = (\r\n          document.getElementById(\"file-body\") as HTMLTextAreaElement\r\n        ).value.trim();\r\n\r\n        showStatus(\"File uploaded, sending push...\", \"info\");\r\n      } catch (uploadError) {\r\n        logToBackground(\"ERROR\", \"[sendPush] File upload error.\", {\r\n          error: (uploadError as Error).message,\r\n        });\r\n        showStatus(\r\n          \"Failed to upload file: \" + (uploadError as Error).message,\r\n          \"error\",\r\n        );\r\n        return;\r\n      }\r\n    }\r\n\r\n    logToBackground(\r\n      \"INFO\",\r\n      \"[sendPush] Validation passed. Preparing to send message to background script.\",\r\n      pushData,\r\n    );\r\n\r\n    // Send push via background script\r\n    chrome.runtime.sendMessage(\r\n      {\r\n        action: \"sendPush\",\r\n        pushData: pushData,\r\n      },\r\n      (response) => {\r\n        if (chrome.runtime.lastError) {\r\n          logToBackground(\r\n            \"ERROR\",\r\n            \"[sendPush] Error sending message to background.\",\r\n            { error: chrome.runtime.lastError },\r\n          );\r\n          showStatus(\"Error: Could not send push\", \"error\");\r\n          return;\r\n        }\r\n\r\n        logToBackground(\r\n          \"INFO\",\r\n          \"[sendPush] Received response from background script.\",\r\n          response,\r\n        );\r\n\r\n        if (response.success) {\r\n          clearPushForm();\r\n          showStatus(\"Push sent successfully!\", \"success\");\r\n          chrome.runtime.sendMessage(\r\n            { action: \"getSessionData\" },\r\n            (sessionResponse: SessionData) => {\r\n              if (sessionResponse && sessionResponse.recentPushes) {\r\n                displayPushes(sessionResponse.recentPushes);\r\n              }\r\n            },\r\n          );\r\n        } else {\r\n          showStatus(\r\n            `Error: ${response.error || \"Failed to send push\"}`,\r\n            \"error\",\r\n          );\r\n        }\r\n      },\r\n    );\r\n  } catch (error) {\r\n    logToBackground(\"ERROR\", \"[sendPush] An unexpected error occurred.\", {\r\n      error: (error as Error).message,\r\n    });\r\n    showStatus(\r\n      `An unexpected error occurred: ${(error as Error).message}`,\r\n      \"error\",\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Clear push form\r\n */\r\nfunction clearPushForm(): void {\r\n  noteTitleInput.value = \"\";\r\n  noteBodyInput.value = \"\";\r\n  linkTitleInput.value = \"\";\r\n  linkUrlInput.value = \"\";\r\n  linkBodyInput.value = \"\";\r\n  fileInput.value = \"\";\r\n  (document.getElementById(\"file-body\") as HTMLTextAreaElement).value = \"\";\r\n  fileSelected.style.display = \"none\";\r\n}\r\n\r\n/**\r\n * Show status message\r\n */\r\nfunction showStatus(message: string, type: \"success\" | \"error\" | \"info\"): void {\r\n  statusMessage.textContent = message;\r\n  statusMessage.className = type;\r\n\r\n  setTimeout(() => {\r\n    statusMessage.textContent = \"\";\r\n    statusMessage.className = \"\";\r\n  }, 3000);\r\n}\r\n\r\n/**\r\n * Sends a log message to the background script for centralized logging.\r\n * Falls back to console.log if the background script is unreachable.\r\n * @param level The severity level of the log.\r\n * @param message The log message.\r\n * @param data Optional data to include with the log.\r\n */\r\nfunction logToBackground(\r\n  level: \"INFO\" | \"WARN\" | \"ERROR\",\r\n  message: string,\r\n  data?: unknown,\r\n) {\r\n  try {\r\n    chrome.runtime.sendMessage({\r\n      action: \"log\",\r\n      payload: {\r\n        level,\r\n        message,\r\n        data,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    // Fallback to console if background is unavailable\r\n    const fallbackLog = `[FALLBACK] ${message}`;\r\n    if (level === \"ERROR\") {\r\n      console.error(fallbackLog, data, error);\r\n    } else if (level === \"WARN\") {\r\n      console.warn(fallbackLog, data);\r\n    } else {\r\n      // We don't log INFO fallbacks to avoid noise if the background is just waking up.\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Scroll to recent pushes\r\n */\r\nfunction scrollToRecentPushes(): void {\r\n  const recentPushesSection = document.querySelector(\".recent-pushes\");\r\n  if (recentPushesSection) {\r\n    console.log(\"Scrolling to recent pushes section\");\r\n    recentPushesSection.scrollIntoView({\r\n      behavior: \"smooth\",\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Update connection indicator\r\n * REMOVED: Connection indicator UI element removed, using badge instead\r\n */\r\n// function updateConnectionIndicator() - REMOVED\r\n\r\n/**\r\n * Listen for messages from background\r\n */\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n  if (message.action === \"connectionStateChanged\") {\r\n    // Connection state changes now shown via badge icon only\r\n    console.log(\"Connection state changed:\", message.state);\r\n  } else if (message.action === \"pushesUpdated\") {\r\n    if (message.pushes) {\r\n      displayPushes(message.pushes as Push[]);\r\n    }\r\n  }\r\n});\r\n\r\n// Initialize on DOM load\r\nif (document.readyState === \"loading\") {\r\n  document.addEventListener(\"DOMContentLoaded\", init);\r\n} else {\r\n  init();\r\n}\r\n"],
  "mappings": "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",
  "names": ["pushItem"]
}
